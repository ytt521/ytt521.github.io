<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>单例模式</title>
      <link href="/post/f1601c3e.html"/>
      <url>/post/f1601c3e.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><p>单例模式：采取一定的方法保证在整个的软件系统中，对某个类<font color="red">只能存在一个对象实例</font>,并且该类只提供一个取得其对象实例的方法</p><h3 id="二、实现方式"><a href="#二、实现方式" class="headerlink" title="二、实现方式"></a>二、实现方式</h3><h4 id="1-饿汉式（静态常量）"><a href="#1-饿汉式（静态常量）" class="headerlink" title="1.饿汉式（静态常量）"></a>1.饿汉式（静态常量）</h4><ol><li>构造器私有化（防止<code>new</code>）</li><li>类的内部创建对象</li><li>向外暴露一个静态的公共方法</li><li>代码实现</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Class Singleton&#123;</span><br><span class="line">  <span class="comment">//1.构造器私有化，外部不能new</span></span><br><span class="line">  <span class="keyword">private</span> Singleton&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//2.本类内部创建对象实例</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Sineleton instance=<span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">  <span class="comment">//3.提供一个公有的静态方法，返回实例对象</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> instance();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优缺点：</p><ul><li>优点：写法简单，在类加载的时候就完成了实例化，避免了线程同步问题</li><li>缺点：在类加载的时候完成初始化，没有达到懒加载的效果。如果从始至终未使用这个实例，则会造成内存的浪费</li><li>这种方式基于类加载机制避免了多线程的同步问题，不过，instance在类加载的时候就被实例化，在单例模式中大多数都是调用<code>getInstance</code>方法，但是导致类加载的原因有很多中，因此不能确定有其他的方式（或者其他的静态方法）导致类加载，这时初始化<code>instance</code>就没达到懒加载的效果</li><li>结论：这种单例模式可用，<font color="orange">可能</font>造成内存浪费</li></ul><h4 id="2-饿汉式（静态代码块）"><a href="#2-饿汉式（静态代码块）" class="headerlink" title="2.饿汉式（静态代码块）"></a>2.饿汉式（静态代码块）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line">  <span class="comment">//1.构造器私有化，外部不能new</span></span><br><span class="line">  <span class="keyword">private</span> Singleton&#123;</span><br><span class="line">     </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//2.本类内部创建对象实例</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Sineleton instance;</span><br><span class="line">  <span class="keyword">static</span>&#123;</span><br><span class="line">    instance=<span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//3.提供一个公有的静态方法，返回实例对象</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> instance();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优缺点：</p><ul><li>这种方式和上面的方式类似，只不过将类的实例化过程放到了静态代码块中，也就是在类加载的时候，就执行静态代码块中的代码，初始化类的实例。</li><li>结论：这种单例模式可用，但是可能造成内存浪费</li></ul><h4 id="3-懒汉式（线程不安全）"><a href="#3-懒汉式（线程不安全）" class="headerlink" title="3.懒汉式（线程不安全）"></a>3.懒汉式（线程不安全）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">Sineleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//提供一个静态的共有方法，当使用到该方法时，才去创创建instance</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(instace==<span class="literal">null</span>)&#123;</span><br><span class="line">      instance=<span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优缺点：</p><ul><li>起到了懒加载的效果，但是只能在单线程下使用</li><li>如果在多线程下，一个线程进入到了<code>if</code>语句中，还未来得及往下执行，另一个线程也进入到了这个语句中，这时会产生多个实例。所以在多线程环境下不可使用这种方式</li><li>结论：在实际开发中，<font color="red">不要使用这种方式</font></li></ul><h4 id="4-懒汉式（线程安全，同步方法）"><a href="#4-懒汉式（线程安全，同步方法）" class="headerlink" title="4.懒汉式（线程安全，同步方法）"></a>4.懒汉式（线程安全，同步方法）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">Sineleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//提供一个静态的共有方法，当使用到该方法时，才去创创建instance</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(instace==<span class="literal">null</span>)&#123;</span><br><span class="line">      instance=<span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优缺点：</p><ul><li>解决了线程不安全问题</li><li>效率低，每个线程在获取类的实例时，执行<code>getInstance()</code>方法都要进行同步。而其实这个方法只执行一次实例化代码就够了，后面的想活的该类实例，直接return就行了。方法进行同步效率太低、</li><li>结论：在实际开发中，不推荐</li></ul><h4 id="5-懒汉式（线程安全，同步代码块）"><a href="#5-懒汉式（线程安全，同步代码块）" class="headerlink" title="5.懒汉式（线程安全，同步代码块）"></a>5.懒汉式（线程安全，同步代码块）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">Sineleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//提供一个静态的共有方法，当使用到该方法时，才去创创建instance</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(instace==<span class="literal">null</span>)&#123;</span><br><span class="line">      <span class="keyword">synchronized</span>(Singleton.class)&#123;</span><br><span class="line">          instance=<span class="keyword">new</span> <span class="title class_">Singleton</span>(); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优缺点：</p><ul><li>这种方式，本意是对第四种方式的改进</li><li><font color="orange">但是这种同步并不能其起到线程同步的作用</font></li><li>结论：在实际开发中，<font color="red">不能使用这种方式</font></li></ul><h4 id="6-双重检查"><a href="#6-双重检查" class="headerlink" title="6.双重检查"></a>6.双重检查</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">Sineleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">  <span class="comment">//提供一个静态的共有方法，当使用到该方法时，才去创创建instance</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(instace==<span class="literal">null</span>)&#123;</span><br><span class="line">      <span class="keyword">synchronized</span>(Singleton.class)&#123;</span><br><span class="line">         <span class="keyword">if</span>(instance==<span class="literal">null</span>)&#123;</span><br><span class="line">               instance=<span class="keyword">new</span> <span class="title class_">Singleton</span>(); </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优缺点：</p><ul><li>实例化代码只执行一次</li><li>线程安全；延迟加载；效率较高</li><li>结论：在实际开发中，推荐</li></ul><h4 id="7-静态内部类"><a href="#7-静态内部类" class="headerlink" title="7.静态内部类"></a>7.静态内部类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonInstance</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE=<span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> SingletonInstance.INSTANCE</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优缺点：</p><ul><li>这种方式采用了类装载机制来保证初始化实例时只有一个线程</li><li>静态内部类方式在Singleton类被装载时并不会立即实例化，而是在需要实例化时，调用getInstance方法，才会装载SingletonInstance类，从而完成Singleton的实例化</li><li>类的静态属性只会在第一个加载类的时候初始化，所以在这里，JVM帮助我们保证了线程的安全箱，在类进行初始化时，别的线程是无法进入的</li><li>避免了线程不安全，利用静态内部类特点实现延迟加载，效率高</li><li>结论：推荐使用</li></ul><h4 id="8-枚举"><a href="#8-枚举" class="headerlink" title="8.枚举"></a>8.枚举</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Singleton</span>()&#123;</span><br><span class="line">  INSTANCE;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">    sout(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">  Singleton instance=Singleton.INSTANCE;</span><br><span class="line">  instance.save();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优缺点：</p><ul><li>这种借助JDK1.5中添加的枚举类实现单例模式，不仅能够避免多线程同步问题，而且还能防止反序列化重新创建新的对象</li><li>这种方式是Effective Java作者Josh Bloch提倡的方式</li><li>结论：推荐使用</li></ul><h3 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h3><ol><li>单例模式保证了系统内存中该类只存在一个对象，节省了系统资源，对于一些需要频繁创建销毁的对象，使用单例模式可以提高系统性能</li><li>当想实例化一个单例类的时候，必须姚记住使用相应的获取对象的方法，而不是使用new</li><li>单例模式使用场景：需要频繁的进行创建和销毁的对象，创建对象时耗时过多或耗费资源过多（即：重量级对象），但又静态用到的对象、工具类对象、频繁访问数据库或者文件的对象（如数据源、session工厂等）</li></ol>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代理模式</title>
      <link href="/post/7b510e10.html"/>
      <url>/post/7b510e10.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、代理模式概述"><a href="#一、代理模式概述" class="headerlink" title="一、代理模式概述"></a>一、代理模式概述</h3><h4 id="1-生活中的代理案例"><a href="#1-生活中的代理案例" class="headerlink" title="1.生活中的代理案例"></a>1.生活中的代理案例</h4><ul><li>房屋中介<ul><li>客户手里没有房源信息，找一个中介</li></ul></li><li>商品代购<ul><li>代购者可以拿到低成本的商品，拥有自己的渠道</li></ul></li></ul><h4 id="2-为什么要使用代理"><a href="#2-为什么要使用代理" class="headerlink" title="2.为什么要使用代理"></a>2.为什么要使用代理</h4><ul><li>对于消费者而言，可以减少成本，只需要关心自己需要的商品，不需要去寻找渠道</li></ul><h4 id="3-代理模式在java中的应用"><a href="#3-代理模式在java中的应用" class="headerlink" title="3.代理模式在java中的应用"></a>3.代理模式在java中的应用</h4><ul><li>统一异常处理</li><li>Mybatis</li><li>Aop</li><li>日志框架</li></ul><h4 id="4-概述"><a href="#4-概述" class="headerlink" title="4.概述"></a>4.概述</h4><ul><li>代理模式：<font color="orange">结构型模式</font>，指一个对象本身不做实际的操作，而是通过其他对象来得到自己想要得到的结果</li><li>意义：目标对象之关系自己的实现细节，通过代理对象来实现功能的<font color="orange">增强</font>,可以扩展目标对象的功能</li><li>体现了非常重要的编程思想：不能随意修改源码，如果需要修改，则通过代理的方式进行功能扩展</li></ul><hr><h3 id="二、代理的实现方式"><a href="#二、代理的实现方式" class="headerlink" title="二、代理的实现方式"></a>二、代理的实现方式</h3><h4 id="1-静态代理"><a href="#1-静态代理" class="headerlink" title="1.静态代理"></a>1.静态代理</h4><h5 id="1-1案例"><a href="#1-1案例" class="headerlink" title="1.1案例"></a>1.1案例</h5><p>通过代理模式实现事务操作</p><p><strong>接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IStudentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    Student <span class="title function_">query</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实现类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentImpl</span> <span class="keyword">implements</span> <span class="title class_">IStudentService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;保存信息&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">query</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;查询&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Student.builder().name(<span class="string">&quot;zhang&quot;</span>).age(<span class="number">12</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>增强类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DaoTransaction</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">      log.info(<span class="string">&quot;开启事务操作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;关闭事务&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>代理类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentProxy</span> <span class="keyword">implements</span> <span class="title class_">IStudentService</span> &#123;</span><br><span class="line">    <span class="comment">//目标类对象</span></span><br><span class="line">    <span class="keyword">private</span> StudentImpl studentImpl;</span><br><span class="line">    <span class="comment">//需要做的增强对象</span></span><br><span class="line">    <span class="keyword">private</span> DaoTransaction transaction;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StudentProxy</span><span class="params">(StudentImpl studentImpl, DaoTransaction transaction)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.studentImpl = studentImpl;</span><br><span class="line">        <span class="built_in">this</span>.transaction = transaction;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        transaction.before();</span><br><span class="line">        studentImpl.save();</span><br><span class="line">        transaction.after();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">query</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> studentImpl.query(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202302051653607.png" alt="image-20230205165312671"></p><h5 id="1-2静态代理存在的问题"><a href="#1-2静态代理存在的问题" class="headerlink" title="1.2静态代理存在的问题"></a>1.2静态代理存在的问题</h5><ul><li>不利于代码的拓展，抽象类需要实现接口中的方法</li><li>代理对象需要创建很多</li></ul><hr><h4 id="2-动态代理"><a href="#2-动态代理" class="headerlink" title="2.动态代理"></a>2.动态代理</h4><font color="orange">在不改变原有功能代码的前提下，能够动态的实现方法的增强</font><h5 id="2-1-JDK动态代理"><a href="#2-1-JDK动态代理" class="headerlink" title="2.1 JDK动态代理"></a>2.1 JDK动态代理</h5><p>接口、实现类、增强类同上</p><p><strong>TransactionHandler</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransactionHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DaoTransaction daoTransaction;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object  object;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TransactionHandler</span><span class="params">(DaoTransaction daoTransaction, Object object)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.daoTransaction = daoTransaction;</span><br><span class="line">        <span class="built_in">this</span>.object = object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        Object ret;</span><br><span class="line">        <span class="comment">//判断当前方法是否需要开启事务</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;save&quot;</span>.equals(method.getName()))&#123;</span><br><span class="line">            daoTransaction.before();</span><br><span class="line">            ret=method.invoke(object,args);</span><br><span class="line">            daoTransaction.after();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            ret=method.invoke(object,args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>MainTest</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testJDKProxy</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//增强类</span></span><br><span class="line">    <span class="type">DaoTransaction</span> <span class="variable">transaction</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DaoTransaction</span>();</span><br><span class="line">    <span class="comment">//目标类</span></span><br><span class="line">    <span class="type">IStudentService</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StudentImpl</span>();</span><br><span class="line">    <span class="comment">//方法处理拦截器</span></span><br><span class="line">    <span class="type">TransactionHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransactionHandler</span>(transaction,service);</span><br><span class="line">    <span class="comment">//获取代理实例对象</span></span><br><span class="line">    <span class="type">IStudentService</span> <span class="variable">o</span> <span class="operator">=</span> (IStudentService)Proxy.newProxyInstance(StudentImpl.class.getClassLoader(),</span><br><span class="line">            StudentImpl.class.getInterfaces(),</span><br><span class="line">            handler);</span><br><span class="line">    o.save();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202302051716500.png" alt="image-20230205171655424"></p><p><strong>原理分析</strong></p><p><strong>生成代理类字节码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">saveProxyClass</span><span class="params">(String path)</span>&#123;</span><br><span class="line">    <span class="type">byte</span>[] $proxies = ProxyGenerator.generateProxyClass(<span class="string">&quot;$Proxy&quot;</span>, StudentImpl.class.getInterfaces());</span><br><span class="line">    <span class="keyword">try</span>(<span class="type">FileOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(path + <span class="string">&quot;$Proxy.class&quot;</span>));) &#123;</span><br><span class="line">        outputStream.write($proxies);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">$Proxy</span> <span class="keyword">extends</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">IStudentService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m4;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m0;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $Proxy(InvocationHandler var1) <span class="keyword">throws</span>  &#123;</span><br><span class="line">        <span class="built_in">super</span>(var1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object var1)</span> <span class="keyword">throws</span>  &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Boolean)<span class="built_in">super</span>.h.invoke(<span class="built_in">this</span>, m1, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;var1&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var3;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(var4);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Student var1)</span> <span class="keyword">throws</span>  &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>.h.invoke(<span class="built_in">this</span>, m3, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;var1&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var3;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(var4);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">toString</span><span class="params">()</span> <span class="keyword">throws</span>  &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (String)<span class="built_in">super</span>.h.invoke(<span class="built_in">this</span>, m2, (Object[])<span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Student <span class="title function_">query</span><span class="params">(Integer var1)</span> <span class="keyword">throws</span>  &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Student)<span class="built_in">super</span>.h.invoke(<span class="built_in">this</span>, m4, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;var1&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var3;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(var4);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> <span class="keyword">throws</span>  &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Integer)<span class="built_in">super</span>.h.invoke(<span class="built_in">this</span>, m0, (Object[])<span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m1 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;equals&quot;</span>, Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>));</span><br><span class="line">            m3 = Class.forName(<span class="string">&quot;work.xiaoying.service.IStudentService&quot;</span>).getMethod(<span class="string">&quot;save&quot;</span>, Class.forName(<span class="string">&quot;work.xiaoying.entity.Student&quot;</span>));</span><br><span class="line">            m2 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;toString&quot;</span>);</span><br><span class="line">            m4 = Class.forName(<span class="string">&quot;work.xiaoying.service.IStudentService&quot;</span>).getMethod(<span class="string">&quot;query&quot;</span>, Class.forName(<span class="string">&quot;java.lang.Integer&quot;</span>));</span><br><span class="line">            m0 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchMethodError</span>(var2.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoClassDefFoundError</span>(var3.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>通过实现接口，获取到接口里面的所有方法</p><p>通过Proxy创建代理类实例</p><p>通过反射机制，获取到一个个方法对象</p><p>调用InvocationHandler接口中的invoke方法，从而实现业务的增强</p></blockquote><h5 id="3-1-CGLIB动态代理"><a href="#3-1-CGLIB动态代理" class="headerlink" title="3.1 CGLIB动态代理"></a>3.1 CGLIB动态代理</h5><ul><li>JDK动态代理必须有一个前提，需要代理的类必须实现接口，如果没有实现接口，只能通过<code>CGLIB</code>来实现</li><li>注意：类和方法不能被<code>final</code>修饰</li></ul><h6 id="基础准备"><a href="#基础准备" class="headerlink" title="基础准备"></a><strong>基础准备</strong></h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;cglib&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;cglib&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.3</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>目标接口和实现类同上</strong></p><p><strong>实现方法拦截MethodInterceptor</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CglibInterceptor</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DaoTransaction transaction;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CglibInterceptor</span><span class="params">(DaoTransaction transaction)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.transaction = transaction;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        transaction.before();</span><br><span class="line">        Object ret=methodProxy.invokeSuper(o,objects);</span><br><span class="line">        transaction.after();</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>MainTest</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCglib</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCglib</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//生成目标代理类</span></span><br><span class="line">        System.setProperty(DebuggingClassWriter.DEBUG_LOCATION_PROPERTY,<span class="string">&quot;E:\\Desktop\\blog\\ws-blog\\src\\&quot;</span>);</span><br><span class="line">        <span class="comment">//创建方法拦截器</span></span><br><span class="line">        <span class="type">CglibInterceptor</span> <span class="variable">cglibInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CglibInterceptor</span>(<span class="keyword">new</span> <span class="title class_">DaoTransaction</span>());</span><br><span class="line">        <span class="comment">//使用CGLIB框架生成目标类的子类（代理类）实现增强</span></span><br><span class="line">        <span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line">        <span class="comment">//设置父类字节码</span></span><br><span class="line">        enhancer.setSuperclass(StudentImpl.class);</span><br><span class="line">        <span class="comment">//设置拦截处理</span></span><br><span class="line">        enhancer.setCallback(cglibInterceptor);</span><br><span class="line">        IStudentService service=(IStudentService) enhancer.create();</span><br><span class="line">        service.save(<span class="keyword">new</span> <span class="title class_">Student</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202303122047384.png" alt="image-20230312204739308"></p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202303122046366.png" alt="image-20230312204553555"></p><blockquote><p>通过继承的方式获取目标对象的方法</p><p>通过传递方法拦截器实现方法拦截</p><p>调用生成的代理类对象具体执行重写的save方法，直接调用方法拦截器中的intercept方法</p><p>前后加上增强操作，从而实现了不修改目标代码实现业务增强</p></blockquote><h3 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h3><div class="table-container"><table><thead><tr><th>代理类型</th><th>实现机制</th><th>回调方式</th><th>使用场景</th><th>效率</th></tr></thead><tbody><tr><td>JDK动态代理</td><td>通过实现接口，通过反射机制获取到接口中的方法，并且自定义InvocationHandler接口，实现方法拦截</td><td>调用invoke方法实现增强</td><td>目标类有接口实现</td><td>1.8高于CGLIB</td></tr><tr><td>CGLIB动态代理</td><td>继承机制，通过继承重写目标方法，使用MethodInterceptor调用父类的目标方法从而实现代理</td><td>调用interceptor方法</td><td>不能使用final修饰的方法和类</td><td>第一次调用生成字节码比较耗时，多次调用性能还行</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Files类的walkFileTree方法</title>
      <link href="/post/796d8776.html"/>
      <url>/post/796d8776.html</url>
      
        <content type="html"><![CDATA[<blockquote><p><code>walkFileTree()</code>方法包含用于递归遍历目录树的方法，方法参数接收一个Path对象和一个FileVisitor对象，Path对象指向需要遍历的目录，FileVisitor在便利的时候调用。FileVistor接口定义如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">FileVisitor</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Invoked for a directory before entries in the directory are visited.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt; If this method returns &#123;<span class="doctag">@link</span> FileVisitResult#CONTINUE CONTINUE&#125;,</span></span><br><span class="line"><span class="comment">     * then entries in the directory are visited. If this method returns &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment">     * FileVisitResult#SKIP_SUBTREE SKIP_SUBTREE&#125; or &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment">     * FileVisitResult#SKIP_SIBLINGS SKIP_SIBLINGS&#125; then entries in the</span></span><br><span class="line"><span class="comment">     * directory (and any descendants) will not be visited.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>   dir</span></span><br><span class="line"><span class="comment">     *          a reference to the directory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>   attrs</span></span><br><span class="line"><span class="comment">     *          the directory&#x27;s basic attributes</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  the visit result</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span>  IOException</span></span><br><span class="line"><span class="comment">     *          if an I/O error occurs</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    FileVisitResult <span class="title function_">preVisitDirectory</span><span class="params">(T dir, BasicFileAttributes attrs)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Invoked for a file in a directory.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>   file</span></span><br><span class="line"><span class="comment">     *          a reference to the file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>   attrs</span></span><br><span class="line"><span class="comment">     *          the file&#x27;s basic attributes</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  the visit result</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span>  IOException</span></span><br><span class="line"><span class="comment">     *          if an I/O error occurs</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    FileVisitResult <span class="title function_">visitFile</span><span class="params">(T file, BasicFileAttributes attrs)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Invoked for a file that could not be visited. This method is invoked</span></span><br><span class="line"><span class="comment">     * if the file&#x27;s attributes could not be read, the file is a directory</span></span><br><span class="line"><span class="comment">     * that could not be opened, and other reasons.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>   file</span></span><br><span class="line"><span class="comment">     *          a reference to the file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>   exc</span></span><br><span class="line"><span class="comment">     *          the I/O exception that prevented the file from being visited</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  the visit result</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span>  IOException</span></span><br><span class="line"><span class="comment">     *          if an I/O error occurs</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    FileVisitResult <span class="title function_">visitFileFailed</span><span class="params">(T file, IOException exc)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Invoked for a directory after entries in the directory, and all of their</span></span><br><span class="line"><span class="comment">     * descendants, have been visited. This method is also invoked when iteration</span></span><br><span class="line"><span class="comment">     * of the directory completes prematurely (by a &#123;<span class="doctag">@link</span> #visitFile visitFile&#125;</span></span><br><span class="line"><span class="comment">     * method returning &#123;<span class="doctag">@link</span> FileVisitResult#SKIP_SIBLINGS SKIP_SIBLINGS&#125;,</span></span><br><span class="line"><span class="comment">     * or an I/O error when iterating over the directory).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>   dir</span></span><br><span class="line"><span class="comment">     *          a reference to the directory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>   exc</span></span><br><span class="line"><span class="comment">     *          &#123;<span class="doctag">@code</span> null&#125; if the iteration of the directory completes without</span></span><br><span class="line"><span class="comment">     *          an error; otherwise the I/O exception that caused the iteration</span></span><br><span class="line"><span class="comment">     *          of the directory to complete prematurely</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  the visit result</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span>  IOException</span></span><br><span class="line"><span class="comment">     *          if an I/O error occurs</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    FileVisitResult <span class="title function_">postVisitDirectory</span><span class="params">(T dir, IOException exc)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在使用时需要根据情况实现其中的方法</p><p>方法调用时机:</p><ol><li>preVisitDirectory()：在访问任意目录前调用；</li><li>postVisitDirectory()：在访问任意目录完成后调用；</li><li>visitFile()：在访问到每个文件时调用；</li><li>visitFileFaild()：在访问文件失败是时调用</li></ol><p>这四个方法都会返回一个FileVistResult枚举类型的实例，FileVisitResult枚举包含四个选项：</p><ol><li>CONTINUE：继续遍历；</li><li>TERMINATE：立即终止遍历；</li><li>SKIP_SIBLINGS：跳过当前目录下的兄弟文件继续遍历；</li><li>SKIP_SUBTREE：跳过当前目录继续遍历，这个只能在preVisitDirectory()方法中返回，在其他方法中返回和CONTINUE效果一样。</li></ol><p>实战：递归删除目录</p><p>walkFileTree方法可以用来<font color="orange">递归删除</font>目录及其目录中所有文件，Files.delete()只能删除空目录或者文件，当目中包含文件的时候无法直接删除，只能删除目录下所有文件后才能删除目录，walkFileTreee可以在visitFile()方法中删除文件，然后在postVisitDirectory()删除目录实现递归删除目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteDirectory</span><span class="params">(String path)</span>&#123;</span><br><span class="line">    <span class="type">Path</span> <span class="variable">start</span> <span class="operator">=</span> Paths.get(path);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Files.walkFileTree(start, <span class="keyword">new</span> <span class="title class_">SimpleFileVisitor</span>&lt;Path&gt;()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> FileVisitResult <span class="title function_">visitFile</span><span class="params">(Path file, BasicFileAttributes attrs)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                log.info(<span class="string">&quot;delete file : &#123;&#125;&quot;</span> , file);</span><br><span class="line">                Files.delete(file);</span><br><span class="line">                <span class="keyword">return</span> FileVisitResult.CONTINUE;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> FileVisitResult <span class="title function_">postVisitDirectory</span><span class="params">(Path dir, IOException exc)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                log.info(<span class="string">&quot;delete dir : &#123;&#125;&quot;</span> , dir);</span><br><span class="line">                Files.delete(dir);</span><br><span class="line">                <span class="keyword">return</span> FileVisitResult.CONTINUE;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 拓展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拓展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin入门</title>
      <link href="/post/add4ecd9.html"/>
      <url>/post/add4ecd9.html</url>
      
        <content type="html"><![CDATA[<p>关于<code>Kotlin</code>，其实很早就有学习的安排了，不过最近时间稍微紧一些，所以就鸽掉了，今天在群里看到了一个朋友写的<code>Kotlin</code>感觉语法糖确实很不错，所以近期应该会学习一下</p><hr><p>学习一门语言，最好的老师莫过于官方文档了：<a href="https://www.kotlincn.net/docs/tutorials/jvm-get-started.html">https://www.kotlincn.net/docs/tutorials/jvm-get-started.html</a></p><p>我们来跟着官方文档入个门，写出我们的<font color="orange">最重要</font>的代码—<code>HelloWorld!</code></p><h3 id="1-创建Kotlin工程"><a href="#1-创建Kotlin工程" class="headerlink" title="1.创建Kotlin工程"></a>1.创建Kotlin工程</h3><p>我这里采用的开发工具是<code>IDEA</code>，所以我们需要选择 <code>File|New|Project</code></p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202301120122542.png" alt="image-20230112012230983"></p><p>我们选择好后直接点击<code>Next</code>即可</p><p>创建好工程后，大致的目录是这样的</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202301120124104.png" alt="image-20230112012434036"></p><p>接下来就是重头戏！！！</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202301120126563.png" alt="image-20230112012609444"></p><blockquote><p>第一次运行可能会花费一点时间（也许是我电脑的原因)</p></blockquote><p>到此为止，恭喜你，你现在运行了第一个<code>Kotlin</code>应用程序</p>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netty学习</title>
      <link href="/post/cfd68dd0.html"/>
      <url>/post/cfd68dd0.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-NIO基础"><a href="#1-NIO基础" class="headerlink" title="1.NIO基础"></a>1.NIO基础</h2><h3 id="1-三大组件"><a href="#1-三大组件" class="headerlink" title="1.三大组件"></a>1.三大组件</h3><ol><li><p>channel和Buffer</p><p><code>channel</code>是读写数据的<font color="orange">双向通道</font>,可以从channel将数据读入<code>buffer</code>,也可以将buffer中的数据写入到channel中</p><p>常见的Channel有：</p><ul><li>FileChannel</li><li>DatagramChannel</li><li>SocketChannel</li><li>ServerSocketChannel</li></ul><p><code>Buffer</code>则用来缓冲读写数据，常见的Buffer有：</p><ul><li>ByteBuffer<ul><li>MappedByteBuffer</li><li>DirectByteBuffer</li><li>HeapByteBuffer</li></ul></li><li>shortBuffer</li><li>IntBuffer</li><li>LongBuffer</li><li>FloatBuffer</li><li>DoubleBuffer</li><li>CharBuffer</li></ul></li><li><p>Selector</p><p><strong>多线程设计版</strong>：</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202301082322895.png" alt="image-20230108232254861"></p><p>缺点：</p><ul><li>内存占用高</li><li>线程上线文切换成本高</li><li>只适合连接数较少的场景</li></ul><p><strong>线程池设计版</strong>：</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202301082326598.png" alt="image-20230108232632548"></p><p>缺点：</p><ul><li>阻塞模式下，线程池仅能处理一个socket连接</li><li>仅适合短连接场景</li></ul><p><strong>Selector版设计：</strong></p><p><code>selector</code>的作用是配合一个线程来<font color="orange">管理多个channel</font>，获取这些channel上发生的事件，这些channel工作在<code>非阻塞模式</code>下，不会让线程阻塞在一个channel上。适合连接数特别多，但流量低的场景</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202301082333289.png" alt="image-20230108233345217"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git小技巧</title>
      <link href="/post/b120bc47.html"/>
      <url>/post/b120bc47.html</url>
      
        <content type="html"><![CDATA[<p>记录一下<code>IDEA</code>里使用<code>Git</code>的一些小技巧</p><p>我们在提交本地代码时，经常会遇到这样的情况</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202212262240903.png" alt="image-20221226224039229"></p><p>由于不同的格式化方式导致出现了一些空格或者空行的提示，这个其实挺影响我们查看代码变动的，我们就可以选择这个选项忽略到空格和空行</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202212262242165.png" alt="image-20221226224242987"></p><p>当然，借助旁边的选项，我们可以快速的定位到代码的改动而不是查看某一行发生的变动</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202212262245835.png" alt="image-20221226224509619"></p><p>最后一个小技巧，快速定位到需要编辑的地方，而不需要傻傻的去自己找</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202212262246157.png" alt="image-20221226224618857"></p>]]></content>
      
      
      <categories>
          
          <category> 拓展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拓展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL时间差函数</title>
      <link href="/post/6069b9cf.html"/>
      <url>/post/6069b9cf.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-timestampdiff"><a href="#1-timestampdiff" class="headerlink" title="1.timestampdiff"></a>1.timestampdiff</h2><p>格式：<font color="orange">timestampdiff(interval,dattime1,datetime2)</font></p><p>返回结果：时间2-时间1的差值，单位由<code>interval</code>指定</p><p>interval支持的值：</p><ul><li>frac_second 毫秒</li><li>second 秒</li><li>minute 分钟</li><li>hour 小时</li><li>day 天</li><li>week 周</li><li>month 月</li><li>quarter 季度</li><li>year 年</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> timestampdiff(<span class="keyword">second</span>,<span class="string">&#x27;2022-12-22 22:15:41&#x27;</span>,<span class="string">&#x27;2022-12-22 22:15:59&#x27;</span>)</span><br><span class="line">#<span class="number">18</span></span><br></pre></td></tr></table></figure><h2 id="2-datediff"><a href="#2-datediff" class="headerlink" title="2.datediff"></a>2.datediff</h2><p>格式：<font color="orange">datediff(datetime1,datetime2)</font></p><p>返回结果：两个日期相差天数(datetime1-datetime2)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> datediff(<span class="string">&#x27;2022-12-12 22:15:41&#x27;</span>,<span class="string">&#x27;2022-12-22 22:15:59&#x27;</span>)</span><br><span class="line">#<span class="number">-10</span></span><br></pre></td></tr></table></figure><h2 id="3-timediff"><a href="#3-timediff" class="headerlink" title="3.timediff"></a>3.timediff</h2><p>格式：<font color="orange">timediff(datetime1,datetime2)</font></p><p>返回结果：时间差值(time1-time2)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> timediff(<span class="string">&#x27;2022-12-22 22:16:41&#x27;</span>,<span class="string">&#x27;2022-12-22 22:15:59&#x27;</span>)</span><br><span class="line">#<span class="number">00</span>:<span class="number">00</span>:<span class="number">42</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java序列化</title>
      <link href="/post/9cd1a944.html"/>
      <url>/post/9cd1a944.html</url>
      
        <content type="html"><![CDATA[<p>我们经常在代码里看到一个类实现了序列化，并指定了一个序列化的id，那，这到底有什么作用呢？</p><hr><p>首先我们要明确几个概念：</p><ol><li>序列化：把对象转为字节序列的过程成为对象的序列化</li><li>反序列化：把字节序列恢复为对象的过程成为对象的反序列化</li></ol><p>那我们在什么时候会用到对象的序列化与反序列化呢?</p><p>当我们只在本地<code>JVM</code>下运行java程序时，我们是不需要进行序列化和反序列化的，但是当我们需要将内存中的对象持久化到磁盘，数据库中，当我们需要和浏览器进行交互，当我们要实现<code>RPC</code>时，就需要进行对象的序列化和反序列化了</p><p>那到了这里，我相信你已经开始产生了一些疑问，在和浏览器进行交互或是保存到数据库中时，我们好像有时候并没有进行序列化和反序列化，并没有实现<code>Serializable</code>接口，但，不也还是成功了吗？</p><p>这里先给出结论：<font color="orange">只要我们将内存中的对象进行持久化或是网络传输时，都需要进行序列化和反序列化</font></p><p>我们仔细想一下，服务端和浏览器进行交互时，是以<code>JSON</code>字符串进行交互的，那既然是字符串，我们不妨来看一下<code>String</code>类的源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable, Comparable&lt;String&gt;, CharSequence &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">6849794470754667710L</span>;</span><br></pre></td></tr></table></figure><p>我们可以看到其实<code>String</code>类是实现了<code>Serializable</code>接口的，同时也指定了<code>serialVersionUID</code></p><p>那我们再来回顾一下我们写的sql语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span><span class="keyword">insert</span> id<span class="operator">=</span>&quot;saveUser&quot; <span class="keyword">parameter</span><span class="operator">=</span>&quot;xxxx&quot;<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_user(id,`name`) <span class="keyword">values</span>(#&#123;id&#125;,#&#123;name&#125;)</span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">insert</span><span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>实际上，我们并不是将整个对象持久化到数据库中，而是将对象中的属性持久化到数据库中，而这些属性都是实现了<code>Serializable</code>接口的</p><p>那，为什么实现了<code>Serializable</code>接口还要显示的指定 <code>serialVersionUID</code>呢？</p><p>如果我们不显示的指定<code>serialVersionUID</code>，JVM在序列化时会根据属性自动生成一个<code>serialVersionUID</code>,然后和属性一起进行序列化，然后进行持久化或者网络传输。在反序列化时，JVM会再根据属性自动生成一个新的<code>serialVersionUID</code>,然后将这个新版的serialVersionUID与序列化时生成的旧版serialVersionUID进行比较，如果相同则反序列化成功，否则会报错。</p><p>如果显示的指定了<code>serialVersionUID</code>,则JVM在序列化和反序列化时仍会生成一个serialVersionUID，但值为我们显示指定的值，这样就保证了序列化和反序列化时的serialVersionUID是一致的</p><p>在实际开发中，不显示的指定serialVersionUID会出现问题吗？其实如果我们不进行修改的话，反序列化的时候还是可以成功的，但是我们并不能保证我们的类在更迭中不会被修改，所以建议还是显示的指定一个<code>serialVersionUID</code>,值是多少都无所谓，只要保证值不变即可。</p><blockquote><p>拓展：被<code>transient</code>和<code>static</code>关键字修饰的属性不会被序列化</p></blockquote><p>基于上述的static修饰的属性不会被序列化再次答疑</p><p><code>serialVersionUID</code>也是被static修饰的，为什么会被序列化？其实<code>serialVersionUID</code>并没有进行序列化，只是JVM在序列化对象时自动生成一个<code>serialVersionUID</code>,然后将我们显示指定的值赋值给这个自动生成的<code>serialVersionUID</code></p>]]></content>
      
      
      <categories>
          
          <category> 拓展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拓展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取图片的参数信息</title>
      <link href="/post/c88c663d.html"/>
      <url>/post/c88c663d.html</url>
      
        <content type="html"><![CDATA[<p>今天主要分享一个开发工具，快速的帮助我们获取照片中的各种参数信息</p><p>官网：<a href="https://github.com/drewnoakes/metadata-extractor">https://github.com/drewnoakes/metadata-extractor</a></p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202212201907029.png" alt="image-20221220190742662"></p>]]></content>
      
      
      <categories>
          
          <category> 拓展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拓展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库行列互换查询</title>
      <link href="/post/b2563e57.html"/>
      <url>/post/b2563e57.html</url>
      
        <content type="html"><![CDATA[<p>今天来学习一下数据库中比较常见的<font color="orange">行列互换查询</font>，也是弥补了之前学习的空缺</p><p>首先先来创建库表结构并插入一些数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> store(</span><br><span class="line">`name` <span class="type">varchar</span>(<span class="number">10</span>),</span><br><span class="line">  `number` <span class="type">int</span>,</span><br><span class="line">  `<span class="keyword">month</span>` <span class="type">varchar</span>(<span class="number">10</span>)</span><br><span class="line">)<span class="type">character</span> <span class="keyword">set</span> UTF8</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> store <span class="keyword">values</span></span><br><span class="line">(<span class="string">&#x27;A&#x27;</span>,<span class="number">10</span>,<span class="string">&#x27;1月&#x27;</span>),(<span class="string">&#x27;B&#x27;</span>,<span class="number">1000</span>,<span class="string">&#x27;1月&#x27;</span>),(<span class="string">&#x27;C&#x27;</span>,<span class="number">200</span>,<span class="string">&#x27;1月&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;A&#x27;</span>,<span class="number">30</span>,<span class="string">&#x27;2月&#x27;</span>),(<span class="string">&#x27;B&#x27;</span>,<span class="number">2000</span>,<span class="string">&#x27;2月&#x27;</span>),(<span class="string">&#x27;C&#x27;</span>,<span class="number">400</span>,<span class="string">&#x27;2月&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;A&#x27;</span>,<span class="number">40</span>,<span class="string">&#x27;3月&#x27;</span>),(<span class="string">&#x27;B&#x27;</span>,<span class="number">3000</span>,<span class="string">&#x27;3月&#x27;</span>),(<span class="string">&#x27;C&#x27;</span>,<span class="number">100</span>,<span class="string">&#x27;3月&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202212202142112.png" alt="image-20221220214238055"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">`name` <span class="keyword">AS</span> 名称,</span><br><span class="line"><span class="built_in">max</span>(</span><br><span class="line">IF</span><br><span class="line">( `<span class="keyword">month</span>` <span class="operator">=</span> <span class="string">&#x27;1月&#x27;</span>, `number`, <span class="number">0</span> )) <span class="keyword">AS</span> 一月,</span><br><span class="line"><span class="built_in">max</span>(</span><br><span class="line">IF</span><br><span class="line">( `<span class="keyword">month</span>` <span class="operator">=</span> <span class="string">&#x27;2月&#x27;</span>, `number`, <span class="number">0</span> )) <span class="keyword">AS</span> 二月,</span><br><span class="line"><span class="built_in">max</span>(</span><br><span class="line">IF</span><br><span class="line">( `<span class="keyword">month</span>` <span class="operator">=</span> <span class="string">&#x27;3月&#x27;</span>, `number`, <span class="number">0</span> )) <span class="keyword">AS</span> 三月 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">`store` </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">`name`</span><br></pre></td></tr></table></figure><blockquote><p>这里的<code>max</code>函数没有什么特别的意识，写max完全是因为group函数的限制，因为查询的列不能出现其他的非分组的列，所以就用聚合函数嵌套了一下</p></blockquote><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202212202150386.png" alt="image-20221220215017338"></p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot项目超大文件上传</title>
      <link href="/post/b582eef7.html"/>
      <url>/post/b582eef7.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1.引言"></a>1.引言</h2><p>文件上传功能可以算的上是老生常谈了，在开发过程中，经常会有文件上传下载的接口，用户在页面上选择相应的文件即可上传，如果文件比较小的话，倒还好，但是一旦文件特别大的话，再采用普通的文件上传方式，这可不是一个明智的选择，举例来说，一个超大的文件在上传一半的时候突然由于网络问题卡住了，那如果还是和普通上传一样，再次上传这个文件的时候从头上传，那，我已经开始恼火了。</p><h2 id="2-概念"><a href="#2-概念" class="headerlink" title="2.概念"></a>2.概念</h2><p>关于大文件上传，我们首先要了解以下几个概念</p><h3 id="2-1-秒传"><a href="#2-1-秒传" class="headerlink" title="2.1.秒传"></a>2.1.秒传</h3><p>简单来说，在上传文件的时候，服务端会先进行文件的MD5校验，如果发现服务端有完全一样的文件，就会直接返回给前端一个地址而没有必要再次上传这个文件</p><h3 id="2-2-分片上传"><a href="#2-2-分片上传" class="headerlink" title="2.2.分片上传"></a>2.2.分片上传</h3><p>分片上传就是将我们要上传的超大文件按照一定的大小进行拆分，将一个大的文件拆分成多个小的文件，上传文件时需要将这些分片进行上传，上传完之后再由服务端对所有上传过的文件切片进行合并，合并成原始的文件</p><h3 id="2-3-断点续传"><a href="#2-3-断点续传" class="headerlink" title="2.3.断点续传"></a>2.3.断点续传</h3><p>断点续传是指在上传或者下载时，将下载任务或上传任务划分为几个部分，每个部分单独执行，如果遇到网络故障，就可以从已经上传或下载的部分开始进行上传或下载未完成的部分，而不需要重新开始进行文件上传或下载。</p><blockquote><p>断点续传可以看成是分片上传的一个衍生，因此可以使用分片上传的场景，都可以使用断点续传</p></blockquote><h2 id="3-方案"><a href="#3-方案" class="headerlink" title="3.方案"></a>3.方案</h2><ol><li>前端需要根据固定大小对文件进行分片，请求后端接口地址是需要携带分片号和分片大小</li><li>服务端创建<code>conf</code>文件用来记录分块的位置，conf文件的总长度为文件总分片数，每上传一个分片即向conf文件中写入一个<code>127</code>,那么没上传的位置默认就是0，已上传的就是<code>127</code></li><li>服务端按照请求数据中的分片号和分片大小算出此次分片要写入的位置，写入文件</li></ol><h2 id="4-代码实现"><a href="#4-代码实现" class="headerlink" title="4.代码实现"></a>4.代码实现</h2><p>本案例采用的是<code>SpringBoot</code>项目，涉及到了<code>策略模式</code>和<code>模板模式</code>，读者自行食用</p><h3 id="4-1-一些常量"><a href="#4-1-一些常量" class="headerlink" title="4.1.一些常量"></a>4.1.一些常量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileConstant</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FILE_UPLOAD_STATUS</span> <span class="operator">=</span> <span class="string">&quot;status&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FILE_MD5_KEY</span> <span class="operator">=</span> <span class="string">&quot;md5&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FILE_SEPARATORCHAR</span> <span class="operator">=</span> <span class="string">&quot;/&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-FileUploadDTO传输对象"><a href="#4-2-FileUploadDTO传输对象" class="headerlink" title="4.2.FileUploadDTO传输对象"></a>4.2.FileUploadDTO传输对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileUploadDTO</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer,String&gt; chunkMd5Info;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> uploadComplete;</span><br><span class="line">    <span class="keyword">private</span>  <span class="type">long</span> mtime;</span><br><span class="line">    <span class="keyword">private</span> String path;</span><br><span class="line">    <span class="keyword">private</span> Long size;</span><br><span class="line">    <span class="keyword">private</span> String  fileExt;</span><br><span class="line">    <span class="keyword">private</span> String fileId;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isUploadComplete</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-FileUploadRequestDTO传输对象"><a href="#4-3-FileUploadRequestDTO传输对象" class="headerlink" title="4.3.FileUploadRequestDTO传输对象"></a>4.3.FileUploadRequestDTO传输对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileUploadRequestDTO</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String path;</span><br><span class="line">    <span class="keyword">private</span> MultipartFile file;</span><br><span class="line">    <span class="keyword">private</span> Integer chunk;</span><br><span class="line">    <span class="keyword">private</span> Integer chunks;</span><br><span class="line">    <span class="keyword">private</span> String md5;</span><br><span class="line">    <span class="keyword">private</span> Integer chunkSize;</span><br><span class="line">    <span class="keyword">private</span> UploadModeEnum modeEnum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-文件上传工具类"><a href="#4-4-文件上传工具类" class="headerlink" title="4.4.文件上传工具类"></a>4.4.文件上传工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileUtils</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] readFileToByteArray(File file) &#123;</span><br><span class="line">        <span class="keyword">if</span> (file == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileInputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">            byteArrayOutputStream = <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> n;</span><br><span class="line">            <span class="keyword">while</span> ((n = fileInputStream.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                byteArrayOutputStream.write(b, <span class="number">0</span> , n);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> byteArrayOutputStream.toByteArray();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (byteArrayOutputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    byteArrayOutputStream.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (fileInputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fileInputStream.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">withoutHeadAndTailDiagonal</span><span class="params">(String path)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> path;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getExtension</span><span class="params">(String toFileNewName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> toFileNewName.substring(toFileNewName.lastIndexOf(<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">freedMappedByteBuffer</span><span class="params">(MappedByteBuffer mappedByteBuffer)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(FileChannel fileChannel)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileChannel.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPath</span><span class="params">(FileUploadRequestDTO param)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> param.getPath();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getFileMD5</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> DigestUtils.md5Hex(file.getBytes());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.info(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-5-定义上传文件策略"><a href="#4-5-定义上传文件策略" class="headerlink" title="4.5.定义上传文件策略"></a>4.5.定义上传文件策略</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SliceUploadStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件切片上传</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param 参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> FileUploadDTO&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> FileUploadDTO <span class="title function_">sliceUpload</span><span class="params">(FileUploadRequestDTO param)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-6-切片上传模板"><a href="#4-6-切片上传模板" class="headerlink" title="4.6.切片上传模板"></a>4.6.切片上传模板</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">SliceUploadTemplate</span> <span class="keyword">implements</span> <span class="title class_">SliceUploadStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">boolean</span> <span class="title function_">upload</span><span class="params">(FileUploadRequestDTO param)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> File <span class="title function_">createTmpFile</span><span class="params">(FileUploadRequestDTO param)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">FileUtils</span> <span class="variable">fileUtils</span> <span class="operator">=</span> SpringContextHolder.getBean(FileUtils.class);</span><br><span class="line">        param.setPath(FileUtils.withoutHeadAndTailDiagonal(param.getPath()));</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> param.getFile().getOriginalFilename();</span><br><span class="line">        <span class="type">String</span> <span class="variable">uploadDirPath</span> <span class="operator">=</span> fileUtils.getPath(param);</span><br><span class="line">        <span class="type">String</span> <span class="variable">tempFileName</span> <span class="operator">=</span> fileName + <span class="string">&quot;_tmp&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">tmpDir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(uploadDirPath);</span><br><span class="line">        <span class="type">File</span> <span class="variable">tmpFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(uploadDirPath, tempFileName);</span><br><span class="line">        <span class="keyword">if</span> (!tmpDir.exists()) &#123;</span><br><span class="line">            tmpDir.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tmpFile;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> FileUploadDTO <span class="title function_">sliceUpload</span><span class="params">(FileUploadRequestDTO param)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isOk</span> <span class="operator">=</span> <span class="built_in">this</span>.upload(param);</span><br><span class="line">        <span class="keyword">if</span> (isOk) &#123;</span><br><span class="line">            <span class="type">File</span> <span class="variable">tmpFile</span> <span class="operator">=</span> <span class="built_in">this</span>.createTmpFile(param);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.saveAndFileUploadDTO(param.getFile().getOriginalFilename(), tmpFile);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">md5</span> <span class="operator">=</span> FileUtils.getFileMD5(param.getFile());</span><br><span class="line"></span><br><span class="line">        Map&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(param.getChunk(), md5);</span><br><span class="line">        <span class="keyword">return</span> FileUploadDTO.builder().chunkMd5Info(map).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查并修改文件上传进度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkAndSetUploadProgress</span><span class="params">(FileUploadRequestDTO param, String uploadDirPath)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> param.getFile().getOriginalFilename();</span><br><span class="line">        <span class="type">File</span> <span class="variable">confFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(uploadDirPath, fileName + <span class="string">&quot;.conf&quot;</span>);</span><br><span class="line">        <span class="type">byte</span> <span class="variable">isComplete</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">RandomAccessFile</span> <span class="variable">accessConfFile</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            accessConfFile = <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(confFile, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">            <span class="comment">//把该分段标记为 true 表示完成</span></span><br><span class="line">            System.out.println(<span class="string">&quot;set part &quot;</span> + param.getChunk() + <span class="string">&quot; complete&quot;</span>);</span><br><span class="line">            <span class="comment">//创建conf文件文件长度为总分片数，每上传一个分块即向conf文件中写入一个127，那么没上传的位置就是默认0,已上传的就是Byte.MAX_VALUE 127</span></span><br><span class="line">            accessConfFile.setLength(param.getChunks());</span><br><span class="line">            accessConfFile.seek(param.getChunk() - <span class="number">1</span>);</span><br><span class="line">            accessConfFile.write(Byte.MAX_VALUE);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//completeList 检查是否全部完成,如果数组里是否全部都是127(全部分片都成功上传)</span></span><br><span class="line">            <span class="type">byte</span>[] completeList = FileUtils.readFileToByteArray(confFile);</span><br><span class="line">            isComplete = Byte.MAX_VALUE;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; completeList.length &amp;&amp; isComplete == Byte.MAX_VALUE; i++) &#123;</span><br><span class="line">                <span class="comment">//与运算, 如果有部分没有完成则 isComplete 不是 Byte.MAX_VALUE</span></span><br><span class="line">                isComplete = (<span class="type">byte</span>) (isComplete &amp; completeList[i]);</span><br><span class="line">                System.out.println(<span class="string">&quot;check part &quot;</span> + i + <span class="string">&quot; complete?:&quot;</span> + completeList[i]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(e.getMessage(), e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            FileUtils.close(accessConfFile.getChannel());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> setUploadProgress2Redis(param, uploadDirPath, fileName, confFile, isComplete);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把上传进度信息存进redis</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">setUploadProgress2Redis</span><span class="params">(FileUploadRequestDTO param, String uploadDirPath,</span></span><br><span class="line"><span class="params">                                            String fileName, File confFile, <span class="type">byte</span> isComplete)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">RedisUtils</span> <span class="variable">redisUtil</span> <span class="operator">=</span> SpringContextHolder.getBean(RedisUtils.class);</span><br><span class="line">        <span class="keyword">if</span> (isComplete == Byte.MAX_VALUE) &#123;</span><br><span class="line">            redisUtil.hSet(FileConstant.FILE_UPLOAD_STATUS, param.getMd5(), <span class="string">&quot;true&quot;</span>);</span><br><span class="line">            redisUtil.del(FileConstant.FILE_MD5_KEY + param.getMd5());</span><br><span class="line">            confFile.delete();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!redisUtil.hHasKey(FileConstant.FILE_UPLOAD_STATUS, param.getMd5())) &#123;</span><br><span class="line">                redisUtil.hSet(FileConstant.FILE_UPLOAD_STATUS, param.getMd5(), <span class="string">&quot;false&quot;</span>);</span><br><span class="line">                redisUtil.set(FileConstant.FILE_MD5_KEY + param.getMd5(),</span><br><span class="line">                        uploadDirPath + FileConstant.FILE_SEPARATORCHAR + fileName + <span class="string">&quot;.conf&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存文件操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> FileUploadDTO <span class="title function_">saveAndFileUploadDTO</span><span class="params">(String fileName, File tmpFile)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">FileUploadDTO</span> <span class="variable">fileUploadDTO</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            fileUploadDTO = renameFile(tmpFile, fileName);</span><br><span class="line">            <span class="keyword">if</span> (fileUploadDTO.isUploadComplete()) &#123;</span><br><span class="line">                System.out</span><br><span class="line">                        .println(<span class="string">&quot;upload complete !!&quot;</span> + fileUploadDTO.isUploadComplete() + <span class="string">&quot; name=&quot;</span> + fileName);</span><br><span class="line">                <span class="comment">//TODO 保存文件信息到数据库</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage(), e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fileUploadDTO;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件重命名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> toBeRenamed   将要修改名字的文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> toFileNewName 新的名字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> FileUploadDTO <span class="title function_">renameFile</span><span class="params">(File toBeRenamed, String toFileNewName)</span> &#123;</span><br><span class="line">        <span class="comment">//检查要重命名的文件是否存在，是否是文件</span></span><br><span class="line">        <span class="type">FileUploadDTO</span> <span class="variable">fileUploadDTO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileUploadDTO</span>();</span><br><span class="line">        <span class="keyword">if</span> (!toBeRenamed.exists() || toBeRenamed.isDirectory()) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;File does not exist: &#123;&#125;&quot;</span>, toBeRenamed.getName());</span><br><span class="line">            fileUploadDTO.setUploadComplete(<span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">return</span> fileUploadDTO;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">ext</span> <span class="operator">=</span> FileUtils.getExtension(toFileNewName);</span><br><span class="line">        <span class="type">String</span> <span class="variable">p</span> <span class="operator">=</span> toBeRenamed.getParent();</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;E:&quot;</span> + FileConstant.FILE_SEPARATORCHAR + toFileNewName;</span><br><span class="line">        <span class="type">File</span> <span class="variable">newFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line">        <span class="comment">//修改文件名</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">uploadFlag</span> <span class="operator">=</span> toBeRenamed.renameTo(newFile);</span><br><span class="line"></span><br><span class="line">        fileUploadDTO.setMtime(System.currentTimeMillis());</span><br><span class="line">        fileUploadDTO.setUploadComplete(uploadFlag);</span><br><span class="line">        fileUploadDTO.setPath(filePath);</span><br><span class="line">        fileUploadDTO.setSize(newFile.length());</span><br><span class="line">        fileUploadDTO.setFileExt(ext);</span><br><span class="line">        fileUploadDTO.setFileId(toFileNewName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> fileUploadDTO;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-7-两种不同的实现策略"><a href="#4-7-两种不同的实现策略" class="headerlink" title="4.7.两种不同的实现策略"></a>4.7.两种不同的实现策略</h3><h4 id="MappedByteBuffer"><a href="#MappedByteBuffer" class="headerlink" title="MappedByteBuffer"></a>MappedByteBuffer</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@UploadMode(mode = UploadModeEnum.MAPPED_BYTEBUFFER)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MappedByteBufferUploadStrategy</span> <span class="keyword">extends</span> <span class="title class_">SliceUploadTemplate</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FileUtils filePathUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;upload.chunkSize&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> defaultChunkSize;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">upload</span><span class="params">(FileUploadRequestDTO param)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">RandomAccessFile</span> <span class="variable">tempRaf</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">FileChannel</span> <span class="variable">fileChannel</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">MappedByteBuffer</span> <span class="variable">mappedByteBuffer</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">uploadDirPath</span> <span class="operator">=</span> filePathUtil.getPath(param);</span><br><span class="line">            <span class="type">File</span> <span class="variable">tmpFile</span> <span class="operator">=</span> <span class="built_in">super</span>.createTmpFile(param);</span><br><span class="line">            tempRaf = <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(tmpFile, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">            fileChannel = tempRaf.getChannel();</span><br><span class="line"></span><br><span class="line">            <span class="type">long</span> <span class="variable">chunkSize</span> <span class="operator">=</span> Objects.isNull(param.getChunkSize()) ? defaultChunkSize * <span class="number">1024</span> * <span class="number">1024</span></span><br><span class="line">                    : param.getChunkSize();</span><br><span class="line">            <span class="comment">//写入该分片数据</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">offset</span> <span class="operator">=</span> chunkSize * param.getChunk();</span><br><span class="line">            <span class="type">byte</span>[] fileData = param.getFile().getBytes();</span><br><span class="line">            mappedByteBuffer = fileChannel</span><br><span class="line">                    .map(FileChannel.MapMode.READ_WRITE, offset, fileData.length);</span><br><span class="line">            mappedByteBuffer.put(fileData);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.checkAndSetUploadProgress(param, uploadDirPath);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(e.getMessage(), e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            FileUtils.freedMappedByteBuffer(mappedByteBuffer);</span><br><span class="line">            <span class="keyword">assert</span> fileChannel != <span class="literal">null</span>;</span><br><span class="line">            FileUtils.close(fileChannel);</span><br><span class="line">            FileUtils.close(tempRaf.getChannel());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="RandomAccess"><a href="#RandomAccess" class="headerlink" title="RandomAccess"></a>RandomAccess</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@UploadMode(mode = UploadModeEnum.RANDOM_ACCESS)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RandomAccessUploadStrategy</span> <span class="keyword">extends</span> <span class="title class_">SliceUploadTemplate</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FileUtils filePathUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;upload.chunkSize&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> defaultChunkSize;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">upload</span><span class="params">(FileUploadRequestDTO param)</span> &#123;</span><br><span class="line">        <span class="type">RandomAccessFile</span> <span class="variable">accessTmpFile</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">uploadDirPath</span> <span class="operator">=</span> filePathUtil.getPath(param);</span><br><span class="line">            <span class="type">File</span> <span class="variable">tmpFile</span> <span class="operator">=</span> <span class="built_in">super</span>.createTmpFile(param);</span><br><span class="line">            accessTmpFile = <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(tmpFile, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">            <span class="comment">//这个必须与前端设定的值一致</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">chunkSize</span> <span class="operator">=</span> Objects.isNull(param.getChunkSize()) ? defaultChunkSize * <span class="number">1024</span> * <span class="number">1024</span></span><br><span class="line">                    : param.getChunkSize();</span><br><span class="line">            <span class="type">long</span> <span class="variable">offset</span> <span class="operator">=</span> chunkSize * param.getChunk();</span><br><span class="line">            <span class="comment">//定位到该分片的偏移量</span></span><br><span class="line">            accessTmpFile.seek(offset);</span><br><span class="line">            <span class="comment">//写入该分片数据</span></span><br><span class="line">            accessTmpFile.write(param.getFile().getBytes());</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.checkAndSetUploadProgress(param, uploadDirPath);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(e.getMessage(), e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            FileUtils.close(accessTmpFile.getChannel());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-8-SpringContextHolder"><a href="#4-8-SpringContextHolder" class="headerlink" title="4.8.SpringContextHolder"></a>4.8.SpringContextHolder</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Lazy(false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringContextHolder</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span>, DisposableBean &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取得存储在静态变量中的ApplicationContext.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext <span class="title function_">getApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">        assertContextInjected();</span><br><span class="line">        <span class="keyword">return</span> applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从静态变量applicationContext中取得Bean, 自动转型为所赋值对象的类型.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        assertContextInjected();</span><br><span class="line">        <span class="keyword">return</span> (T) applicationContext.getBean(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从静态变量applicationContext中取得Bean, 自动转型为所赋值对象的类型.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(Class&lt;T&gt; requiredType)</span> &#123;</span><br><span class="line">        assertContextInjected();</span><br><span class="line">        <span class="keyword">return</span> applicationContext.getBean(requiredType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清除SpringContextHolder中的ApplicationContext为Null.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">clearHolder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;清除SpringContextHolder中的ApplicationContext:&quot;</span> + applicationContext);</span><br><span class="line">        &#125;</span><br><span class="line">        applicationContext = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现ApplicationContextAware接口, 注入Context到静态变量中.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> &#123;</span><br><span class="line">        SpringContextHolder.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现DisposableBean接口, 在Context关闭时清理静态变量.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        SpringContextHolder.clearHolder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查ApplicationContext不为空.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">assertContextInjected</span><span class="params">()</span> &#123;</span><br><span class="line">        Validate.validState(applicationContext != <span class="literal">null</span>,</span><br><span class="line">                <span class="string">&quot;applicaitonContext属性未注入, 请在applicationContext.xml中定义SpringContextHolder.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-8-一些枚举和注解"><a href="#4-8-一些枚举和注解" class="headerlink" title="4.8.一些枚举和注解"></a>4.8.一些枚举和注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">UploadModeEnum</span> &#123;</span><br><span class="line">    RANDOM_ACCESS, MAPPED_BYTEBUFFER</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> UploadMode &#123;</span><br><span class="line">    UploadModeEnum <span class="title function_">mode</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-9-使用"><a href="#4-9-使用" class="headerlink" title="4.9.使用"></a>4.9.使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;UploadModeEnum, SliceUploadStrategy&gt; sliceUploadStrategyMap;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSliceUploadStrategyMap</span><span class="params">(List&lt;SliceUploadStrategy&gt; strategyList)</span>&#123;</span><br><span class="line">        sliceUploadStrategyMap=strategyList.stream().collect(Collectors.toMap(strategy-&gt;</span><br><span class="line">            AnnotationUtil.findAnnotation(strategy.getClass(), UploadMode.class).mode(),</span><br><span class="line">            v-&gt;v,(v1,v2)-&gt;v1</span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> FileUploadDTO <span class="title function_">fileUpload</span><span class="params">(FileUploadRequestDTO fileUploadRequestDTO)</span>&#123;</span><br><span class="line">        <span class="type">SliceUploadStrategy</span> <span class="variable">sliceUploadStrategy</span> <span class="operator">=</span> sliceUploadStrategyMap.get(fileUploadRequestDTO.getModeEnum());</span><br><span class="line">        <span class="keyword">return</span> sliceUploadStrategy.sliceUpload(fileUploadRequestDTO);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping(&quot;upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;FileUploadDTO&gt; <span class="title function_">check</span><span class="params">(FileUploadRequestDTO param)</span>&#123;</span><br><span class="line">    <span class="type">FileUploadDTO</span> <span class="variable">fileUploadDTO</span> <span class="operator">=</span> fileService.fileUpload(param);</span><br><span class="line">    <span class="keyword">return</span> R.success(fileUploadDTO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL-Find_in_Set函数</title>
      <link href="/post/208b04c9.html"/>
      <url>/post/208b04c9.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>MySQL提供了一个名为<code>FIND_IN_SET()</code>的内置字符串函数，允许您在逗号分隔的字符串列表中查找指定字符串的位置。</p><p><code>FIND_IN_SET()</code>函数根据参数的值返回一个整数或一个<code>NULL</code>值：</p><ul><li>如果<code>needle</code>或<code>haystack</code>为<code>NULL</code>，则函数返回<code>NULL</code>值。</li><li>如果<code>needle</code>不在<code>haystack</code>中，或者<code>haystack</code>是空字符串，则返回零。</li><li>如果<code>needle</code>在<code>haystack</code>中，则返回一个正整数。</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h4 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h4><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202212160018109.png" alt="image-20221216001007965"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `t_user` <span class="keyword">where</span> FIND_IN_SET(<span class="string">&#x27;2&#x27;</span>,role)</span><br></pre></td></tr></table></figure><h4 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h4><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202212160018126.png" alt="image-20221216001048396"></p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unsafe获取</title>
      <link href="/post/3af976ce.html"/>
      <url>/post/3af976ce.html</url>
      
        <content type="html"><![CDATA[<p>无用的小知识—&gt;<code>Unsafe</code>的获取</p><h3 id="错误方式"><a href="#错误方式" class="headerlink" title="错误方式"></a>错误方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestUnsafe</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Unsafe unsafe=Unsafe.getUnsafe();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(unsafe);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202212142219817.png" alt="image-20221214221924735"></p><h3 id="正确姿势"><a href="#正确姿势" class="headerlink" title="正确姿势"></a>正确姿势</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestUnsafe</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Unsafe unsafe;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;Unsafe&gt; unsafeClass = Unsafe.class;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">theUnsafe</span> <span class="operator">=</span> unsafeClass.getDeclaredField(<span class="string">&quot;theUnsafe&quot;</span>);</span><br><span class="line">            theUnsafe.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            unsafe= (Unsafe) theUnsafe.get(<span class="literal">null</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(unsafe);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202212142241068.png" alt="image-20221214224123014"></p>]]></content>
      
      
      <categories>
          
          <category> 拓展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拓展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis-plus代码生成器</title>
      <link href="/post/e4910c72.html"/>
      <url>/post/e4910c72.html</url>
      
        <content type="html"><![CDATA[<p>记录一下代码生成器，方便日后CV</p><h4 id="导入相关依赖"><a href="#导入相关依赖" class="headerlink" title="导入相关依赖"></a>导入相关依赖</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 数据库驱动 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">8.0</span><span class="number">.25</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">  </span><br><span class="line">&lt;!-- lombok --&gt;  </span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">    &lt;optional&gt;<span class="literal">true</span>&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- mybatis-plus --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.0</span><span class="number">.5</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 代码自动生成器依赖--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.0</span><span class="number">.5</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- 代码自动生成器模板依赖--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;velocity-engine-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.2</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a>代码生成器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeGenerator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">scanner</span><span class="params">(String tip)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">help</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        help.append(<span class="string">&quot;请输入数据库表名&quot;</span> + tip + <span class="string">&quot;：&quot;</span>);</span><br><span class="line">        System.out.println(help.toString());</span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNext()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">ipt</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotBlank(ipt)) &#123;</span><br><span class="line">                <span class="keyword">return</span> ipt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusException</span>(<span class="string">&quot;请输入正确的数据格式或表名&quot;</span> + tip + <span class="string">&quot;！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 代码生成器</span></span><br><span class="line">        <span class="type">AutoGenerator</span> <span class="variable">mpg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AutoGenerator</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 全局配置</span></span><br><span class="line">        <span class="type">GlobalConfig</span> <span class="variable">gc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GlobalConfig</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">projectPath</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line">        gc.setOutputDir(projectPath + <span class="string">&quot;/demo/src/main/java&quot;</span>);<span class="comment">//设置代码生成路径</span></span><br><span class="line">        gc.setFileOverride(<span class="literal">true</span>);<span class="comment">//是否覆盖以前文件</span></span><br><span class="line">        gc.setOpen(<span class="literal">false</span>);<span class="comment">//是否打开生成目录</span></span><br><span class="line">        gc.setAuthor(<span class="string">&quot;LIFEILIN&quot;</span>);<span class="comment">//设置项目作者名称</span></span><br><span class="line">        gc.setIdType(IdType.AUTO);<span class="comment">//设置主键策略</span></span><br><span class="line">        gc.setBaseResultMap(<span class="literal">true</span>);<span class="comment">//生成基本ResultMap</span></span><br><span class="line">        gc.setBaseColumnList(<span class="literal">true</span>);<span class="comment">//生成基本ColumnList</span></span><br><span class="line">        gc.setServiceName(<span class="string">&quot;%sService&quot;</span>);<span class="comment">//去掉服务默认前缀</span></span><br><span class="line">        gc.setDateType(DateType.ONLY_DATE);<span class="comment">//设置时间类型</span></span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数据源配置</span></span><br><span class="line">        <span class="type">DataSourceConfig</span> <span class="variable">dsc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceConfig</span>();</span><br><span class="line">        dsc.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/【数据库名称】?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT%2B8&quot;</span>);</span><br><span class="line">        dsc.setDriverName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dsc.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dsc.setPassword(<span class="string">&quot;【密码】&quot;</span>);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 包配置</span></span><br><span class="line">        <span class="type">PackageConfig</span> <span class="variable">pc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PackageConfig</span>();</span><br><span class="line">        pc.setParent(<span class="string">&quot;com.xiaoying&quot;</span>);</span><br><span class="line">        pc.setMapper(<span class="string">&quot;mapper&quot;</span>);</span><br><span class="line">        pc.setXml(<span class="string">&quot;mapper.xml&quot;</span>);</span><br><span class="line">        pc.setEntity(<span class="string">&quot;entity&quot;</span>);</span><br><span class="line">        pc.setService(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">        pc.setServiceImpl(<span class="string">&quot;service.impl&quot;</span>);</span><br><span class="line">        pc.setController(<span class="string">&quot;controller&quot;</span>);</span><br><span class="line">        mpg.setPackageInfo(pc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 策略配置</span></span><br><span class="line">        <span class="type">StrategyConfig</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StrategyConfig</span>();</span><br><span class="line">        <span class="comment">//数据库表映射到实体的命名策略:默命名:NamingStrategy.underline_to_camel认下划线转驼峰</span></span><br><span class="line">        sc.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        <span class="comment">//数据库表字段映射到实体的命名策略:默认下划线转驼峰命名:NamingStrategy.underline_to_camel</span></span><br><span class="line">        sc.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        sc.setEntityLombokModel(<span class="literal">true</span>);<span class="comment">//自动lombok</span></span><br><span class="line">        sc.setRestControllerStyle(<span class="literal">true</span>);</span><br><span class="line">        sc.setControllerMappingHyphenStyle(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//自己需要去配置文件配置逻辑删除等</span></span><br><span class="line">        sc.setLogicDeleteFieldName(<span class="string">&quot;deleted&quot;</span>);<span class="comment">//设置逻辑删除</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置自动填充配置</span></span><br><span class="line">        <span class="type">TableFill</span> <span class="variable">gmt_create</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TableFill</span>(<span class="string">&quot;create_time&quot;</span>, FieldFill.INSERT);</span><br><span class="line">        <span class="type">TableFill</span> <span class="variable">gmt_modified</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TableFill</span>(<span class="string">&quot;update_time&quot;</span>, FieldFill.INSERT_UPDATE);</span><br><span class="line">        ArrayList&lt;TableFill&gt; tableFills=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        tableFills.add(gmt_create);</span><br><span class="line">        tableFills.add(gmt_modified);</span><br><span class="line">        sc.setTableFillList(tableFills);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//乐观锁</span></span><br><span class="line">        sc.setVersionFieldName(<span class="string">&quot;version&quot;</span>);</span><br><span class="line">        sc.setRestControllerStyle(<span class="literal">true</span>);<span class="comment">//驼峰命名</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//  sc.setTablePrefix(&quot;tbl_&quot;); 设置表名前缀</span></span><br><span class="line">        sc.setInclude(scanner(<span class="string">&quot;表名，多个英文逗号分割&quot;</span>).split(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">        mpg.setStrategy(sc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成代码</span></span><br><span class="line">        mpg.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis源码系列</title>
      <link href="/post/8bb03f7e.html"/>
      <url>/post/8bb03f7e.html</url>
      
        <content type="html"><![CDATA[<p>最近刚好有时间，所以来跟着鲁班大叔学习一下<code>Mybatis</code>源码</p><h3 id="1-Mybatis执行器"><a href="#1-Mybatis执行器" class="headerlink" title="1.Mybatis执行器"></a>1.Mybatis执行器</h3><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202301141452180.png" alt="image-20230114145232111"></p><h4 id="1-1执行器实现一"><a href="#1-1执行器实现一" class="headerlink" title="1.1执行器实现一"></a>1.1执行器实现一</h4><font color="orange">简单执行器:</font>`SimpleExecutor`特点：无论SQL是否一样，每次都会进行<font color="orange">预编译</font><h4 id="1-2执行器实现二"><a href="#1-2执行器实现二" class="headerlink" title="1.2执行器实现二"></a>1.2执行器实现二</h4><font color="orange">可重用执行器:</font>`ReuseExecutor`特点：同一SQL语句执行只需要预编译<font color="orange">一次</font>SQL语句#### 1.3执行器实现三<font color="orange">批处理执行器:</font>`BatchExecutor`特点：只针对修改操作，针对与查操作，和`SimpleExecutor`无区别注意：需要手动提交 <font color="orange">executor.doFlushStatements</font><blockquote><p>在这三个执行器中，会用一些通用的方法，例如获取连接，缓存等操作，所以Mybatis抽象出来了一个<code>BaseExecutor</code>执行器来完成这些操作，同时，若直接调用各个执行器的query和update方法，则不会有任何缓存逻辑，所以在BaseExecutor中抽象出来了<code>doQuery</code>和<code>doUpdate</code>方法，由三个执行器各自实现</p></blockquote><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202301141622816.png" alt="image-20230114162246727"></p><p>我们来看一下源码里的体现：</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202301142157702.png" alt="image-20230114215758548"></p><p>在<code>BaseExecutor</code>中的<code>query</code>方法里，我们可以看到确实是有缓存的逻辑</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202301142159593.png" alt="image-20230114215940528"></p><p>在<code>queryFromDatabase</code>方法里调用了<code>doQuery</code>方法，而doQuery方法则是有以下实现</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202301142202105.png" alt="image-20230114220239051"></p><p>我们在上面提到的缓存，仅仅是针对于<code>一级缓存</code>，当开启<code>二级缓存</code>后，执行流程则是：</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202301150001644.png" alt="image-20230115000108451"></p><p>我们可以看一下<code>CachingExecutor</code>的<code>query</code>方法</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202301150005786.png" alt="image-20230115000508639"></p><h3 id="2-Mybatis一级缓存命中场景"><a href="#2-Mybatis一级缓存命中场景" class="headerlink" title="2.Mybatis一级缓存命中场景"></a>2.Mybatis一级缓存命中场景</h3><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202301151447137.png" alt="image-20230115144718693"></p><h3 id="3-一级缓存源码解析"><a href="#3-一级缓存源码解析" class="headerlink" title="3.一级缓存源码解析"></a>3.一级缓存源码解析</h3><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202301152302529.png" alt="image-20230115230240241"></p><h3 id="4-一级缓存失效"><a href="#4-一级缓存失效" class="headerlink" title="4.一级缓存失效"></a>4.一级缓存失效</h3><p>当我们将<code>Mybatis</code>整合<code>Spring</code>之后，有的人可能会说Spring导致了一级缓存失效，其实这并不是最准确的说法，例如以下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">  ClassPathXmlApplicationContext context=<span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">  UserMapper mapper=context.getBean(UserMapper.class);</span><br><span class="line">  User user1=mapper.selectById(<span class="number">10</span>);  <span class="comment">//每次都会构造一个新会话发起调用(不满足同一个Session)</span></span><br><span class="line">  User user2=mapper.selectById(<span class="number">10</span>);  <span class="comment">//每次都会构造一个新会话发起调用</span></span><br><span class="line">  System.out.println(user1==user2);  <span class="comment">//false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那解决办法是什么呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">  ClassPathXmlApplicationContext context=<span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">  UserMapper mapper=context.getBean(UserMapper.class);</span><br><span class="line">  <span class="comment">//手动开启事务</span></span><br><span class="line">  DataSourceTransactionManager transactionManager=(DataSourceTransactionManager) context.getBean(<span class="string">&quot;txManager&quot;</span>);</span><br><span class="line">  TransactionStatus status=transactionManager.getTranasaction(<span class="keyword">new</span> <span class="title class_">DefaultTransactionDefinition</span>());</span><br><span class="line">  User user1=mapper.selectById(<span class="number">10</span>);  <span class="comment">//每次都会构造一个新会话发起调用</span></span><br><span class="line">  User user2=mapper.selectById(<span class="number">10</span>);  <span class="comment">//每次都会构造一个新会话发起调用</span></span><br><span class="line">  System.out.println(user1==user2);  <span class="comment">//false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font color="orange">只要在同一个事务中就不会失效</font><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202301152326665.png" alt="image-20230115232641606"></p><p>我们在获取Mapper的地方打一个断点进行调试，可以看到如下结构：</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202301152327085.png" alt="image-20230115232730007"></p><ol><li>调用的方法都会被mapper拦截</li><li>交给sqlSessionProxy处理</li><li>sqlSessionProxy获取到sqlSessionFactory进行会话的构建</li><li>发起调用</li></ol><p>有了以上的基础，我们来看一下为什么加上了事务之后，一级缓存就能正常使用了：</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202301152339395.png" alt="image-20230115233934239"></p><p>我们进入<code>getSqlSession</code>方法</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202301152340549.png" alt="image-20230115234044433"></p><p>在这里我们可以看到，当开启了事务之后，获得的<code>sqlSession</code>则是同一个，保存在<code>ThreadLocal</code>里</p><h3 id="5-二级缓存定义与需求分析"><a href="#5-二级缓存定义与需求分析" class="headerlink" title="5.二级缓存定义与需求分析"></a>5.二级缓存定义与需求分析</h3><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202301170022090.png" alt="image-20230117002224993"></p><blockquote><p>二级缓存也称作应用级缓存，与一级缓存不同的是它的作用范围是<code>整个应用</code>，而且可以<code>跨线程</code>使用。所以二级缓存有更高的命中率，适合缓存一些修改较少的数据</p></blockquote><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202301170033573.png" alt="image-20230117003325515"></p><h3 id="6-二级缓存组件结构"><a href="#6-二级缓存组件结构" class="headerlink" title="6.二级缓存组件结构"></a>6.二级缓存组件结构</h3><p> <img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202301170050261.png" alt="image-20230117005053208"></p>]]></content>
      
      
      <categories>
          
          <category> Mybatis源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SaToken使用</title>
      <link href="/post/3ce22303.html"/>
      <url>/post/3ce22303.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>我们在日常的开发过程中，经常会遇到需要做登录认证、授权等操作，我们第一想到的可能是<code>shiro</code>或者<code>spring security</code>,但是用过的小伙伴们应该都知道，这两个框架配置起来十分的繁琐，那有没有简化的框架呢？答案是肯定的，引出我们今天的主角—<font color="orange">SaToken</font></p><p>先来贴一下官网：<a href="https://sa-token.dev33.cn/">https://sa-token.dev33.cn/</a></p><p>其实官网的例子已经很详细了，这里就偷个懒不进行详细讲解了，但是可以留下一个设计方案</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202212132340774.png" alt="image-20221213234020698"></p>]]></content>
      
      
      <categories>
          
          <category> 拓展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拓展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异常传递</title>
      <link href="/post/ec92ab16.html"/>
      <url>/post/ec92ab16.html</url>
      
        <content type="html"><![CDATA[<p>我们在日常开发中可能经常会遇到通过Java代码操作<code>Excel</code>，将读取到的数据保存到数据库中，而在读取的过程中难免会遇到一些异常数据，我们可能需要将这些异常信息反馈给用户或者记录下来，所以我们可能会写出以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestEither</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Stream.iterate(<span class="number">1</span>,i-&gt;i+<span class="number">1</span>)</span><br><span class="line">                .limit(<span class="number">100</span>)</span><br><span class="line">                .map(i1 -&gt; &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> readLine(i1);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> User <span class="title function_">readLine</span><span class="params">(<span class="type">int</span> i)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">100</span>)&lt;=<span class="number">50</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> User.builder().nickName(<span class="string">&quot;xx&quot;</span>).build();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;第&quot;</span>+i+<span class="string">&quot;行数据错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202212130113624.png" alt="image-20221213011337486"></p><p>我们看到程序在第一次抛出异常的时候就终止了，没有办法统计有哪些行数据有问题</p><h5 id="改造"><a href="#改造" class="headerlink" title="改造"></a>改造</h5><p><strong>异常传递类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Either</span>&lt;L,R&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> L left;</span><br><span class="line">    <span class="keyword">private</span> R right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> L <span class="title function_">getLeft</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLeft</span><span class="params">(L left)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.left = left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">getRight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRight</span><span class="params">(R right)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isLeft</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> left!=<span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isRight</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> right!=<span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;L,R&gt; Either&lt;L,R&gt; <span class="title function_">left</span><span class="params">(L exception)</span>&#123;</span><br><span class="line">        Either&lt;L,R&gt; e=<span class="keyword">new</span> <span class="title class_">Either</span>&lt;&gt;();</span><br><span class="line">        e.left=exception;</span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;L,R&gt; Either&lt;L,R&gt; <span class="title function_">right</span><span class="params">(R value)</span>&#123;</span><br><span class="line">        Either&lt;L,R&gt; e=<span class="keyword">new</span> <span class="title class_">Either</span>&lt;&gt;();</span><br><span class="line">        e.right=value;</span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Either&lt;L,T&gt; <span class="title function_">map</span><span class="params">(Function&lt;R,T&gt; function)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isLeft())&#123;</span><br><span class="line">            <span class="keyword">return</span> left(left);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> right(function.apply(right));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;L,R&gt; Either&lt;L,List&lt;R&gt;&gt; <span class="title function_">sequence</span><span class="params">(List&lt;Either&lt;L,R&gt;&gt; eitherList, BinaryOperator&lt;L&gt; accumulator)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (eitherList.stream().allMatch(Either::isRight))&#123;</span><br><span class="line">            <span class="keyword">return</span> right(eitherList.stream().map(Either::getRight).collect(Collectors.toList()));</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> left(eitherList.stream()</span><br><span class="line">                    .filter(Either::isLeft)</span><br><span class="line">                    .map(Either::getLeft)</span><br><span class="line">                    .reduce(accumulator)</span><br><span class="line">                    .orElse(<span class="literal">null</span>));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestEither</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Either&lt;String, User&gt;&gt; eithers = Stream.iterate(<span class="number">1</span>, i -&gt; i + <span class="number">1</span>)</span><br><span class="line">                .limit(<span class="number">100</span>)</span><br><span class="line">                .map(TestEither::readLine)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        Either&lt;String, List&lt;User&gt;&gt; either = Either.sequence(eithers, (s1, s2) -&gt; s1 + <span class="string">&quot;\n&quot;</span> + s2);</span><br><span class="line">        <span class="keyword">if</span> (either.isLeft())&#123;</span><br><span class="line">            System.out.println(either.getLeft());</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            either.getRight().forEach(System.out::println);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Either&lt;String, User&gt; <span class="title function_">readLine</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">100</span>)&lt;=<span class="number">50</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Either.right(User.builder().nickName(<span class="string">&quot;xx&quot;</span>).build());</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Either.left(<span class="string">&quot;第&quot;</span>+i+<span class="string">&quot;行数据错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202212130128008.png" alt="image-20221213012807916"></p>]]></content>
      
      
      <categories>
          
          <category> 拓展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拓展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JWT</title>
      <link href="/post/1bb08f7a.html"/>
      <url>/post/1bb08f7a.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在前面的<code>OAuth2.0</code>文章中，我们一直提到了一个很重要的东西—<code>token令牌</code>，这里的令牌只是一个随机的字符串，没有什么特殊的含义，这就意味着当客户带上令牌去访问应用的接口时，应用本身无法判断这个令牌的正确性，就需要到授权服务器上进行判断是否有效，在并发的场景下，检查令牌的网络请求有可能成为一个性能瓶颈</p><p>基于上述问题，我们可以使用<code>JWT</code>来解决，将令牌对应的相关信息全部冗余到令牌本身，这样资源服务器就不再需要发送请求到授权服务器去检查令牌了，自己就可以读取到令牌的授权信息，JWT令牌的本质就是一个加密的字符串！！！</p><hr><h2 id="什么是JWT"><a href="#什么是JWT" class="headerlink" title="什么是JWT"></a>什么是JWT</h2><blockquote><p>json web token（JWT）是一个开放标准（rfc7519），它定义了一种紧凑的、自包含的方式，用于在各方之间以JSON对象安全地传输信息。此信息可以验证和信任，因为它是数字签名的。jwt可以使用秘钥（使用HMAC算法）或使用RSA或ECDSA的公钥/私钥对进行签名</p></blockquote><h2 id="JWT能做什么"><a href="#JWT能做什么" class="headerlink" title="JWT能做什么"></a>JWT能做什么</h2><h4 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h4><p>这是使用JWT的最常见方案。一旦用户登录，每个后续请求将包括JWT，从而允许用户访问该令牌允许的路由，服务和资源。单点登录是当今广泛使用JWT的一项功能，因为它的开销很小并且可以在不同的域中轻松使用。</p><h4 id="信息交换"><a href="#信息交换" class="headerlink" title="信息交换"></a>信息交换</h4><p>JSON Web Token是在各方之间安全地传输信息的好方法。它是将用户信息保存到一个Json字符串中，然后进行编码后得到一个JWT token，并且这个JWT token带有签名信息，接收后可以校验是否被篡改，所以可以用于在各方之间安全地将信息作为Json对象传输。</p><h2 id="JWT结构"><a href="#JWT结构" class="headerlink" title="JWT结构"></a>JWT结构</h2><p>一个JWT实际上就是一个<code>字符串</code>，它由三部分组成，头部、载荷、签名</p><ul><li>Header</li></ul><blockquote><p>Header通常由两部分组成：Token的类型和所使用的前面算法(如HMAC SHA256或RSA)</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>最终这个 JSON 将由base64进行加密（该加密是可以对称解密的)，用于构成 JWT 的第一部分,eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9就是base64加密后的结果</p><ul><li>Payload</li></ul><blockquote><p>Token的第二部分是有效负载，其中包含声明。声明是关于实体(通常是用户)和其他数据的语句。有三种类型的声明: registered claims, public claims, and private claims。</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;sub&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1234567890&quot;</span><span class="punctuation">,</span><span class="comment">// 注册声明</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;John Doe&quot;</span><span class="punctuation">,</span><span class="comment">// 公共声明</span></span><br><span class="line">  <span class="attr">&quot;admin&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> <span class="comment">// 私有声明</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这部分的声明也会通过base64进行加密,最终形成JWT的第二部分eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ</p><ul><li>Signature</li></ul><blockquote><p>jwt的第三部分是一个签证信息，这个签证信息由三部分组成</p><p><a href="https://so.csdn.net/so/search?q=header&amp;spm=1001.2101.3001.7020">header</a> (base64后的)</p><p>payload (base64后的)</p><p>secret</p></blockquote><p>这个部分需要base64加密后的header和base64加密后的payload使用.连接组成的字符串，然后通过header中声明的加密方式进行加盐secret组合加密，然后就构成了jwt的第三部分。</p><p><font color="red"><strong>注意</strong></font>：secret是保存在服务器端的，jwt的签发生成也是在服务器端的，secret就是用来进行jwt的签发和jwt的验证，所以，它就是你服务端的私钥，在任何场景都不应该流露出去。一旦客户端得知这个secret, 那就意味着客户端是可以自我签发jwt了。</p>]]></content>
      
      
      <categories>
          
          <category> 拓展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拓展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OAuth2.0协议</title>
      <link href="/post/ce291a72.html"/>
      <url>/post/ce291a72.html</url>
      
        <content type="html"><![CDATA[<font color="orange">OAuth2.0</font>是一个开放标准，允许用户授权第三方应用程序访问他们存储在另外的服务提供者上的信息，而不需要将用户名和密码提供给第三方应用或分享他们数据的所有内容。<font color="orange">OAuth2.0</font>协议的认证流程，简单理解就是<font color="orange">允许我们将之前的授权和认证过程交给一个独立的第三方进行担保</font><p><font color="orange">OAuth2.0协议</font>有四种认证方式：</p><h3 id="授权码模式"><a href="#授权码模式" class="headerlink" title="授权码模式"></a>授权码模式</h3><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202212112110667.png" alt="image-20221211211030268"></p><p>(1)资源拥有者打开客户端，客户端要求资源拥有者给予授权，他将被浏览器,<font color="orange">重定向</font>到授权服务器，重定向时会带上客户端的身份信息等，如：</p><div class="table-container"><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">解释说明</th></tr></thead><tbody><tr><td style="text-align:left">client_id</td><td style="text-align:left">客户端接入标识</td></tr><tr><td style="text-align:left">response_type</td><td style="text-align:left">授权码模式固定为<code>code</code></td></tr><tr><td style="text-align:left">scope</td><td style="text-align:left">客户端权限</td></tr><tr><td style="text-align:left">redirect_uri</td><td style="text-align:left">重定向uri，当授权码申请成功后会跳转到此地址，并在后面带上code参数(授权码)</td></tr></tbody></table></div><p>(2)浏览器出现向授权服务器授权页面，之后将用户同意授权</p><p>(3)授权服务器将<code>授权码</code>转经浏览器发送给client(通过<code>redirect_uri</code>)</p><p>(4)客户端拿着授权码向授权服务器所要<code>access_token</code></p><p>(5)授权服务器返回令牌(access_token)</p><blockquote><p>这种模式是四种模式中最安全的一种模式，一般用于Web服务器端应用或第三方的原生App调用资源服务的时候。因为这种模式中access_token不会经过浏览器或者移动端App，而是直接从服务端去交换，这样就最大限度的减小了令牌泄露的风险</p></blockquote><h3 id="简化模式"><a href="#简化模式" class="headerlink" title="简化模式"></a>简化模式</h3><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202212112231662.png" alt="image-20221211223157580"></p><p>(1)资源拥有者打开客户端，客户端要求资源拥有者进行授权，它通过浏览器重定向到授权服务器，重定向时会附带客户端的身份信息，例如：</p><div class="table-container"><table><thead><tr><th>参数</th><th>解释说明</th></tr></thead><tbody><tr><td>client_id</td><td>客户端接入标识</td></tr><tr><td>response_type</td><td>简化模式固定为<code>token</code></td></tr><tr><td>scope</td><td>客户端权限</td></tr><tr><td>redirect_uri</td><td>跳转uri</td></tr></tbody></table></div><p>(2)浏览器出现向授权服务器授权页面，之后用户同意授权</p><p>(3)授权服务器将授权令牌<code>access_token</code>以<font color="orange">Hash</font>的形式存放在重定uri的<font color="orange">fargment</font>中发送给浏览器</p><blockquote><p>fragment主要是用来标识 URI 所标识资源里的某个资源，在 URI 的末尾通过 （#）作为 fragment 的开头， 其中 # 不属于 fragment 的值。如<code>https://uri/test#xiaoying</code>这个 URI 中 <code>xiaoying</code> 就是 fragment 的值。一般来说，简化模式用于第三方单页面应用</p></blockquote><h3 id="密码模式"><a href="#密码模式" class="headerlink" title="密码模式"></a>密码模式</h3><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202212112240331.png" alt="image-20221211224039287"></p><p>(1)资源拥有者将用户名和密码发送给客户端</p><p>(2)客户端拿着用户名和密码向授权服务器请求令牌</p><div class="table-container"><table><thead><tr><th>参数</th><th>解释说明</th></tr></thead><tbody><tr><td>client_id</td><td>客户端准入标识</td></tr><tr><td>client_secret</td><td>客户端秘钥</td></tr><tr><td>grant_type</td><td>授权类型,<code>password</code>表示密码模式</td></tr><tr><td>username</td><td>用户名</td></tr><tr><td>password</td><td>密码</td></tr></tbody></table></div><p>(3)授权服务器返回令牌</p><blockquote><p>密码模式十分简单，但是我们却将用户敏感信息泄露给了client，因此不够安全。一般用户我们自己开发，第一方原生App或第一方单页面应用</p></blockquote><h3 id="客户端模式"><a href="#客户端模式" class="headerlink" title="客户端模式"></a>客户端模式</h3><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202212112256840.png" alt="image-20221211225655788"></p><p>(1)客户端向授权服务器发送身份信息请求令牌</p><p>(2)确认客户端身份无误后，将令牌发送给客户端</p><div class="table-container"><table><thead><tr><th>参数</th><th>解释说明</th></tr></thead><tbody><tr><td>client_id</td><td>客户端准入标识</td></tr><tr><td>client_secret</td><td>客户端秘钥</td></tr><tr><td>grant_type</td><td>授权类型，填写<code>client_credentials</code>标识客户端模式</td></tr></tbody></table></div><blockquote><p>最最最！不安全但是方便的模式。这种模式一般用来提供给我们完全信任的服务端服务</p></blockquote><p>参考链接：<a href="https://blog.csdn.net/weixin_45525272/article/details/125920928">https://blog.csdn.net/weixin_45525272/article/details/125920928</a></p>]]></content>
      
      
      <categories>
          
          <category> 拓展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拓展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot事件监听</title>
      <link href="/post/36c9ec82.html"/>
      <url>/post/36c9ec82.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>在<code>Spring</code>框架中，为我们提供以许多动态可拓展的机制，开发者可以利用这些机制完成一些巧妙的业务，实现代码的解耦</p></blockquote><p>今天我们先来聊一聊SpringBoot的事件监听机制，监听机制的优点是：当一个事件发布后，会有不同的监听器来处理，如果用户想在这个事件发生时做一些其他的处理，就可以添加一个新的监听器来监听这个事件，于是我们的代码就有了很强的扩展性</p><h3 id="配置监听器的步骤"><a href="#配置监听器的步骤" class="headerlink" title="配置监听器的步骤"></a>配置监听器的步骤</h3><ol><li>自定义事件，继承<font color="orange">ApplicationEvent</font>抽象类</li><li>定义事件监听器，实现<font color="orange">ApplicationListener</font>接口</li><li>将监听器添加到<font color="orange">Spring</font>容器中</li><li>发布事件，使用<font color="orange">ApplicationEventPublisher.publishEvent</font>发布事件</li></ol><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h5 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyEvent</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyEvent</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.id= IdUtil.objectId();</span><br><span class="line">        <span class="built_in">this</span>.name=<span class="string">&quot;自定义事件&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="meta">@Order(Ordered.HIGHEST_PRECEDENCE)</span></span><br><span class="line">    <span class="meta">@EventListener(MyEvent.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">MyEventHandler</span><span class="params">(MyEvent event)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;监听到了事件&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;监听器所在线程：  &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">        Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">        log.info(event.toString());</span><br><span class="line">        log.info(<span class="string">&quot;处理完毕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="发布事件"><a href="#发布事件" class="headerlink" title="发布事件"></a>发布事件</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationEventPublisher publisher;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">publish</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始处理业务&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;发布器所在线程：&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">        publisher.publishEvent(<span class="keyword">new</span> <span class="title class_">MyEvent</span>());</span><br><span class="line">        log.info(<span class="string">&quot;主线业务处理完毕&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202212101625746.png" alt="image-20221210162508512"></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Convert工具类</title>
      <link href="/post/421a34e0.html"/>
      <url>/post/421a34e0.html</url>
      
        <content type="html"><![CDATA[<p>参考大佬的配置，<code>copy</code>了一份工具类，确实好用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConvertUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将对象集合按照一定规则映射后收集为另一种形式的集合</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;R&gt;       最终结果的泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;S&gt;       原始集合元素的类泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;       转换后元素的中间状态泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;A&gt;       最终结果收集器泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source    最原始的集合实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> action    转换规则</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> collector 收集器的类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 变换后存储新元素的集合实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;R, S, T, A&gt; R <span class="title function_">collectList</span><span class="params">(<span class="keyword">final</span> Collection&lt;S&gt; source, Function&lt;? <span class="built_in">super</span> S, ? extends T&gt; action, Collector&lt;? <span class="built_in">super</span> T, A, R&gt; collector)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(source);</span><br><span class="line">        Objects.requireNonNull(collector);</span><br><span class="line">        <span class="keyword">return</span> source.stream().map(action).collect(collector);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将对象集合按照一定规则映射后收集为另一种形式的集合</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;S&gt;    原始集合元素的类泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;    转换后元素的中间状态泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source 最原始的集合实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> action 转换规则</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 变换后存储新元素的集合实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S, T&gt; Set&lt;T&gt; <span class="title function_">collectSet</span><span class="params">(<span class="keyword">final</span> Collection&lt;S&gt; source, Function&lt;? <span class="built_in">super</span> S, ? extends T&gt; action)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(source);</span><br><span class="line">        <span class="keyword">return</span> source.stream().map(action).collect(Collectors.toSet());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将对象集合按照一定规则映射后收集为List集合</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;S&gt;    原始集合元素的类泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source 最原始的集合实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> action 转换规则</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 变换后存储新元素的集合实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S&gt; List&lt;? <span class="keyword">extends</span> <span class="title class_">S</span>&gt; collectList(<span class="keyword">final</span> Collection&lt;S&gt; source, Function&lt;? <span class="built_in">super</span> S, ? <span class="keyword">extends</span> <span class="title class_">S</span>&gt; action) &#123;</span><br><span class="line">        <span class="keyword">return</span> collectList(source, action, Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将对象以一种类型转换成另一种类型</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;    源数据类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;R&gt;    变换后数据类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source 源List集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> action 映射Lmabda表达式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 变换后的类型，如果source为null,则返回null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T, R&gt; R <span class="title function_">toObj</span><span class="params">(<span class="keyword">final</span> T source, <span class="keyword">final</span> Function&lt;? <span class="built_in">super</span> T, ? extends R&gt; action)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(action);</span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(source).map(action).orElse(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将List集合以一种类型转换成另一种类型</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;    源数据类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;R&gt;    变换后数据类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source 源List集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> action 映射Lmabda表达式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 变换后的类型集合，如果source为null,则返回空集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T, R&gt; List&lt;R&gt; <span class="title function_">toList</span><span class="params">(<span class="keyword">final</span> Collection&lt;T&gt; source, <span class="keyword">final</span> Function&lt;? <span class="built_in">super</span> T, ? extends R&gt; action)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(action);</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(source)) &#123;</span><br><span class="line">            <span class="keyword">return</span> source.stream().map(action).collect(Collectors.toList());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将IPaged对象以一种类型转换成另一种类型</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source 源Page</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> action 转换规则</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;E&gt;    源Page类型泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;    源实体类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;R&gt;    目标Page类型泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 变换后的分页类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;E <span class="keyword">extends</span> <span class="title class_">IPage</span>&lt;T&gt;, T, R&gt; IPage&lt;R&gt; <span class="title function_">toPage</span><span class="params">(E source, <span class="keyword">final</span> Function&lt;? <span class="built_in">super</span> T, ? extends R&gt; action)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(source);</span><br><span class="line">        Objects.requireNonNull(action);</span><br><span class="line">        <span class="keyword">return</span> source.convert(action);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将集合转化成Map</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lists       集合实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyAction   key转换规则</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> valueAction value转换规则</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;         集合实体类泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;K&gt;         Key实体类泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;V&gt;         Value实体类泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Map实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T, K, V&gt; Map&lt;K, V&gt; <span class="title function_">toMap</span><span class="params">(<span class="keyword">final</span> Collection&lt;T&gt; lists, Function&lt;? <span class="built_in">super</span> T, ? extends K&gt; keyAction, Function&lt;? <span class="built_in">super</span> T, ? extends V&gt; valueAction)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(lists);</span><br><span class="line">        Objects.requireNonNull(keyAction);</span><br><span class="line">        Objects.requireNonNull(valueAction);</span><br><span class="line">        <span class="keyword">return</span> lists.stream().collect(Collectors.toMap(keyAction, valueAction));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将List集合以一种类型转换成Set集合</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;    源数据类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;R&gt;    变换后数据类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source 源List集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> action 映射Lambda表达式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 变换后的类型集合，如果source为null,则返回空集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T, R&gt; Set&lt;R&gt; <span class="title function_">toSet</span><span class="params">(<span class="keyword">final</span> Collection&lt;T&gt; source, <span class="keyword">final</span> Function&lt;? <span class="built_in">super</span> T, ? extends R&gt; action)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(action);</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(source)) &#123;</span><br><span class="line">            <span class="keyword">return</span> source.stream().map(action).collect(Collectors.toSet());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大佬的<code>maven</code>仓库坐标如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xin.altitude.cms<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ucode-cms-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EqualsAndHashCode注解</title>
      <link href="/post/29fffa02.html"/>
      <url>/post/29fffa02.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>今天写项目的时候，在IDEA里新建了一个<code>VO</code>对象，为了少些一点属性(为了偷懒)，就直接<font color="orange">extends</font>了一个<code>Entity</code>，当然，由于项目中引入了<code>Lombok</code>依赖，所以就直接在<font color="orange">VO</font>上面加了一个<code>@Data</code>注解，然后我的IDEA就不乐意了，他把这个注解标注了波浪线，那有波浪线对于写代码强迫症的人来说肯定是不能容忍的，当我把鼠标放上去的时候，他提示我要写<code>@EqualsAndHashCode</code>注解,因为一直使用的都是<code>@Data</code>注解，就没有详细的看这个注解的作用，但是今天，我翻车了！！！</p><hr><p>首先们需要了解一下这个注解的作用</p><ol><li>该注解会生成<code>equals(Object other)</code>和<code>hashCode</code>方法</li><li>它默认使用非静态，非瞬态的属性</li><li>它通过参数<code>exclude</code>指定排除属性</li><li>它通过参数<code>of</code>指定使用的属性</li><li>@EqualsAndHashCode(callSuper), callSuper默认为<code>false</code>，即默认不使用父类中的属性判断</li></ol><hr><p>上案例，一目了然</p><h5 id="父类"><a href="#父类" class="headerlink" title="父类"></a>父类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="子类"><a href="#子类" class="headerlink" title="子类"></a>子类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> weight;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(<span class="type">int</span> id,String name,<span class="type">int</span> weight,String color)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(id,name);</span><br><span class="line">        <span class="built_in">this</span>.weight=weight;</span><br><span class="line">        <span class="built_in">this</span>.color=color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们先来看默认情况，即<font color="orange">@EqualsAndHashCode</font>(默认callSuper=true)</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202212082228104.png" alt="image-20221208222840156"></p><p>通过测试，我们看到，在默认的情况下，这两个子类调用<code>equals</code>方法是相等的</p><p>接下来我们测试<font color="orange">callSuper=true</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="comment">//注意看这里</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> weight;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(<span class="type">int</span> id,String name,<span class="type">int</span> weight,String color)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(id,name);</span><br><span class="line">        <span class="built_in">this</span>.weight=weight;</span><br><span class="line">        <span class="built_in">this</span>.color=color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202212082231031.png" alt="image-20221208223144916"></p><p>相信你已经明白了这个属性的作用，我就不说出来啦~</p>]]></content>
      
      
      <categories>
          
          <category> 拓展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拓展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态参数校验</title>
      <link href="/post/2122e731.html"/>
      <url>/post/2122e731.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>对于单字段的校验，我想小伙伴们应该是再熟悉不过了，本文就不过多介绍了</p></blockquote><p>但是在我们的日常开发过程中，经常会遇到这样一种情况：<font color="orange">第二个参数的校验依赖于第一个参数</font>,针对这种情况，本文进行了说明，帮助开发人员快速上</p><hr><p>假设我们有这样的一个实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; website;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们有如下需求：</p><ol><li>如果10&lt;age&lt;20,则要求website的大小介于<code>1</code>和<code>3</code>之间</li><li>如果age&gt;=30,则要求website的大小介于<code>4</code>和<code>6</code>之间</li></ol><hr><p class='p yellow'>实现方案</p><p><code>Hibernate Validator</code>为我们提供了<code>@GroupSequenceProvider</code>注解，可以动态的决定哪些校验组进入默认的校验组</p><ol><li><p>首先我们需要<code>DefaultGroupSequenceProvider</code>接口来处理我们的实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonGroupSequenceProvider</span> <span class="keyword">implements</span> <span class="title class_">DefaultGroupSequenceProvider</span>&lt;Person&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Class&lt;?&gt;&gt; getValidationGroups(Person person) &#123;</span><br><span class="line">        List&lt;Class&lt;?&gt;&gt; defaultGroupSequence=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">      <span class="comment">//将我们要检验的实体类的class添加到默认分组(源码里有体现)</span></span><br><span class="line">        defaultGroupSequence.add(Person.class);</span><br><span class="line">      <span class="comment">//这里一定要有判空操作！！！</span></span><br><span class="line">        <span class="keyword">if</span> (person!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> person.getAge();</span><br><span class="line">            <span class="keyword">if</span> (age&gt;<span class="number">10</span>&amp;&amp;age&lt;<span class="number">20</span>)&#123;</span><br><span class="line">                defaultGroupSequence.add(Person.WhenAgeBetween10and20Group.class);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(age&gt;=<span class="number">30</span>)&#123;</span><br><span class="line">                defaultGroupSequence.add(Person.WhenAgeGt30Group.class);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> defaultGroupSequence;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在待校验的实体类上使用<code>@GroupSequenceProvider</code>注解指定我们的处理器，同时需要定义好我们的校验分组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@GroupSequenceProvider(PersonGroupSequenceProvider.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Range(min = 10, max = 50)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Size(min = 1, max = 3, groups = WhenAgeBetween10and20Group.class)</span></span><br><span class="line">    <span class="meta">@Size(min = 4, max = 6, groups = WhenAgeGt30Group.class)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobbies;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">WhenAgeBetween10and20Group</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">WhenAgeGt30Group</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试我们配置的结果有没有成功(偷个懒，不贴图了，布局太丑了 ):smile </p><font color="orange">校验成功！！！</font></li></ol><hr><p>很好，我们现在已经实现了使用<code>@GroupSequenceProvider</code>注解完成了我们想要的效果，现在你已经是一名合格的CV工程师了，放手去做吧!!!</p><blockquote><p>oooo,还没结束，贴一下本文的参考资料:<a href="https://blog.csdn.net/f641385712/article/details/99725482">https://blog.csdn.net/f641385712/article/details/99725482</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 扩展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 校验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data注解导致StackOverFlow</title>
      <link href="/post/b4dffefa.html"/>
      <url>/post/b4dffefa.html</url>
      
        <content type="html"><![CDATA[<p>记录一下今天遇到的使用<code>Lombok</code>的<code>@Data</code>注解使用不当导致的<font color="orange">stackoverflow</font>问题，当然，这里只是说明一下什么时候回出现这个问题，并不是说以下代码是符合编码规范的</p><hr><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Project</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Project&gt; projects;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Project</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Project</span>();</span><br><span class="line">        <span class="type">Project</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Project</span>();</span><br><span class="line">        p1.setProjects(Collections.singletonList(p2));</span><br><span class="line">        p2.setProjects(Collections.singletonList(p1));</span><br><span class="line">        System.out.println(p1.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202212082259045.png" alt="image-20221208225913780"></p><p>既然出现了问题，那我们就要找到原因，我们先来看一下@Data注解到底帮我们做了哪些工作</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202212082301448.png" alt="image-20221208230108313"></p><p>那，问题已经很明朗了，由于我们project类里面的List集合对<code>hashCode</code>的计算会把每一个元素拿出来单独调用<code>hashCode</code>方法进行求和，但是projects集合里的元素又是project，这样就导致了无限递归调用，导致了stackoverflow。</p><p>当然，在springbooot项目中，也可能会遇到这个问题，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">  <span class="keyword">private</span> B b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span>&#123;</span><br><span class="line">  <span class="keyword">private</span> A a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原理其实和上面的类似，但还要结合spring的依赖注入知识进行理解，这里就不做过多的说明了</p><blockquote><p>在大多数的场景下，我们使用@Data注解的作用仅仅是为了使用set和get，对于hashCode方法使用的很少，所以建议使用@Setter和@Getter注解替换@Data注解(仅仅只是建议)</p></blockquote><h6 id="补贴一下AbstractList的hashCode方法"><a href="#补贴一下AbstractList的hashCode方法" class="headerlink" title="补贴一下AbstractList的hashCode方法"></a>补贴一下AbstractList的hashCode方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">hashCode</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (E e : <span class="built_in">this</span>)</span><br><span class="line">        hashCode = <span class="number">31</span>*hashCode + (e==<span class="literal">null</span> ? <span class="number">0</span> : e.hashCode());</span><br><span class="line">    <span class="keyword">return</span> hashCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 拓展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拓展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>封装Dos工具类</title>
      <link href="/post/1175065a.html"/>
      <url>/post/1175065a.html</url>
      
        <content type="html"><![CDATA[<p>为什么会突然封装这个工具类呢？其实原因很简单，今天看到了我们电脑上那个黑色的<code>Dos</code>窗口，那刚好，我又看到了我电脑上有个<code>python</code>脚本，突然想到了一个有意思的地方~~能不能通过Java程序类似于Dos窗口那样执行一些命令，说干就干！！！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DosUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">exec</span><span class="params">(String command)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">Process</span> <span class="variable">proc</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        proc = Runtime.getRuntime().exec(command);</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line">        Future&lt;String&gt; errorFuture = executorService.submit(<span class="keyword">new</span> <span class="title class_">InputStreamRunnable</span>(proc.getErrorStream()));</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(proc.getInputStream(), <span class="string">&quot;GBK&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ((line = in.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">             sb.append(line).append(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">errorMsg</span> <span class="operator">=</span> errorFuture.get();</span><br><span class="line">        proc.waitFor();</span><br><span class="line">        proc.destroy();</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">        <span class="keyword">return</span> CharSequenceUtil.isNotBlank(sb.toString())?sb.toString():errorMsg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InputStreamRunnable</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;String&gt; &#123;</span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">bReader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InputStreamRunnable</span><span class="params">(InputStream is)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bReader = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(is), <span class="string">&quot;GBK&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        String line;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">while</span> ((line = bReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            sb.append(line).append(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="简单测试"><a href="#简单测试" class="headerlink" title="简单测试"></a>简单测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    System.out.println(DosUtil.exec(<span class="string">&quot;python  E:\\test.py&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202212070042631.png" alt="image-20221207004202465"></p>]]></content>
      
      
      <categories>
          
          <category> 工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FastRequest插件</title>
      <link href="/post/f58ba0f4.html"/>
      <url>/post/f58ba0f4.html</url>
      
        <content type="html"><![CDATA[<p>今天推荐一款神级IDEA插件<code>FastRequest</code></p><p>话不多说，直接上<a href="https://dromara.gitee.io/fast-request/">官网</a>，至于功能什么的，用了都说好，这里就简单的截个图吧</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202212070029466.png" alt="image-20221207002927153"></p><p>通过点击每一个controller左边的<code>R</code>标，可以快速帮助我们生成对应的请求参数，当然，我们也可以自己配置一些全局信息</p>]]></content>
      
      
      <categories>
          
          <category> 插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>select for update锁表问题</title>
      <link href="/post/836bd663.html"/>
      <url>/post/836bd663.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>select for update锁表问题</p></blockquote><span id="more"></span><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>数据库版本：<code>MySQL8.0.27</code></p><p>存储引擎：<code>InnoDB</code></p><p>隔离级别：<code>RR</code></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>在使用select for update语句时，当使用到索引时使用<code>行锁</code>，索引不可用时使用<code>表锁</code></p><h2 id="避免锁表"><a href="#避免锁表" class="headerlink" title="避免锁表"></a>避免锁表</h2><h5 id="方法1：强制走索引"><a href="#方法1：强制走索引" class="headerlink" title="方法1：强制走索引"></a>方法1：强制走索引</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> force index(索引名称) <span class="keyword">where</span> <span class="keyword">no</span><span class="operator">=</span><span class="number">1</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br></pre></td></tr></table></figure><h5 id="方法2：增加limit关键字"><a href="#方法2：增加limit关键字" class="headerlink" title="方法2：增加limit关键字"></a>方法2：增加limit关键字</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> teacher<span class="operator">=</span>&quot;小樱&quot; limit <span class="number">0</span>,<span class="number">10</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br></pre></td></tr></table></figure><h5 id=""><a href="#" class="headerlink" title=" "></a> </h5>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式事务</title>
      <link href="/post/cdcc4eae.html"/>
      <url>/post/cdcc4eae.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>分布式事务</p></blockquote><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大端和小端</title>
      <link href="/post/71c23000.html"/>
      <url>/post/71c23000.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>大端和小端</p></blockquote><span id="more"></span><h4 id="大小端的定义"><a href="#大小端的定义" class="headerlink" title="大小端的定义"></a>大小端的定义</h4><p>大端：<font color="orange">高地址存储低字节</font></p><p>小端：<font color="orange">低地址存储低字节</font></p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>数字 0x12 34 56 78 在内存中的表示形式</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202208172325126.png" alt="image-20220817232542051"></p>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拓展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BeanUtils的隐藏BUG</title>
      <link href="/post/68b43996.html"/>
      <url>/post/68b43996.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>BeanUtils的隐藏BUG</p></blockquote><span id="more"></span><p>我们先来看一段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> List&lt;String&gt; books;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Course</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> List&lt;Integer&gt; books;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeanUtils;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Teacher</span> <span class="variable">teacher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span><br><span class="line">        teacher.setBooks(Arrays.asList(<span class="string">&quot;红楼梦&quot;</span>,<span class="string">&quot;西游记&quot;</span>));</span><br><span class="line">        <span class="type">Course</span> <span class="variable">course</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Course</span>();</span><br><span class="line">        BeanUtils.copyProperties(teacher,course);</span><br><span class="line">        System.out.println(course.getBooks());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202208172229731.png" alt="image-20220817222900698"></p><p>看到这里，你会不会有疑问，两个不同类型的List集合竟然赋值成功了？？？</p><p>我们来看一下<code>copyProperties</code>的源码</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202208172230504.png" alt="image-20220817223043071"></p><p>现在我们已经很清晰了，我们知道java的泛型只存在于编译期，在运行期就被擦除了，因为List<Integer>和List<String>都会被擦除为List<Object>,由于使用了<font color="orange">反射</font>直接赋值，跳过了编译期检查，索引上述代码可以执行成功。</p>]]></content>
      
      
      <categories>
          
          <category> 拓展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拓展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迭代器模式</title>
      <link href="/post/9055d217.html"/>
      <url>/post/9055d217.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>迭代器模式</p></blockquote><span id="more"></span><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h4 id="Aggregate接口"><a href="#Aggregate接口" class="headerlink" title="Aggregate接口"></a>Aggregate接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Aggregate</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Iterator <span class="title function_">iterator</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Iterator接口"><a href="#Iterator接口" class="headerlink" title="Iterator接口"></a>Iterator接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Iterator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Object <span class="title function_">next</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Book类"><a href="#Book类" class="headerlink" title="Book类"></a>Book类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="BookShelf类"><a href="#BookShelf类" class="headerlink" title="BookShelf类"></a>BookShelf类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookShelf</span> <span class="keyword">implements</span> <span class="title class_">Aggregate</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Book[] books;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> last=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BookShelf</span><span class="params">(<span class="type">int</span> maxsize)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.books=<span class="keyword">new</span> <span class="title class_">Book</span>[maxsize];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getBookAt</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> books[index];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">appendBook</span><span class="params">(Book book)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.books[last]=book;</span><br><span class="line">        last++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getLength</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> last;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BookShelfIterator</span>(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="BookShelfIterator类"><a href="#BookShelfIterator类" class="headerlink" title="BookShelfIterator类"></a>BookShelfIterator类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookShelfIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BookShelf bookShelf;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> index;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BookShelfIterator</span><span class="params">(BookShelf bookShelf)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookShelf = bookShelf;</span><br><span class="line">        <span class="built_in">this</span>.index = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index&lt;bookShelf.getLength())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookShelf.getBookAt(index);</span><br><span class="line">        index++;</span><br><span class="line">        <span class="keyword">return</span> book;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="主方法"><a href="#主方法" class="headerlink" title="主方法"></a>主方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BookShelf</span> <span class="variable">bookShelf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BookShelf</span>(<span class="number">4</span>);</span><br><span class="line">        bookShelf.appendBook(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;西游记&quot;</span>));</span><br><span class="line">        bookShelf.appendBook(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;红楼梦&quot;</span>));</span><br><span class="line">        bookShelf.appendBook(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;水浒传&quot;</span>));</span><br><span class="line">        bookShelf.appendBook(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;三国演义&quot;</span>));</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> bookShelf.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> (Book) iterator.next();</span><br><span class="line">            System.out.println(book.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Iterator模式中登场角色"><a href="#Iterator模式中登场角色" class="headerlink" title="Iterator模式中登场角色"></a>Iterator模式中登场角色</h2><h4 id="Iterator-迭代器"><a href="#Iterator-迭代器" class="headerlink" title="Iterator(迭代器)"></a>Iterator(迭代器)</h4><p>该角色负责定义按顺序逐个遍历元素的接口，在案例中，由Iterator接口扮演这个角色，定义了<code>hasNext</code>和<code>next</code>两个方法。</p><h4 id="ConcreteInterator-具体的迭代器"><a href="#ConcreteInterator-具体的迭代器" class="headerlink" title="ConcreteInterator(具体的迭代器)"></a>ConcreteInterator(具体的迭代器)</h4><p>该角色负责实现Iterator角色所定义的接口。在案例中，由BookShelfIterator类扮演这个角色。该角色中包含了遍历集合所必须的信息。</p><h4 id="Aggregate-聚合"><a href="#Aggregate-聚合" class="headerlink" title="Aggregate(聚合)"></a>Aggregate(聚合)</h4><p>该角色负责定义创建Iterator角色的接口，会创建出<font color="orange">“按顺序访问保存在我内部元素的人</font>”，在案例中，由Aggregate接口扮演这个角色，里面定义了iterator方法。</p><h4 id="ConcreteAggregate-具体的聚合"><a href="#ConcreteAggregate-具体的聚合" class="headerlink" title="ConcreteAggregate(具体的聚合)"></a>ConcreteAggregate(具体的聚合)</h4><p>该角色负责实现Aggregate角色所定义的接口，会创建出具体的Iterator角色，即ConcreteInterator角色，在案例中，由BookShelf类扮演这个角色。</p><h2 id="拓展思路的要点"><a href="#拓展思路的要点" class="headerlink" title="拓展思路的要点"></a>拓展思路的要点</h2><h4 id="不管实现如何变化，都可以使用Iterator"><a href="#不管实现如何变化，都可以使用Iterator" class="headerlink" title="不管实现如何变化，都可以使用Iterator"></a>不管实现如何变化，都可以使用Iterator</h4><p>为什么一定要考虑引入迭代器这种复杂的设计模式呢？如果是数组，直接使用for循环语句进行遍历处理不就可以了吗？为什么要在集合之外引入Iterator这个角色呢？</p><p>一个重要的原因是，引入Iterator后可以将遍历与实现分离开来，例如下面这段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">    <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> (Book) iterator.next();</span><br><span class="line">    System.out.println(book.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里只使用了hasNext和next方法，并没有调用BookShelf的方法，也就是说，<font color="orange">这里的while循环并不依赖于BookShelf的实现。</font></p><p>如果编写BookShelf的开发人员决定放弃使用数组来管理书本，而是通过java.util.Vector方法取而代之，会怎么样呢？不管BookShelf如何变化，只要BookShelf的iterator能够正确返回Iterator实例，即使不对上面的while循环做任何修改，代码也可以正常工作。</p><p>这对于BookShelf的调用者来说真是太方便了。设计模式的作用就是帮助我们编写可复用的类。所谓“可复用”，就是指将类的实现作为“组件”，当一个组件发生改变时，不需要对其他的组件进行修改或是只需要进行很小的修改即可。</p><p>这也就能理解为什么在案例中iterator方法的返回值不是BookShelfIterator类型而是Iterator类型了，这表明这段程序就是要使用Iterator的方法进行编程，而不是BookShelfIterator的方法。</p><h4 id="多个Iterator"><a href="#多个Iterator" class="headerlink" title="多个Iterator"></a>多个Iterator</h4><p>“将遍历功能置于Aggregate角色之外”是Iterator模式的一个特征，根据这个特征，可以针对一个ConcreteAggregate角色编写多个ConcreteIterator角色。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 迭代器模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>断点调试分类</title>
      <link href="/post/ec3ba20b.html"/>
      <url>/post/ec3ba20b.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>断点调试分类</p></blockquote><span id="more"></span><h2 id="1-行断点"><a href="#1-行断点" class="headerlink" title="1.行断点"></a>1.行断点</h2><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202208131805112.png" alt="image-20220813180506971"></p><p>行断点只需要在左边行号处使用鼠标左键点击即可</p><h2 id="2-方法断点"><a href="#2-方法断点" class="headerlink" title="2.方法断点"></a>2.方法断点</h2><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202208131808104.png" alt="image-20220813180807909"></p><p>方法断点只需在方法左边空白处使用鼠标左键点击即可</p><p>以debug的方式运行时，会在方法的第一行和最后一行进行停顿，开发人员可以很清晰的了解到方法内部的变量情况以及方法的返回值</p><p>注：<font color="orange">方法断点也可打在接口的抽象方法上，以debug方式运行程序时会自动跳转到实现类</font></p><h2 id="3-异常断点"><a href="#3-异常断点" class="headerlink" title="3.异常断点"></a>3.异常断点</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDebug</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        User user=<span class="literal">null</span>;</span><br><span class="line">        user.getUserName();</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过观察上述代码，我们可以很清楚的之后程序运行会抛出空指针异常，那么我们如何做到以debug方式运行的时候能准确停到出现异常的地方呢？</p><p>我们可以在断点面板新建一个异常断点，选择我们要监控的异常进行添加即可</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202208131816861.png" alt="image-20220813181640657"></p><p>再次以debug的方式运行，我们可以发现断点停在了发生异常的地方</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202208131818868.png" alt="image-20220813181813487"></p><h2 id="4-字段断点"><a href="#4-字段断点" class="headerlink" title="4.字段断点"></a>4.字段断点</h2><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202208131819372.png" alt="image-20220813181931039"></p><p>字段断点在运行时可以监控某个字段的变化</p><h2 id="5-条件断点"><a href="#5-条件断点" class="headerlink" title="5.条件断点"></a>5.条件断点</h2><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202208131823980.png" alt="image-20220813182315846"></p><p>条件满足时才会挺停住</p><h2 id="6-表达式解析器"><a href="#6-表达式解析器" class="headerlink" title="6.表达式解析器"></a>6.表达式解析器</h2><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202208131828329.png" alt="image-20220813182850968"></p><h2 id="7-避免操作资源"><a href="#7-避免操作资源" class="headerlink" title="7.避免操作资源"></a>7.避免操作资源</h2><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202208131832917.png" alt="image-20220813183206613"></p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202208131832524.png" alt="image-20220813183233353"></p><p>我们可以发现到后面的代码都是没有执行的，避免了一些脏数据的产生</p><h2 id="8-Stream-debug"><a href="#8-Stream-debug" class="headerlink" title="8.Stream debug"></a>8.Stream debug</h2><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202208131840858.png" alt="image-20220813184025584"></p><h2 id="9-多线程debug"><a href="#9-多线程debug" class="headerlink" title="9.多线程debug"></a>9.多线程debug</h2><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202208131845828.png" alt="image-20220813184559461"></p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202208131847856.png" alt="image-20220813184707413"></p>]]></content>
      
      
      <categories>
          
          <category> IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> debug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原码,反码,补码</title>
      <link href="/post/44d31689.html"/>
      <url>/post/44d31689.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>原码、反码、补码</p></blockquote><span id="more"></span><h4 id="原码"><a href="#原码" class="headerlink" title="原码"></a>原码</h4><ul><li>最高位是符号位，0代表正数，1代表负数，非符号位为该数字绝对值的二进制</li></ul><h4 id="反码"><a href="#反码" class="headerlink" title="反码"></a>反码</h4><ul><li>正数的反码与原码一致，负数的反码是对原码按位取反，只是最高位(符号位)不变</li></ul><h4 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h4><ul><li>正数的补码与原码一致，负数的补码是对原码按位取反加一，符号位不变</li></ul><p>tips：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">补码--&gt;原码：正数的补码与原码一致，负数的补码按位取反加一，符号位不变</span><br><span class="line"></span><br><span class="line">反码--&gt;原码：正数的反码与原码一致，负数的补码按位取反，符号位不变</span><br></pre></td></tr></table></figure><h4 id="为什么出现原码、反码、补码？"><a href="#为什么出现原码、反码、补码？" class="headerlink" title="为什么出现原码、反码、补码？"></a>为什么出现原码、反码、补码？</h4><p>计算机只会做<font color="orange">加法操作</font>，面对减法，除法，乘法时，都会转换为加法</p><p>我们可以举这样的一个例子，2的原码是<code>0000 0010</code>，-2的原码是<code>1000 0010</code>，当使用-2的原码加上2的原码时，结果是<code>1000 0100</code>，得到的结果是-4，显然这是不正确的，所以这也就说明了使用原码遇到负数运算时的弊端。</p><p>当我们使用反码做以上运算时，我们知道-2的反码是<code>1111 1101</code>，而2的反码还是<code>0000 0010</code>，当我们进行相加操作时，会发现结果是<code>1111 1111</code>，得到结果为-0，显然结果是正确的，但是使用反码进行计算还会出现个问题，0000 0000代表+0，1000 0000代表-0，但实际上+0和-0是一样的，用两个编码来表示显然是很浪费的，于是出现了补码来解决这个问题。</p><p>我们先看一下1000 0000和0000 0000的补码，（注意：发生数值溢出时，则直接舍去进位）由于一个字节只有8为，所以我们会发现这两个数的补码都是<code>0000 0000</code>，这成功的解决了使用反码表示时出现+0和-0的问题，且多出来了一个存储空间，而原本存储-0 的那个状态1000 0000现在存储<code>-128</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拓展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot事务实现回滚的几种方式</title>
      <link href="/post/19d3bf47.html"/>
      <url>/post/19d3bf47.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>SpringBoot事务实现回滚的几种方式</p></blockquote><span id="more"></span><font color="orange">SpringBoot已经自动配置了@EnableTransactionalManagement,所以我们无需在启动类上加这个注解</font><h2 id="方式一、自动回滚"><a href="#方式一、自动回滚" class="headerlink" title="方式一、自动回滚"></a>方式一、自动回滚</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setName(<span class="string">&quot;xiaoying&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">11</span>);</span><br><span class="line">    </span><br><span class="line">    baseMapper.insert(user);</span><br><span class="line">    <span class="type">int</span> a=<span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方式二、手动回滚"><a href="#方式二、手动回滚" class="headerlink" title="方式二、手动回滚"></a>方式二、手动回滚</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setName(<span class="string">&quot;xiaoying&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">11</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        baseMapper.insert(user);</span><br><span class="line">        <span class="type">int</span> a=<span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      <span class="comment">//手动回滚</span></span><br><span class="line">        TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方式三、部分回滚"><a href="#方式三、部分回滚" class="headerlink" title="方式三、部分回滚"></a>方式三、部分回滚</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setName(<span class="string">&quot;xiaoying&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">111</span>);</span><br><span class="line">    baseMapper.insert(user);</span><br><span class="line">    <span class="comment">//设置回滚点</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">savepoint</span> <span class="operator">=</span> TransactionAspectSupport.currentTransactionStatus().createSavepoint();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">int</span> a=<span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="comment">//回滚到保存的回滚点</span></span><br><span class="line">        TransactionAspectSupport.currentTransactionStatus().rollbackToSavepoint(savepoint);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA的书签功能</title>
      <link href="/post/9f3073ed.html"/>
      <url>/post/9f3073ed.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>IDEA的书签功能</p></blockquote><span id="more"></span><p>今天在写代码的时候无意间发现了IDEA中一个<font color="red">非常</font>实用的功能！我们在查看代码时，可能会跳来跳去的，有时候自己要翻好久的代码才能找到刚才看到的方法，那么IDEA中这个自带的书签功能就非常有必要了，开发者福音！</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202208140245456.png" alt="image-20220814024507072"></p><p>把鼠标放在要打书签的那一行，按下<code>F11</code>即可打上书签，按下键盘单的<code>shift+f11</code>即可弹出所有的书签，在这里我们可以快速的切换到我们打书签的地方</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202208140246328.png" alt="image-20220814024635042"></p><p>我们还可以给书签进行标号，只需要按下键盘上的<code>ctrl+f11</code>即可</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202208140247387.png" alt="image-20220814024749070"></p><p>打上标号后，我们可以使用<code>ctrl+数字键</code>快速进行切换</p>]]></content>
      
      
      <categories>
          
          <category> IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis-Plus的批量保存</title>
      <link href="/post/80cf02c8.html"/>
      <url>/post/80cf02c8.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Mybatis-Plus批量保存</p></blockquote><span id="more"></span><p>我们在项目中经常会遇到批量保存数据的地方，如果我们在项目中使用到了MP，这时我们可能会想到使用<code>saveBatch</code>方法，但是当我们进入这个方法去查看实现原理时，我们会发现这个方法并不是真正的实现了批量保存，而是<font color="orange">伪批量</font></p><p>我们代码中进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">batchInsert</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;User&gt; users=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">            user.setName(<span class="string">&quot;xiaoying&quot;</span>);</span><br><span class="line">            user.setAge(i);</span><br><span class="line">            users.add(user);</span><br><span class="line">        &#125;</span><br><span class="line">        saveBatch(users);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202208092330776.png" alt="image-20220809233012448"></p><p>通过执行上述代码，我们很清晰的看到saveBatch方法还是一条一条数据进行插入的</p><p>那么，有没有真正的批量保存的方法呢？实际上，MP为我们提供了一个注入器，通过这个注入器我们就可以实现批量保存(只针对于<code>MYSQL</code>)，示例：</p><p>注入器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义注入器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EasySqlInjector</span> <span class="keyword">extends</span> <span class="title class_">DefaultSqlInjector</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;AbstractMethod&gt; <span class="title function_">getMethodList</span><span class="params">(Class&lt;?&gt; mapperClass)</span> &#123;</span><br><span class="line">        List&lt;AbstractMethod&gt; methodList = <span class="built_in">super</span>.getMethodList(mapperClass);</span><br><span class="line">        methodList.add(<span class="keyword">new</span> <span class="title class_">InsertBatchSomeColumn</span>());</span><br><span class="line">        <span class="keyword">return</span> methodList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> EasySqlInjector <span class="title function_">easySqlInjector</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">EasySqlInjector</span>();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>扩展BaseMapper:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EasyBaseMapper</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;T&gt; &#123;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 批量插入 仅适用于mysql</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> Integer <span class="title function_">insertBatchSomeColumn</span><span class="params">(Collection&lt;T&gt; entityList)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">batchInsert</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;User&gt; users=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">            user.setName(<span class="string">&quot;xiaoying&quot;</span>);</span><br><span class="line">            user.setAge(i);</span><br><span class="line">            users.add(user);</span><br><span class="line">        &#125;</span><br><span class="line">        userMapper.insertBatchSomeColumn(users);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202208100036218.png" alt="image-20220810003635065"></p><p>我们观察到，通过这种方式真正的实现了批量保存。</p>]]></content>
      
      
      <categories>
          
          <category> Mybatis-Plus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 批量保存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA中debug按钮</title>
      <link href="/post/de309027.html"/>
      <url>/post/de309027.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>IDEA中使用debug，各个按钮的作用</p></blockquote><span id="more"></span><p>有许多小伙伴可能和我有一样的困扰，IDEA中使用debug的时候，有那么多的按钮，不知道都是干嘛用的，那么今天就和我来学习一下IDEA中如何进行debug。</p><p>首先我们需要了解一下在debug调试的时候，每个按钮的作用</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202208131628854.png" alt="image-20220813162859620"></p><ol><li>回到当前执行断点所在的页面，显示当前执行代码的位置</li><li>逐行执行，遇到方法调用时不会进入方法内部</li><li>逐行执行，但是会进入调用的方法内（ 我们自定义的方法）</li><li>逐行执行，但是会进入任何一个方法，不区分是我们自己自定义的还是官方类库里的</li><li>直接执行完当前方法，返回到调用方法执行之后</li><li>执行到光标的位置，此功能只能前进（位置应当在当前位置之后），而不能回退</li><li>弹出可输入计算表达式调试框</li><li>重新以debug的方式运行</li><li>进行一些配置</li><li>执行到下一个断点处</li><li>暂停</li><li>停止以debug方式运行</li><li>查看哪些方法打了断点，也可以为断点设置条件</li><li>禁用之后的所有断点</li><li>可以查看线程信息</li><li>进行一些配置</li><li>固定标签</li></ol>]]></content>
      
      
      <categories>
          
          <category> IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> debug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>职责链模式</title>
      <link href="/post/7bf8ae3c.html"/>
      <url>/post/7bf8ae3c.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>职责链模式</p></blockquote><span id="more"></span><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>职责链模式是一种创建处理对象序列的通用方案，一个处理对象可能需要在完成一些工作之后，将结果传递给另外一个对象，这个对象接着做一些工作，再转交给下一个处理对象，以此类推</p><p>通常，这种模式是通过定义一个代表处理对象的<font color="orange">抽象类</font>来实现的，在抽象类中会定义一个字段来记录后续对象。一旦对象完成他的工作，处理对象就会将它的工作转交给它的后继</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ProcessingObject</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> ProcessingObject&lt;T&gt; processingObject;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProcessingObject</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProcessingObject</span><span class="params">(ProcessingObject&lt;T&gt; processingObject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.processingObject = processingObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProcessingObject</span><span class="params">(ProcessingObject&lt;T&gt; processingObject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.processingObject = processingObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">handle</span><span class="params">(T input)</span>&#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">r</span> <span class="operator">=</span> handleWork(input);</span><br><span class="line">        <span class="keyword">if</span> (processingObject!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> processingObject.handleWork(r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">protected</span> T <span class="title function_">handleWork</span><span class="params">(T input)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们需要创建两个处理对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeaderTestProcessing</span> <span class="keyword">extends</span> <span class="title class_">ProcessingObject</span>&lt;String&gt;&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HeaderTestProcessing</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HeaderTestProcessing</span><span class="params">(ProcessingObject&lt;String&gt; processingObject)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(processingObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String <span class="title function_">handleWork</span><span class="params">(String input)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Test:&quot;</span>+input;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpellCheckerProcessing</span> <span class="keyword">extends</span> <span class="title class_">ProcessingObject</span>&lt;String&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SpellCheckerProcessing</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SpellCheckerProcessing</span><span class="params">(ProcessingObject&lt;String&gt; processingObject)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(processingObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String <span class="title function_">handleWork</span><span class="params">(String input)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> input+<span class="string">&quot;xiaoying&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestChain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ProcessingObject&lt;String&gt; p1=<span class="keyword">new</span> <span class="title class_">HeaderTestProcessing</span>();</span><br><span class="line">        ProcessingObject&lt;String&gt; p2=<span class="keyword">new</span> <span class="title class_">SpellCheckerProcessing</span>();</span><br><span class="line">        p1.setProcessingObject(p2);</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> p1.handle(<span class="string">&quot;xiaoying&quot;</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202208072027870.png" alt="image-20220807202735696"></p><h2 id="Java8重构"><a href="#Java8重构" class="headerlink" title="Java8重构"></a>Java8重构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    UnaryOperator&lt;String&gt; headerProcessing=(String text)-&gt;<span class="string">&quot;Test:&quot;</span>+text;</span><br><span class="line">    UnaryOperator&lt;String&gt; spellCheckerProcessing=(String text)-&gt;text.replace(<span class="string">&quot;x&quot;</span>,<span class="string">&quot;w&quot;</span>);</span><br><span class="line">    Function&lt;String,String&gt; pipeline=headerProcessing.andThen(spellCheckerProcessing);</span><br><span class="line">    String result=pipeline.apply(<span class="string">&quot;xiaoying&quot;</span>);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过这种方式，我们无需再去创建两个子类去完成相应的工作</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 职责链模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redisson实现分布式锁</title>
      <link href="/post/2e391fb1.html"/>
      <url>/post/2e391fb1.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Rediss实现分布式锁</p></blockquote><span id="more"></span><h2 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h2><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置Redisson客户端"><a href="#配置Redisson客户端" class="headerlink" title="配置Redisson客户端"></a>配置Redisson客户端</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedissonConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Redisson <span class="title function_">redisson</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">        <span class="comment">//配置地址、数据库</span></span><br><span class="line">        config.useSingleServer().setAddress(<span class="string">&quot;redis://localhost:6379&quot;</span>).setDatabase(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> (Redisson) Redisson.create(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="service"><a href="#service" class="headerlink" title="service"></a>service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedissonService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> EXPIRE_SECONDS=<span class="number">5</span>*<span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">lockByName</span><span class="params">(String name, Supplier&lt;T&gt; supplier)</span>&#123;</span><br><span class="line">        <span class="comment">//获取锁</span></span><br><span class="line">        <span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redissonClient.getLock(name);</span><br><span class="line">        log.info(<span class="string">&quot;inter==&gt;&#123;&#125;&quot;</span>,Thread.currentThread().getName());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (lock.tryLock(EXPIRE_SECONDS, TimeUnit.SECONDS))&#123;</span><br><span class="line">                Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                log.info(<span class="string">&quot;lock==&gt;&#123;&#125;&quot;</span>,Thread.currentThread().getName()+<span class="string">&quot;-时间:&quot;</span>+System.currentTimeMillis());</span><br><span class="line">                <span class="keyword">return</span> supplier.get();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedissonController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedissonService redissonService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RedissonController</span><span class="params">(RedissonService redissonService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.redissonService = redissonService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;redisson&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">redisson</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redissonService.lockByName(<span class="string">&quot;USER1&quot;</span>,()-&gt;<span class="string">&quot;SUCCESS&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202208062146965.png" alt="image-20220806214631685"></p><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><blockquote><p>通过观察时间，我们发现已经实现了互斥访问</p></blockquote><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202208062152849.png" alt="image-20220806215252476"></p><h2 id="锁续期原理"><a href="#锁续期原理" class="headerlink" title="锁续期原理"></a>锁续期原理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">scheduleExpirationRenewal</span><span class="params">(<span class="keyword">final</span> <span class="type">long</span> threadId)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (expirationRenewalMap.containsKey(getEntryName())) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Timeout</span> <span class="variable">task</span> <span class="operator">=</span> commandExecutor.getConnectionManager().newTimeout(<span class="keyword">new</span> <span class="title class_">TimerTask</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(Timeout timeout)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">            RFuture&lt;Boolean&gt; future = commandExecutor.evalWriteAsync(getName(), LongCodec.INSTANCE, RedisCommands.EVAL_BOOLEAN,</span><br><span class="line">                    <span class="comment">//通过LUA脚本保证原子操作</span></span><br><span class="line">                    <span class="string">&quot;if (redis.call(&#x27;hexists&#x27;, KEYS[1], ARGV[2]) == 1) then &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;return 1; &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;return 0;&quot;</span>,</span><br><span class="line">                      Collections.&lt;Object&gt;singletonList(getName()), internalLockLeaseTime, getLockName(threadId));</span><br><span class="line"></span><br><span class="line">            future.addListener(<span class="keyword">new</span> <span class="title class_">FutureListener</span>&lt;Boolean&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operationComplete</span><span class="params">(Future&lt;Boolean&gt; future)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                    expirationRenewalMap.remove(getEntryName());</span><br><span class="line">                    <span class="keyword">if</span> (!future.isSuccess()) &#123;</span><br><span class="line">                        log.error(<span class="string">&quot;Can&#x27;t update lock &quot;</span> + getName() + <span class="string">&quot; expiration&quot;</span>, future.cause());</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (future.getNow()) &#123;</span><br><span class="line">                        <span class="comment">// reschedule itself</span></span><br><span class="line">                        scheduleExpirationRenewal(threadId);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//internalLockLeaseTime默认30s，每过10秒就会执行这个续期的方法</span></span><br><span class="line">    &#125;, internalLockLeaseTime / <span class="number">3</span>, TimeUnit.MILLISECONDS);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (expirationRenewalMap.putIfAbsent(getEntryName(), task) != <span class="literal">null</span>) &#123;</span><br><span class="line">        task.cancel();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 分布式锁 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redisson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口幂等性</title>
      <link href="/post/a26b78e0.html"/>
      <url>/post/a26b78e0.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>接口幂等性</p></blockquote><span id="more"></span><h2 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h2><p>接口幂等性是用户对于同一个操作发起的一次请求或者多次请求的结果是一致的，不会因为多次点击而产生一些副作用。在我们的生活中有许多这样的场景，在支付系统中，用户购买商品点击支付，支付扣款成功，但是返回的时候因为网络原因，用户没有及时的收到响应，此时钱已经扣了，用户再次点击按钮，此时会进行第二次扣款，显然这是不合理的，因为扣除了两次，同时数据库里的订单记录也变成了两条，这就是没有保证接口幂等性的后果。</p><h2 id="2、场景"><a href="#2、场景" class="headerlink" title="2、场景"></a>2、场景</h2><h3 id="2-1、什么时候需要保证接口幂等性"><a href="#2-1、什么时候需要保证接口幂等性" class="headerlink" title="2.1、什么时候需要保证接口幂等性"></a>2.1、什么时候需要保证接口幂等性</h3><ol><li>查询操作：查询操作天然就是幂等操作，在数据不变的情况下，查询一次和多次的接口是一样的，所以不需要我们做一些特殊的操作去保证幂等性</li><li>删除操作：删除一次或是删除多次，针对的都是这一些数据，因此删除操作也是具有幂等性的</li><li>修改操作：修改操作在大多数场景下结果是一致的，但是如果是<font color="orange">增量</font>修改就需要我们去保证他的幂等性，举个例子：<ol><li>修改某张表的某个字段，设置值为“xaioying”，这种操作无论执行多少次都是幂等的</li><li>修改表中的某个字段，将这个字段的值+1,这种操作就不是幂等的</li></ol></li><li>新增操作：新增操作在重复提交的场景下就会出现幂等性问题</li></ol><h2 id="3、如何实现幂等性"><a href="#3、如何实现幂等性" class="headerlink" title="3、如何实现幂等性"></a>3、如何实现幂等性</h2><h3 id="3-1、Token机制"><a href="#3-1、Token机制" class="headerlink" title="3.1、Token机制"></a>3.1、Token机制</h3><ol><li>后端需要提供生成token的接口，在处理一些存在幂等性的接口时，需要先去获取token，后端同时也会将这个token保存到redis中</li><li>在调用业务接口的请求时，需要携带token进行访问，一般是放在请求头中</li><li>后端需要判断token是否和redis中的token匹配，匹配成功则删除token继续执行业务</li><li>如果判断token不在redis中，则表示重复操作，直接返回提示信息</li></ol><p>注意：先删除token还是先处理业务逻辑？必须先删除token，避免并发请求下多个请求执行通过</p><p>获取token，校验token，删除token三个行为必须保证原子性，这个过程我们可以使用Lua脚本:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> redis.call(<span class="string">&#x27;get&#x27;</span>,KEYS[<span class="number">1</span>])==ARG[<span class="number">1</span>] then <span class="keyword">return</span> redis.call(<span class="string">&#x27;del&#x27;</span>,KEYS[<span class="number">1</span>]) <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span> end</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> R <span class="title function_">saveInfo</span><span class="params">(userInfo userInfo)</span> &#123;</span><br><span class="line">    <span class="comment">//0-执行失败， 1-执行成功</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">script</span> <span class="operator">=</span> <span class="string">&quot;if redis.call(&#x27;get&#x27;,KEYS[1])==ARG[1] then return redis.call(&#x27;del&#x27;,KEYS[1]) else return 0 end&quot;</span>;</span><br><span class="line">   </span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> userInfo.getToken();</span><br><span class="line">    DefaultRedisScript&lt;Long&gt; defaultRedisScript = <span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>&lt;&gt;(script, Long.class);</span><br><span class="line">   </span><br><span class="line">    List&lt;String&gt; keys = Arrays.asList(<span class="string">&quot;KEY&quot;</span>);</span><br><span class="line">    <span class="comment">// 原子验证令牌和删除令牌</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">result</span> <span class="operator">=</span> redisTemplate.execute(defaultRedisScript, keys, token);</span><br><span class="line">    <span class="keyword">if</span> (result == <span class="number">1</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;校验成功&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;校验失败&quot;</span>);</span><br><span class="line">        <span class="comment">//返回错误信息</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2、锁机制"><a href="#3-2、锁机制" class="headerlink" title="3.2、锁机制"></a>3.2、锁机制</h3><h4 id="1-数据库悲观锁"><a href="#1-数据库悲观锁" class="headerlink" title="1.数据库悲观锁"></a>1.数据库悲观锁</h4><p>​    select * from t_user where user_id=1 for update;</p><p>悲观锁使用时一般伴随事务一起使用，数据锁定时间可能会很长，需要根据实际情况选用。另外需要注意的是，Id字段是主键或者唯一索引，不然可能造成锁表的结果，处理起来会非常麻烦。</p><p>特别说明：</p><p>​    1.当线程A执行for update，数据会对当前记录加锁，其他线程执行到此行代码的时候，会等待线程A释放锁之后，才可以获取锁，继续后续操作。<br>2.事物提交时，for update获取的锁会自动释放。</p><p>​    2.缺点：如果业务处理比较耗时，并发情况下，后面线程会长期处于等待状态，占用了很多线程，让这些线程处于无效等待状态，我们的web服务中的线程数量一般都是有限的，如果大量线程由于获取for update锁处于等待状态，不利于系统并发操作。</p><h4 id="2、数据库乐观锁"><a href="#2、数据库乐观锁" class="headerlink" title="2、数据库乐观锁"></a>2、数据库乐观锁</h4><p>​    这种方法适合在更新场景中，update t_user set age=age+1, version=version+1 where user_id=1 and version=1;<br>​    根据version版本，也就是在操作库存前先获取当前商品的version版本号，然后操作的时候带上此version号。 我们第一次操作库存时，得到version为1，调用库存服务version变为2；但返回给订单服务出现了问题，订单又一次发起调用库存服务，当订单服务传入version还是1，再执行上面的SQL语句时，因为version已经变成2了，where条件不成立。这样就保证不了不管调用几次，只会真正的处理一次。而且，乐观锁主要使用与处理读多写少的场景。</p><h4 id="3、业务层分布式锁"><a href="#3、业务层分布式锁" class="headerlink" title="3、业务层分布式锁"></a>3、业务层分布式锁</h4><p>​    如果多个机器可能在同一时间同时处理相同的数据，比如多台机器定时任务都拿到了相同数据，我们就可以加分布式锁，锁定此数据，处理完成后释放锁。获取到锁的必须先判断这个数据是否被处理过。</p><h3 id="3-3、唯一性约束"><a href="#3-3、唯一性约束" class="headerlink" title="3.3、唯一性约束"></a>3.3、唯一性约束</h3><h4 id="1、数据库唯一约束"><a href="#1、数据库唯一约束" class="headerlink" title="1、数据库唯一约束"></a>1、数据库唯一约束</h4><p>​    插入数据，应该按照唯一索引进行插入，比如订单号，相同的订单号就不可能有两条记录插入、我们在数据库层面防止重复。这个机制就是利用了数据的主键唯一约束的特性，解决了在insert场景时幂等问题。但主键的要求不是自增的主键，这样就需要业务生成全局唯一的主键。如果是在分库分表的场景下，路由规则要保证相同请求下，落地在同一个数据库中和同一表中，要不然数据库主键约束就不起作用了，因为是不同的数据库和表主键不相关联。</p><p>​    注意：插入操作最好放在最后执行，原因：插入操作会锁表，放在最后能让锁表的时间降到最低，提升系统的并发性。</p><h4 id="2、redis-防重"><a href="#2、redis-防重" class="headerlink" title="2、redis 防重"></a>2、redis 防重</h4><p>​    很多数据需要处理，只能被处理一次，比如我们可以计算数据的MD5将其放入redis的缓存中，每次处理数据，先判断这个MD5是否已经存在，存在就不处理。</p><h4 id="3、防重表"><a href="#3、防重表" class="headerlink" title="3、防重表"></a>3、防重表</h4><p>​    使用订单号orderNo作为去重表的唯一索引，把唯一索引插入去重表，在进行业务操作，且他们在同一个事务当中。这样来保证重复请求时，因为防重表有唯一约束，导致请求失败，避免了幂等问题。这里要注意的是，去重表应该在同一库中，这样就保证了在同一个事务，即使业务操作失败了，它也会把去重表的数据回滚。这个很好的保证了数据一致性。</p><h4 id="4、全局请求唯一ID"><a href="#4、全局请求唯一ID" class="headerlink" title="4、全局请求唯一ID"></a>4、全局请求唯一ID</h4><p>​    调用接口时，生成一个唯一id，redis将数据保存到集合中（去重），存在即处理过，可以使用Nginx设置每个请求的唯一id; proxy_set_header X-Request-Id $request_id;<br>缺点：nginx层面生成的id不区分数据并不能保证幂等，需从页面调用时由后台生成唯一id</p><h2 id="4、完整示例"><a href="#4、完整示例" class="headerlink" title="4、完整示例"></a>4、完整示例</h2><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">1000</span></span><br><span class="line">    <span class="attr">lettuce:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">100</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="number">-1</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><h4 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TokenService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TokenService</span><span class="params">(StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ORDER_TOKEN=<span class="string">&quot;order:&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">createToken</span><span class="params">(String value)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">        String key=ORDER_TOKEN+token;</span><br><span class="line">        stringRedisTemplate.opsForValue().set(key,value,<span class="number">5</span>, TimeUnit.MINUTES);</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">validToken</span><span class="params">(String token,String value)</span>&#123;</span><br><span class="line">        <span class="comment">//Lua脚本</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">script</span> <span class="operator">=</span> <span class="string">&quot;if redis.call(&#x27;get&#x27;, KEYS[1]) == KEYS[2] then return redis.call(&#x27;del&#x27;, KEYS[1]) else return 0 end&quot;</span>;</span><br><span class="line">        RedisScript&lt;Long&gt; redisScript = <span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>&lt;&gt;(script, Long.class);</span><br><span class="line">        <span class="comment">// 根据 Key 前缀拼接 Key</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> ORDER_TOKEN + token;</span><br><span class="line">        <span class="comment">// 执行 Lua 脚本</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">result</span> <span class="operator">=</span> stringRedisTemplate.execute(redisScript, Arrays.asList(key, value));</span><br><span class="line">        <span class="comment">// 根据返回结果判断是否成功成功匹配并删除 Redis 键值对，若果结果不为空和0，则验证通过</span></span><br><span class="line">        <span class="keyword">if</span> (result != <span class="literal">null</span> &amp;&amp; result != <span class="number">0L</span>) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;验证成功&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;验证失败&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TokenController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TokenService tokenService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TokenController</span><span class="params">(TokenService tokenService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.tokenService = tokenService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getToken&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getToken</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tokenService.createToken(<span class="string">&quot;user1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/validToken&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">validToken</span><span class="params">(String token)</span>&#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> tokenService.validToken(token, <span class="string">&quot;user1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result?<span class="string">&quot;正常调用&quot;</span>:<span class="string">&quot;重复调用&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202208061849680.png" alt="image-20220806184927429"></p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202208061848599.png" alt="image-20220806184812873"></p><p>参考连接：<a href="https://blog.csdn.net/doinbb/article/details/108438937">https://blog.csdn.net/doinbb/article/details/108438937</a><br>参考链接：<a href="https://blog.csdn.net/CLKTOY/article/details/121512694">https://blog.csdn.net/CLKTOY/article/details/121512694</a></p>]]></content>
      
      
      <categories>
          
          <category> 拓展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 幂等性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Aop实现防抖功能</title>
      <link href="/post/fa778fcd.html"/>
      <url>/post/fa778fcd.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Aop实现防抖功能</p></blockquote><span id="more"></span><p>Java版防抖，非常好用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shake</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">shakeFlag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* work.xiaoying.validdemo.controller..*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shakeCut</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;shakeCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (shakeFlag) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">proceed</span> <span class="operator">=</span> joinPoint.proceed();</span><br><span class="line">            shakeFlag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Timer</span>().schedule(<span class="keyword">new</span> <span class="title class_">TimerTask</span>() &#123;</span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    shakeFlag = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">return</span> proceed;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考:<a href="https://vampireachao.gitee.io/2020/09/25/java%E5%87%BD%E6%95%B0%E9%98%B2%E6%8A%96/">https://vampireachao.gitee.io/2020/09/25/java%E5%87%BD%E6%95%B0%E9%98%B2%E6%8A%96/</a></p>]]></content>
      
      
      <categories>
          
          <category> 拓展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 防抖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java泛型</title>
      <link href="/post/a14eb637.html"/>
      <url>/post/a14eb637.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Java泛型</p></blockquote><span id="more"></span><h2 id="泛型的概念"><a href="#泛型的概念" class="headerlink" title="泛型的概念"></a>泛型的概念</h2><p>java泛型是JDK1.5引入的一个新特性，泛型提供了编译时类型安全监测机制，该机制允许我们在编译时检测到非法的类型数据结构</p><blockquote><p>泛型的本质就是参数化类型，也就是所操作的数据类型被指定为一个参数</p></blockquote><h2 id="泛型的好处"><a href="#泛型的好处" class="headerlink" title="泛型的好处"></a>泛型的好处</h2><ul><li>类型安全</li><li>消除了强制类型转换</li></ul><h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><ul><li>语法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class 类名称 &lt;泛型标识,泛型标识,...&gt;&#123;</span><br><span class="line">  <span class="keyword">private</span> 泛型标识 变量名;</span><br><span class="line">  ....  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>常用的泛型标识：<code>T、E、K、V</code></li><li>不成文的规定:<font color="orange">E-表示元素，T-表示类型，K-表示键，V-表示值，？-表示不确定</font></li><li>注意事项<ul><li>泛型类如果没有指定具体的数据类型，此时操作的数据类型是<code>Object</code></li><li>泛型的参数类型只能是<code>类类型</code>，不能是基本数据类型</li><li>泛型类型在逻辑上可以看成是多个不同的类型，但实际上都是相同类型</li></ul></li></ul><h2 id="泛型类的派生子类"><a href="#泛型类的派生子类" class="headerlink" title="泛型类的派生子类"></a>泛型类的派生子类</h2><ul><li>子类也是泛型类，子类和父类的泛型类型要<font color="orange">一致</font></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">Parent</span>&lt;T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span>&lt;T,E,...&gt; <span class="keyword">extends</span> <span class="title class_">Parent</span>&lt;T&gt;  </span><br></pre></td></tr></table></figure><ul><li>子类不是泛型类，父类要<font color="orange">明确</font>泛型的数据类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Parent</span>&lt;Person&gt;</span><br></pre></td></tr></table></figure><h2 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h2><ul><li>语法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface 接口名 &lt;泛型标识,泛型标识...&gt;&#123;</span><br><span class="line">  泛型标识 方法名();</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用<ul><li>实现类不是泛型类，接口要明确数据类型</li><li>实现类也是泛型类，实现类和接口的泛型类要“一致”(实现类可以扩充泛型类型)   </li></ul></li></ul><h2 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h2><ul><li>泛型类是在实例化类的时候指明泛型的具体类型</li><li>泛型方法是在调用方法的时候指明泛型的具体类型</li><li>语法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 &lt;T,E,...&gt; 返回值类型 方法名(形参列表)&#123;</span><br><span class="line">  方法体...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>public与返回值中间<T>非常重要，可以理解为声明此方法为泛型方法</li><li>只有声明了<T>的方法才是泛型方法，泛型类中的使用了泛型的成员方法并不是泛型方法</li><li><T>表明该方法将使用泛型类型T，此时才可以在方法中使用泛型类型T</li><li>与泛型类的定义一样，此处T可以随意写任意标识，比如T、E、K、V等</li><li>泛型方法能使方法独立于类而产生变化，和类声明的泛型无关，即使泛型标识符相同</li><li>如果static方法要使用泛型能力，那么就必须成为泛型方 法</li></ul><h2 id="类型通配符"><a href="#类型通配符" class="headerlink" title="类型通配符"></a>类型通配符</h2><ul><li>类型通配符一般是使用<code>?</code>代替具体的类型实参</li><li>所以类型通配符是类型实参，而不是类型形参</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(Parent&lt;Integer&gt; parent)</span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(Parent&lt;Number&gt; parent)</span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当我们把上述代码放到编译器里时会报错，在这个方法的参数里，我们不能使用传统的多态理解分析问题，有了类型通配符后，我们就可以实现类似于重载的方法</span></span><br></pre></td></tr></table></figure><h4 id="类型通配符的上限"><a href="#类型通配符的上限" class="headerlink" title="类型通配符的上限"></a>类型通配符的上限</h4><ul><li>语法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类/接口 &lt;? extends 实参类型&gt;</span><br></pre></td></tr></table></figure><p>注:</p><ul><li><font color="orange">要求该泛型的类型，只能是实参类型，或实参类型的子类类型</font></li><li><font color="orange">采用上限通配符的集合不能添加元素</font></li></ul><h4 id="类型通配符的下限"><a href="#类型通配符的下限" class="headerlink" title="类型通配符的下限"></a>类型通配符的下限</h4><ul><li>语法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类/接口 &lt;? <span class="built_in">super</span> 实参类型&gt;</span><br></pre></td></tr></table></figure><p>注:</p><ul><li><font color="orange">要求该泛型的类型，只能是实参类型，或在、实参类型的父类类型</font></li></ul><h2 id="类型擦除"><a href="#类型擦除" class="headerlink" title="类型擦除"></a>类型擦除</h2><p>泛型是java1.5版本才引进的概念，在这之前是没有泛型的，但是，泛型代码能够很好的和之前版本的代码兼容，那是因为，泛型信息只存在于代码编译阶段，在进入JVM之前，与泛型相关的信息会被擦除掉，我们称之为—<font color="orange">类型擦除</font></p><ul><li>无限制类型擦除</li></ul><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202208140150674.png" alt="image-20220814015043594"></p><ul><li>有限制类型擦除</li></ul><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202208140151079.png" alt="image-20220814015132022"></p><ul><li>擦除方法中类型定义的参数</li></ul><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202208140153588.png" alt="image-20220814015300532"></p><ul><li>桥接方法</li></ul><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202208140153952.png" alt="image-20220814015338872"></p><h2 id="泛型数组"><a href="#泛型数组" class="headerlink" title="泛型数组"></a>泛型数组</h2><ul><li>可以声明带泛型的数组引用，但是不能直接创建带泛型的数组对象</li></ul><p>错误写法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt;[] listArr=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;[<span class="number">5</span>];</span><br></pre></td></tr></table></figure><p>正确写法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt;[] listArr=<span class="keyword">new</span> <span class="title class_">Arraylist</span>[5b]; </span><br></pre></td></tr></table></figure><ul><li>可以通过<code>java.lang.reflect.Array的newInstance(Class&lt;T&gt;,int)</code>创建T[]数组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Fruit</span>&#123;</span><br><span class="line">  <span class="keyword">private</span> T[] array;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Fruit</span><span class="params">(Class&lt;T&gt; clz,<span class="type">int</span> length)</span>&#123; </span><br><span class="line">    array=(T[])Array.newInstance(clz,length);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="泛型和反射"><a href="#泛型和反射" class="headerlink" title="泛型和反射"></a>泛型和反射</h2><p>反射常用的泛型类</p><ul><li>Class<T></li><li>Constructor<T></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 泛型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring事务失效场景2</title>
      <link href="/post/31954aef.html"/>
      <url>/post/31954aef.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Spring事务失效场景2</p></blockquote><span id="more"></span><p>直接上案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(&quot;work.xiaoying&quot;)</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JdbcTemplate <span class="title function_">jdbcTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>(dataSource());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PlatformTransactionManager <span class="title function_">transactionManager</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DataSourceTransactionManager</span> <span class="variable">transactionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line">        transactionManager.setDataSource(dataSource());</span><br><span class="line">        <span class="keyword">return</span> transactionManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DriverManagerDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DriverManagerDataSource</span>();</span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;jdbc:mysql://127.0.0.1/test16?characterEncoding=utf-8&amp;useSSL=false&quot;</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;ytt19990813&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们按照上述方式配置好事务管理器后，我们在代码里使用@Transaction注解时会发现事务并没有生效，那么具体原因是什么导致的呢？</p><p>通过观察，我们发现我们调用了两次DataSource()方法，在Java的层面上来讲，这两次生成的是不同的DataSource对象，而我们在Service层执行代码的时候，如果某个方法上标注了@Transaction注解，那么在执行方法的时候，应是根据事务管理器所建立的数据库连接来执行SQL，这个获取的过程使用的是ThreadLocal来实现的，考虑到适配不同的数据源，ThreadLocal里存储的是一个Map，Map的key是DataSource，而值是connection，这样我们就已经很清晰了，如果我们的jdbcTemplate里的DataSource和事务管理器里的DataSource是同一个的话，那么就可以获取到数据库连接。而当jdbcTemplate里的DataSouce和事务管理器里的不一样时，jdbcTemplate就会自己创建一个数据库连接，而这个数据库连接的autocommit=true，所以就会自动提交，导致事务失效。</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(&quot;work.xiaoying&quot;)</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="comment">//这里是重点</span></span><br><span class="line"><span class="meta">@Configuration</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JdbcTemplate <span class="title function_">jdbcTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>(dataSource());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PlatformTransactionManager <span class="title function_">transactionManager</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DataSourceTransactionManager</span> <span class="variable">transactionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line">        transactionManager.setDataSource(dataSource());</span><br><span class="line">        <span class="keyword">return</span> transactionManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DriverManagerDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DriverManagerDataSource</span>();</span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;jdbc:mysql://127.0.0.1/test16?characterEncoding=utf-8&amp;useSSL=false&quot;</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;ytt19990813&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加上@Configuration注解后，代理对象第一次调用dataSource方法，会从容器里拿，发现容器里没有就会创建一个dataSource并放到Spring容器里，当第二次调用到dataSource方法的时候直接从容器中拿到，这样就保证了是同一个dataSource对象。</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring事务工作原理</title>
      <link href="/post/6575c8a6.html"/>
      <url>/post/6575c8a6.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Spring事务</p></blockquote><span id="more"></span><h2 id="Spring事务"><a href="#Spring事务" class="headerlink" title="Spring事务"></a>Spring事务</h2><p>我们在SpringBoot项目中经常会使用到<code>@Transactional</code>注解，那么这个注解是如何工作的呢？</p><p>我们知道，某个类中的方法标注了@Transactional注解，那么就会生成一个代理对象，这个代理对象里判断哪些方法上标注了@Transactional注解，然后事务管理器会新建一个数据库连接并设置<font color="orange">autocommit=false</font>,执行target对象的方法，根据方法体内执行情况判断是提交事务还是回滚事务。</p><h2 id="事务失效原因"><a href="#事务失效原因" class="headerlink" title="事务失效原因"></a>事务失效原因</h2><p>有时候我们会发现，即使标注了@Transaction注解，但是却没有生效，那么这是什么原因导致的呢？例如下面这段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        jdbcTemplate.execute(<span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">        test1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.NEVER)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        jdbcTemplate.execute(<span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上述代码，我们会发现程序并没有抛出任何异常，这说明了我们的@Transactional(propagation = Propagation.NEVER)失效了，那么是什么原因导致的呢？</p><p>我们知道，调用test()方法里的test1()方法的是一个普通对象，可以理解为我们直接new出来的对象，那么这个时候普通对象是不管我们方法上标注的@Transaction注解的，所以注解失效了。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol><li>我们可以把test1()方法提取到另一个类，例如UserServiceBase类，将这个类注入到我们的UserService类中，使用userSserviceBase.test1()方法</li><li>在UserService类中注入自己，通过自己调用方法，即userService.test1()</li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring的Aop是如何工作的</title>
      <link href="/post/9163eeab.html"/>
      <url>/post/9163eeab.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Spring的AOP底层工作原理</p></blockquote><span id="more"></span><p>为了更好的学习AOP的底层原理，我们需要准备以下环境</p><h4 id="UserService"><a href="#UserService" class="headerlink" title="UserService"></a>UserService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(orderService);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="OrderService"><a href="#OrderService" class="headerlink" title="OrderService"></a>OrderService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="XiaoyingAspect"><a href="#XiaoyingAspect" class="headerlink" title="XiaoyingAspect"></a>XiaoyingAspect</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XiaoyingAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(public void work.xiaoying.service.UserService.test())&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BEFORE&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="AppConfig"><a href="#AppConfig" class="headerlink" title="AppConfig"></a>AppConfig</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(&quot;work.xiaoying&quot;)</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="主启动类"><a href="#主启动类" class="headerlink" title="主启动类"></a>主启动类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(AppConfig.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> (UserService) applicationContext.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">        userService.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们以DEBUG的方式运行这段代码</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202207312344508.png" alt="image-20220731234356292"></p><p>我们会发现，这里的orderService竟然是<code>null</code>，我们继续下放断点</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202207312351253.png" alt="image-20220731235109871"></p><p>这里竟然又是有值的，怎么回事？？？</p><p>我们知道，SpringBoot使用的是CGLIB动态代理的（SpringBoot2.x以后），那么就会生成一个UserService的代理对象，我们以一张图来说明这里的内部逻辑。</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202208010002060.png" alt="image-20220801000250007"></p><p>我们可能会想，在代理对象里直接使用<code>super</code>关键字来执行UserService里的test()方法，但是这样是行不通的，我们在DEBUG的时候发现在UserService的代理对象里的orderService是为null的，而我们的代理对象里没有赋值操作，直接调用的父类的test()方法，这个过程中orderService一直都是为null的，但我们在DEBUG的时候发现最终执行的时候，orderSerivice对象是有值的，这两者是矛盾的，也就印证了使用super关键字这一方法是错误的。</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202208010013566.png" alt="image-20220801001315463"></p><p>我们可以以DEBUG的方式来印证上诉过程</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202208010016350.png" alt="image-20220801001648994"></p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202208010021321.png" alt="image-20220801002103006"></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>推断构造方法</title>
      <link href="/post/d9273917.html"/>
      <url>/post/d9273917.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>什么是推断构造方法</p></blockquote><span id="more"></span><p>我们有时候可能会使用到构造器注入，当然这也是<a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-dependencies">Spring</a>官方推荐我们做的</p><p>The Spring team generally advocates constructor injection, as it lets you implement application components as immutable objects and ensures that required dependencies are not <code>null</code>. Furthermore, constructor-injected components are always returned to the client (calling) code in a fully initialized state. As a side note, a large number of constructor arguments is a bad code smell, implying that the class likely has too many responsibilities and should be refactored to better address proper separation of concerns.</p><p>当我们采用构造器注入的时候，我们需要注意以下几点：</p><ul><li>当存在无参构造和有参构造的时候，如果我们不指定的话，默认是找到无参构造进行注入的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserService</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;无参构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserService</span><span class="params">(OrderService orderService)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;一个参数的构造器&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.orderService = orderService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202207310014383.png" alt="image-20220731001402122"></p><ul><li>当存在多个有参构造器的时候(不手动指定)，会报错</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserService</span><span class="params">(OrderService orderService)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;一个参数的构造器&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.orderService = orderService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserService</span><span class="params">(OrderService orderService1,OrderService orderService2)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;两个参数的构造器&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.orderService = orderService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202207310016472.png" alt="image-20220731001657302"></p><ul><li>当只有一个构造器的时候，会默认按照这个构造器注入</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserService</span><span class="params">(OrderService orderService)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;一个参数的构造器&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.orderService = orderService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202207310022858.png" alt="image-20220731002218716"></p><ul><li>当存在多个有参构造的时候，我们可以指定按照哪一个进行注入</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserService</span><span class="params">(OrderService orderService)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;一个参数的构造器&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.orderService = orderService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserService</span><span class="params">(OrderService orderService1,OrderService orderService2)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;两个参数的构造器&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.orderService = orderService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202207310023160.png" alt="image-20220731002342012"></p><p>附官网说明：</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202207310027190.png" alt="image-20220731002709114"></p><p>在推断构造方法过程中，如果构造方法中有参数，那么Spring则会先按照类型去容器中找，如果找到了则直接赋值，如果根据类型找到多个名称不同但类型相同的Bean，则会继续按照名称进行查找。</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bean的初始化</title>
      <link href="/post/d885771e.html"/>
      <url>/post/d885771e.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Bean的初始化</p></blockquote><span id="more"></span><h2 id="初始化前"><a href="#初始化前" class="headerlink" title="初始化前"></a>初始化前</h2><h4 id="PostConstruct注解"><a href="#PostConstruct注解" class="headerlink" title="@PostConstruct注解"></a>@PostConstruct注解</h4><p>当我们在某个方法上标注<code>@PostConstruct</code>注解后，Spring就会在初始化前调用标注了这个注解的方法，完成相应的逻辑操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User admin;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">named</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//这里我们就可以为admin属性进行赋值操作（如果我们的逻辑比较复杂的话）</span></span><br><span class="line">       log.info(<span class="string">&quot;执行特殊方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>为了实现上述功能，我们还可以这样做</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> <span class="keyword">implements</span> <span class="title class_">InitializingBean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User admin;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.info(<span class="string">&quot;执行特殊方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202207302329800.png" alt="image-20220730232901582"></p><h2 id="初始化后"><a href="#初始化后" class="headerlink" title="初始化后"></a>初始化后</h2><p>在初始化后做了一件非常重要的事情—<font color="orange">AOP</font></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Async注解导致的循环依赖问题</title>
      <link href="/post/1beb82a5.html"/>
      <url>/post/1beb82a5.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>@Async注解导致的循环依赖问题</p></blockquote><span id="more"></span><h2 id="什么是循环依赖"><a href="#什么是循环依赖" class="headerlink" title="什么是循环依赖"></a>什么是循环依赖</h2><p>If you use predominantly constructor injection, it is possible to create an unresolvable circular dependency scenario.</p><p>For example: Class A requires an instance of class B through constructor injection, and class B requires an instance of class A through constructor injection. If you configure beans for classes A and B to be injected into each other, the Spring IoC container detects this circular reference at runtime, and throws a <code>BeanCurrentlyInCreationException</code>.</p><p>One possible solution is to edit the source code of some classes to be configured by setters rather than constructors. Alternatively, avoid constructor injection and use setter injection only. In other words, although it is not recommended, you can configure circular dependencies with setter injection.</p><p>Unlike the typical case (with no circular dependencies), a circular dependency between bean A and bean B forces one of the beans to be injected into the other prior to being fully initialized itself (a classic chicken-and-egg scenario).</p><p>以上摘自Spring<a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-collaborators">官方文档</a>，详细描述了什么是循环依赖</p><p>Spring中利用缓存机制解决循环依赖，但仅限于<code>单例</code>的情况，因为多例没有缓存实例，所以无法解决，直接抛出异常。</p><h2 id="场景再现"><a href="#场景再现" class="headerlink" title="场景再现"></a>场景再现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TeacherServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">TeacherService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TeacherService teacherService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到这两个类相互注入对方的引用，当我们运行程序时，会发现并没有抛出任何异常(本次测试环境SpringBoot版本：<code>2.3.4.RELEASE</code>),但当我们切换到高版本的SpringBoot项目时，启动项目会出现如下错误：</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202207282211010.png" alt="image-20220728221148657"></p><p>原因：在SpringBoot2.6以上的版本，已经不默认支持对于<code>循环依赖</code>的支持了，当我们想要开启支持循环依赖时，可以在配置文件中加入如下配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">main:</span></span><br><span class="line"><span class="attr">allow-circular-references:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>但是我们不建议这么做，毕竟Spring官方都默认禁用掉了</p><h2 id="Spring如何解决循环依赖"><a href="#Spring如何解决循环依赖" class="headerlink" title="Spring如何解决循环依赖"></a>Spring如何解决循环依赖</h2><p>在Spring中提供了三层的Map机制来解决中间状态的可见问题，通过源码我们可以看到：</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202207282224955.png" alt="image-20220728222428579"></p><p>Spring维护了三个Map，也就是我们经常说的三级缓存</p><ul><li>singletonObjects：俗称单例池，缓存创建完成的单例Bean</li><li>singletonFactories：映射创建Bean的原始工厂</li><li>earlySingletonObjects：映射Bean的早期引用，也就是说这个Map里的Bean不是完整的，只是完成了实例化，但还没有初始化</li></ul><p>具体详细解决方法我们在下篇详细讲解</p><h2 id="Async注解"><a href="#Async注解" class="headerlink" title="@Async注解"></a>@Async注解</h2><p><code>@Async</code>注解是Spring为我们提供的异步调用的注解，<code>@Async</code>可以作用到类或者方法上，标记了<code>@Async</code>注解的方法将会在独立的线程中被执行，调用者无需等待它的完成，即可继续其他的操作。</p><p>我们对第一个例子进行修改（SpringBoot版本为：2.3.4）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TeacherServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">TeacherService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">teacherMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;teacher&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TeacherService teacherService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">userMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        teacherService.teacherMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们运行项目的时候，会发现出现了如下报错：</p><blockquote><p>org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name ‘teacherServiceImpl’: Bean with name ‘teacherServiceImpl’ has been injected into other beans [userServiceImpl] in its raw version as part of a circular reference, but has eventually been wrapped. This means that said other beans do not use the final version of the bean. This is often the result of over-eager type matching - consider using ‘getBeanNamesForType’ with the ‘allowEagerInit’ flag turned off, for example.</p></blockquote><p>总之是说你的程序出现了循环依赖，这个时候我们可能就会有疑问了，Spring不是已经帮我们解决了循环依赖问题吗，而且版本号也是2.6之前的呀，为什么还会出现报错？</p><p>那么循环依赖的问题到底是怎么产生的呢？</p><p>我们知道，标注了@Async注解的Bean最后会生成一个<code>代理对象</code>,通过上述代码，我们来分析原因：</p><ul><li>UserService初始化，UserService实例化完成后给UserService的TeacherService进行赋值</li><li>TeacherService初始化，TeacherService实例化完成后给TeacherService的依赖属性UserService赋值</li><li>此时我们已经发现了注入到UserService对象的TeacherService属性是原始的实例，但是UserService初始化后已经是一个包装过后的实例了（cglib）,因为spring默认是单例，这肯定会出问题。初始化完后，发现spring还会进行一次对比，源码如下：</li></ul><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202207282247408.png" alt="image-20220728224726028"></p><p>在<code>doCreateBean</code>核心方法中我们可以看到，代理对象的引用发生变化，导致spring认为有两个<code>不同版本</code>的bean加入到了容器内，对于这种情况spring也无能为力，只得报错。</p><p>解决办法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">  <span class="comment">//注意这里！！！，具体原因，下篇分析</span></span><br><span class="line">    <span class="meta">@Lazy</span></span><br><span class="line">    <span class="keyword">private</span> TeacherService teacherService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">userMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        teacherService.teacherMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Autowired不能注入static成员属性探究</title>
      <link href="/post/7ce89293.html"/>
      <url>/post/7ce89293.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>@Autowired不能自动注入static成员属性原因探究</p></blockquote><span id="more"></span><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>我们知道，<code>静态变量</code>是属于类本身的信息，随着类的加载而加载，当类加载器加载静态变量时，Spring上下文环境还没有被加载，所以我们的静态属性无法自动注入，这是因为初始化类的加载顺序导致的，程序启动时会加载根路径下的所有类，<font color="red">不管这个类是否会用到都会去加载</font>,首先会去初始化<code>静态变量</code>和执行<code>静态代码块</code>，而这个时候是没有对象这个概念的，如果这个原因不足以说服你的话，接下来我们来看一段源码。</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202207280021650.png" alt="image-20220728002116021"></p><p>由此我们可以看出，在处理<code>@Autowired</code>注解的时候会直接过滤掉静态方法和变量</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><h4 id="1-使用-PostConstruct注解"><a href="#1-使用-PostConstruct注解" class="headerlink" title="1.使用@PostConstruct注解"></a>1.使用@PostConstruct注解</h4><p>@PostConstruct用来修饰一个非静态的void方法，当bean创建完成的时候，会后置执行@PostConstruct修饰的方法，并且只运行一次。</p><h4 id="2-使用Setter方法"><a href="#2-使用Setter方法" class="headerlink" title="2.使用Setter方法"></a>2.使用Setter方法</h4><p>将@Autowired注解加在Setter方法上，在方法体内对静态属性赋值</p>]]></content>
      
      
      <categories>
          
          <category> 拓展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis执行器</title>
      <link href="/post/54f0f33f.html"/>
      <url>/post/54f0f33f.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Mybatis执行器</p></blockquote><span id="more"></span><p>Mybatis执行过程</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202207231803134.png" alt="image-20220723180338513"></p><h2 id="执行器实现"><a href="#执行器实现" class="headerlink" title="执行器实现"></a>执行器实现</h2><h4 id="简单执行器：SimpleExecutor"><a href="#简单执行器：SimpleExecutor" class="headerlink" title="简单执行器：SimpleExecutor"></a>简单执行器：SimpleExecutor</h4><p>多次调用方法，每次都会创建一个新的预处理器（PrepareSatement）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SqlSessionFactoryBuilder</span> <span class="variable">factoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">build</span> <span class="operator">=</span> factoryBuilder.build(xxx.class.getResourceAsStream(<span class="string">&quot;/mybatis-config/xml&quot;</span>));</span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> build.getConfiguration();</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;xx&quot;</span>, <span class="string">&quot;xx&quot;</span>, <span class="string">&quot;xx&quot;</span>);</span><br><span class="line">        <span class="type">JdbcTransaction</span> <span class="variable">jdbcTransaction</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTransaction</span>(connection);</span><br><span class="line"></span><br><span class="line">        <span class="type">SimpleExecutor</span> <span class="variable">simpleExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleExecutor</span>(configuration, jdbcTransaction);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5个参数 1.SQL声明映射 2.参数 3.行范围 4.结果处理器 5.动态SQL语句</span></span><br><span class="line">        <span class="type">MappedStatement</span> <span class="variable">ms</span> <span class="operator">=</span> configuration.getMappedStatement(<span class="string">&quot;xx.test.myabtis.UserMapper.selectById&quot;</span>);</span><br><span class="line">        List&lt;Object&gt; list = simpleExecutor.doQuery(ms, <span class="number">10</span>, RowBounds.DEFAULT, SimpleExecutor.NO_RESULT_HANDLER, ms.getBoundSql(<span class="number">10</span>));</span><br><span class="line">        System.out.println(list.get(<span class="number">0</span>));</span><br></pre></td></tr></table></figure><h4 id="重用执行器：ReuseExecutor"><a href="#重用执行器：ReuseExecutor" class="headerlink" title="重用执行器：ReuseExecutor"></a>重用执行器：ReuseExecutor</h4><p>相同的SQL只会执行一次预处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SqlSessionFactoryBuilder</span> <span class="variable">factoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">build</span> <span class="operator">=</span> factoryBuilder.build(xxx.class.getResourceAsStream(<span class="string">&quot;/mybatis-config/xml&quot;</span>));</span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> build.getConfiguration();</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;xx&quot;</span>, <span class="string">&quot;xx&quot;</span>, <span class="string">&quot;xx&quot;</span>);</span><br><span class="line">        <span class="type">JdbcTransaction</span> <span class="variable">jdbcTransaction</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTransaction</span>(connection);</span><br><span class="line"></span><br><span class="line">        <span class="type">ReuseExecutor</span> <span class="variable">reuseExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReuseExecutor</span>(configuration, jdbcTransaction);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5个参数 1.SQL声明映射 2.参数 3.行范围 4.结果处理器 5.动态SQL语句</span></span><br><span class="line">        <span class="type">MappedStatement</span> <span class="variable">ms</span> <span class="operator">=</span> configuration.getMappedStatement(<span class="string">&quot;xx.test.myabtis.UserMapper.selectById&quot;</span>);</span><br><span class="line">        List&lt;Object&gt; list = reuseExecutor.doQuery(ms, <span class="number">10</span>, RowBounds.DEFAULT, SimpleExecutor.NO_RESULT_HANDLER, ms.getBoundSql(<span class="number">10</span>));</span><br><span class="line">        System.out.println(list.get(<span class="number">0</span>));</span><br></pre></td></tr></table></figure><blockquote><p>区别：简单执行器，每次调用都会创建一个preparestatement，然后预编译，而重用执行器使用了一个map存储statement，每次调用，直接从map里找，找到了就复用，不用再去编译SQL</p></blockquote><h4 id="批处理执行器-BatchExecutor"><a href="#批处理执行器-BatchExecutor" class="headerlink" title="批处理执行器:BatchExecutor"></a>批处理执行器:BatchExecutor</h4><p>批处理修改必须每次执行flushStatements才会生效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SqlSessionFactoryBuilder</span> <span class="variable">factoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">build</span> <span class="operator">=</span> factoryBuilder.build(xxx.class.getResourceAsStream(<span class="string">&quot;/mybatis-config/xml&quot;</span>));</span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> build.getConfiguration();</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;xx&quot;</span>, <span class="string">&quot;xx&quot;</span>, <span class="string">&quot;xx&quot;</span>);</span><br><span class="line">        <span class="type">JdbcTransaction</span> <span class="variable">jdbcTransaction</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTransaction</span>(connection);</span><br><span class="line"></span><br><span class="line">        <span class="type">BatchExecutor</span> <span class="variable">batchExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BatchExecutor</span>(configuration, jdbcTransaction);</span><br><span class="line"><span class="type">MappedStatement</span> <span class="variable">ms</span> <span class="operator">=</span> configuration.getMappedStatement(<span class="string">&quot;xx.test.myabtis.UserMapper.setName&quot;</span>);</span><br><span class="line">       </span><br><span class="line">        Map param=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">param.put(<span class="string">&quot;arg0&quot;</span>,<span class="number">10</span>);</span><br><span class="line">param.put(<span class="string">&quot;arg1&quot;</span>,<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">batchExecutor.doUpdate(ms,param);</span><br><span class="line">batchExecutor.doUpdate(ms,param);</span><br><span class="line"><span class="comment">//参数  bool isRollback</span></span><br><span class="line">        batchExecutor.doFlushStatements(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h4 id="基础执行器-BaseExecutor"><a href="#基础执行器-BaseExecutor" class="headerlink" title="基础执行器:BaseExecutor"></a>基础执行器:BaseExecutor</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SqlSessionFactoryBuilder</span> <span class="variable">factoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">build</span> <span class="operator">=</span> factoryBuilder.build(xxx.class.getResourceAsStream(<span class="string">&quot;/mybatis-config/xml&quot;</span>));</span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> build.getConfiguration();</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;xx&quot;</span>, <span class="string">&quot;xx&quot;</span>, <span class="string">&quot;xx&quot;</span>);</span><br><span class="line">        <span class="type">JdbcTransaction</span> <span class="variable">jdbcTransaction</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTransaction</span>(connection);</span><br><span class="line"></span><br><span class="line">        Executor executor=<span class="keyword">new</span> <span class="title class_">SimpleExecutor</span>(configuration,jdbcTransaction);</span><br><span class="line">executor.query(ms,<span class="number">10</span>,RowBounds.DEFAULT,Executor.NO_RESULT_HANDLER);</span><br><span class="line">executor.query(ms,<span class="number">10</span>,RowBounds.DEFAULT,Executor.NO_RESULT_HANDLER);</span><br></pre></td></tr></table></figure><h4 id="二级缓存执行器-CachingExecutor"><a href="#二级缓存执行器-CachingExecutor" class="headerlink" title="二级缓存执行器:CachingExecutor"></a>二级缓存执行器:CachingExecutor</h4><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202207231940067.png" alt="image-20220723194003225"></p><p>装饰者模式：在不改变原有类结构和继承的情况下，通过包装原对象去扩展一个新功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SqlSessionFactoryBuilder</span> <span class="variable">factoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">build</span> <span class="operator">=</span> factoryBuilder.build(xxx.class.getResourceAsStream(<span class="string">&quot;/mybatis-config/xml&quot;</span>));</span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> build.getConfiguration();</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;xx&quot;</span>, <span class="string">&quot;xx&quot;</span>, <span class="string">&quot;xx&quot;</span>);</span><br><span class="line">        <span class="type">JdbcTransaction</span> <span class="variable">jdbcTransaction</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTransaction</span>(connection);</span><br><span class="line"><span class="comment">//二级缓存相关逻辑</span></span><br><span class="line">        Executor exector=<span class="keyword">new</span> <span class="title class_">CachingExecutor</span>(configuration,jdbcTransaction);</span><br><span class="line">executor.commit(<span class="literal">true</span>);<span class="comment">//1.先走二级缓存 2，再走一级缓存</span></span><br><span class="line">exector.query(ms,<span class="number">10</span>,RowBounds.DEFAULT,Executor.NO_RESULT_HANDLER);</span><br><span class="line">exector.query(ms,<span class="number">10</span>,RowBounds.DEFAULT,Executor.NO_RESULT_HANDLER);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Optional使用详解</title>
      <link href="/post/3b325e52.html"/>
      <url>/post/3b325e52.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Optional详解</p></blockquote><span id="more"></span><h2 id="1、如何为缺失的值建模"><a href="#1、如何为缺失的值建模" class="headerlink" title="1、如何为缺失的值建模"></a>1、如何为缺失的值建模</h2><p>假设你需要处理下面这样的一个嵌套对象，这是一个拥有汽车以及汽车保险的客户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Car car;</span><br><span class="line">    <span class="keyword">public</span> Car <span class="title function_">getCar</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> car;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Insurance insurance;</span><br><span class="line">    <span class="keyword">public</span> Insurance <span class="title function_">getInsurance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> insurance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Insurance</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么下面这段代码有什么问题呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getCarInsuranceName</span><span class="params">(Person person)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> person.getCar().getInsurance().getName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码看起来似乎没有任何问题，但是如果任何一个调用过程出现null的话，就会抛出<font color="orange">NullPointerException</font>终止程序的运行</p><p>下面这个例子是我们试图避免空指针的第一次尝试—深层质疑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getCarInsuranceName</span><span class="params">(Person person)</span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (person!=<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> person.getCar();</span><br><span class="line">        <span class="keyword">if</span> (car!=<span class="literal">null</span>)&#123;</span><br><span class="line">           <span class="type">Insurance</span> <span class="variable">insurance</span> <span class="operator">=</span> car.getInsurance();</span><br><span class="line">           <span class="keyword">if</span>(insurance!=<span class="literal">null</span>)&#123;</span><br><span class="line">               <span class="keyword">return</span> insurance.getName();</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Unknown&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者是第二种尝试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getCarInsuranceName</span><span class="params">(Person person)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (person==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Unknown&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> person.getCar();</span><br><span class="line">    <span class="keyword">if</span> (car==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Unknown&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Insurance</span> <span class="variable">insurance</span> <span class="operator">=</span> car.getInsurance();</span><br><span class="line">    <span class="keyword">if</span> (insurance==<span class="literal">null</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="string">&quot;Unknown&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> insurance.getName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是如果我们忘记其中任何一次检查的话，还是会出现空指针问题</p><h2 id="2、Optional类入门"><a href="#2、Optional类入门" class="headerlink" title="2、Optional类入门"></a>2、Optional类入门</h2><p>接上述例子，如果你知道一个人可能有也可能没有汽车，那么Person类内部的car变量就不应该声明为Car类型，正确的设计是，将car变量声明为<font color="orange">Optional\<Car></font>类型</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202207092136838.png" alt="image-20220709213651702"></p><p>变量存在时，Optional类只是对类简单封装，变量不存在时，缺失的值会被建模成一个“空”的Optional对象，由方法<font color="orange">Optional.empty()</font>返回。你可能还有疑惑，null引用和Optional.empty()有什么本质的区别吗？从语义上将，你可以把他们当做一回事，但是实际中他们之间的差别是非常大的：如果你尝试解引用一个null，那么一定会触发NullPointerException，不过使用Optional.empty()就完全没这回事，它是Optional类的一个有效对象。</p><p>使用Optional而不是null的一个非常重要而又实际的语义区别是，第一个例子中，我们在声明变量的时候使用的是<font color="orange">Optional<Car></font>类型而不是Car类型，这句声明非常清楚地表明了这里发生变量的缺失是允许的。</p><p>牢记这些原则，我们可以使用Optional类对代码进行重构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Optional&lt;Car&gt; car;</span><br><span class="line">    <span class="keyword">public</span> Optional&lt;Car&gt; <span class="title function_">getCar</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> car;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Optional&lt;Insurance&gt; insurance;</span><br><span class="line">    <span class="keyword">public</span> Optional&lt;Insurance&gt; <span class="title function_">getInsurance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> insurance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Insurance</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、Optional的几种模式"><a href="#3、Optional的几种模式" class="headerlink" title="3、Optional的几种模式"></a>3、Optional的几种模式</h2><h4 id="3-1创建Optional对象"><a href="#3-1创建Optional对象" class="headerlink" title="3.1创建Optional对象"></a>3.1创建Optional对象</h4><h5 id="1、声明一个空的Optional"><a href="#1、声明一个空的Optional" class="headerlink" title="1、声明一个空的Optional"></a>1、声明一个空的Optional</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Car&gt; potCar=Optional.empty()</span><br></pre></td></tr></table></figure><h5 id="2、依据一个非空值创建Optional"><a href="#2、依据一个非空值创建Optional" class="headerlink" title="2、依据一个非空值创建Optional"></a>2、依据一个非空值创建Optional</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Car&gt; optCar=Optional.of(car)</span><br></pre></td></tr></table></figure><p>如果car是一个null，这段代码就会立即抛出一个NullPointerException，而不是等到你试图访问car的属性时才返回一个错误</p><h5 id="3、可接受null的Optional"><a href="#3、可接受null的Optional" class="headerlink" title="3、可接受null的Optional"></a>3、可接受null的Optional</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Car&gt; optCar=Optional.ofNullable(car)</span><br></pre></td></tr></table></figure><h4 id="3-2使用map从Optional对象中提取和转换值"><a href="#3-2使用map从Optional对象中提取和转换值" class="headerlink" title="3.2使用map从Optional对象中提取和转换值"></a>3.2使用map从Optional对象中提取和转换值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Insurance&gt; optInsurance=Optional.ofNullanle(insurance);</span><br><span class="line">Optional&lt;String&gt; name=optInsurance.map(Insurance::getName);</span><br></pre></td></tr></table></figure><p>如果Optional包含一个值，那函数就将该值作为参数传递给map，对该值进行转换，如果Optional为空，就什么也不做</p><p>上述代码看起来挺有用的，但是怎么才能应用起来完成第一个模块里的需求呢？为了实现同样的功能，我们需要使用<font color="orange">flatMap</font>方法</p><h4 id="3-3使用flatMap链接Optional对象"><a href="#3-3使用flatMap链接Optional对象" class="headerlink" title="3.3使用flatMap链接Optional对象"></a>3.3使用flatMap链接Optional对象</h4><p>由于我们刚学会如何使用map，我们可能会写出这样的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Person&gt; optPerson = Optional.of(person);</span><br><span class="line">        Optional&lt;String&gt; name = </span><br><span class="line">                 optPerson.map(Person::getCar)</span><br><span class="line">                .map(Car::getInsurance)</span><br><span class="line">                .map(Insurance::getName);</span><br></pre></td></tr></table></figure><p>不幸的是，这段代码无法通过编译。这是为什么呢？optPerson是Optional<Person>类型的变量，调用map方法应该没有问题。但getCar返回的是一个Optional<Car>类型的对象，这意味着map操作的结果是一个Optional<Optional<Car>&gt;类型的对象。因此，它对getInsurance的调用是非法的，因为最外面的Optional对象包含了另一个Optional对象的值，他当然不会支持getInsurance方法</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202207092223410.png" alt="image-20220709222354371"></p><p>如何解决这个问题呢？我们可以回顾一下Stream使用过的模式：<font color="orange">flatMap方法</font>。使用流时，flatMap方法接收一个函数作为参数，这个函数的返回值是另外一个流。这个方法会应用到流中的每一个元素，最终形成一个新的流。换句话说，由方法生成个各个流会被合并或者扁平成为一个单一的流。这里你希望的结果也是类似的，但是你想要的是将两层的Optional合并为一个。</p><h5 id="1、使用Optional获取car的保险公司名称"><a href="#1、使用Optional获取car的保险公司名称" class="headerlink" title="1、使用Optional获取car的保险公司名称"></a>1、使用Optional获取car的保险公司名称</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getCarInsuranceName</span><span class="params">(Optional&lt;Person&gt; person)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> person.flatMap(Person::getCar)</span><br><span class="line">            .flatMap(Car::getInsurance)</span><br><span class="line">            .map(Insurance::getName)</span><br><span class="line">            .orElse(<span class="string">&quot;Unknown&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2、使用Optional解引用串接的Person-Car-Insurance"><a href="#2、使用Optional解引用串接的Person-Car-Insurance" class="headerlink" title="2、使用Optional解引用串接的Person/Car/Insurance"></a>2、使用Optional解引用串接的Person/Car/Insurance</h5><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202207092332220.png" alt="image-20220709233253150"></p><p>关于flatMap，就纯理论而言，你可以将这种合并操作简单的看成把两个Optional对象结合在一起，如果其中有一个对象为空，就构成一个空的Optional对象，如果你对一个空的Optional对象调用flatMap，结果不会发生任何变化，返回值也是个空的Optional对象。</p><h6 id="注意：在域模型中使用Optional，以及他们为什么无法序列化"><a href="#注意：在域模型中使用Optional，以及他们为什么无法序列化" class="headerlink" title="注意：在域模型中使用Optional，以及他们为什么无法序列化"></a>注意：在域模型中使用Optional，以及他们为什么无法序列化</h6><blockquote><p>由于Optional类设计时就没有特别考虑将其作为类的字段使用，因此它也并未实现Serializable接口。由于这个原因，如果你的应用使用了某些要求序列化的库或者框架，在域模型中使用Optional，有可能引发应用程序故障。然而我们相信，通过前面的介绍，你已经看到Optional声明域模型中的某些类型是个不错的注意，尤其是你需要遍历有可能全部为空或部分为空，或者可能不存在的模型时。如果你一定要实现序列化的域模型，作为替代方案，建议你想下面这个例子那样，提供一个能访问声明为Optional、变量值可能缺失的接口，如下所示：</p><p>public class Person{</p><p>​        private Car car;</p><p>​        public Optional<Car> getCarAsOptional(){</p><p>​                return Optional.ofNullable(car);</p><p>​        }</p><p>}</p></blockquote><h2 id="4、操作由Optional对象构成的Stream"><a href="#4、操作由Optional对象构成的Stream" class="headerlink" title="4、操作由Optional对象构成的Stream"></a>4、操作由Optional对象构成的Stream</h2><p><font color="orange">Java9</font>引入了Optional的stream()方法，使用该方法可以把一个含值的Optional对象转换成又该值构成的Stream对象，或者把一个空的Optional对象转换成等价的空的Stream。这一技术为典型</p>]]></content>
      
      
      <categories>
          
          <category> java8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Optional </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Async注解失效场景</title>
      <link href="/post/b57f46a5.html"/>
      <url>/post/b57f46a5.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Async注解失效场景</p></blockquote><span id="more"></span><p>​        在项目中，有的业务我们可能需要花费较长的时间才可以得到结果，这种体验对于用户来说是极其不好的，那么我们就会考虑使用异步的方式解决问题，我们首先会想到了@Async注解，避免长时间的等待，但是加上@Async注解就一定是异步执行的吗？</p><p>​        为了使用<code>@Async</code>注解,我们需要在SpringBoot的主启动类或是配置类上加<code>@EnableAsync</code>,否则@Async注解是不生效的，接下来我们可以看一个例子来体会@Async注解。</p><h5 id="service"><a href="#service" class="headerlink" title="service"></a>service</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;异步执行1&quot;</span>+Thread.currentThread().getName());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test1 Ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;异步执行2&quot;</span>+Thread.currentThread().getName());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test2 Ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="SpringBoot启动类"><a href="#SpringBoot启动类" class="headerlink" title="SpringBoot启动类"></a>SpringBoot启动类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncDemoApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> SpringApplication.run(FastJsonDemoApplication.class, args);</span><br><span class="line">        <span class="type">MyService</span> <span class="variable">myService</span> <span class="operator">=</span> applicationContext.getBean(MyService.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;main线程开始执行&quot;</span>+Thread.currentThread().getName());</span><br><span class="line">        myService.test1();</span><br><span class="line">        myService.test2();</span><br><span class="line">        System.out.println(<span class="string">&quot;main线程结束执行&quot;</span>+Thread.currentThread().getName());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="程序运行结果"><a href="#程序运行结果" class="headerlink" title="程序运行结果"></a>程序运行结果</h5><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202206302239600.png" alt="image-20220630223913912"></p><p>我们可以很清楚的看到，标注了@Async注解的方式是异步去执行的！</p><p>但是我们需要注意，错误的使用@Async注解可能会导致<font color="red">不生效</font></p><h5 id="Async注解失效的场景"><a href="#Async注解失效的场景" class="headerlink" title="@Async注解失效的场景"></a>@Async注解失效的场景</h5><ol><li>异步方法使用static修饰</li><li>异步类没有使用@Component注解（或其他注解）导致Spring无法扫描到</li><li>测试异步方法不能与异步方法在同一个类中</li><li>测试类中需要从容器中获取（自动注入或手动从context获取），不能自己手动new 对象</li><li>主配置类需要加上@EnableAsync注解</li></ol><h5 id="失效原因"><a href="#失效原因" class="headerlink" title="失效原因"></a>失效原因</h5><p>我们以异步方法与调用者在同一个类中失效场景举例</p><p>spring 在扫描bean的时候会扫描方法上是否包含@Async注解，如果包含，spring会为这个bean动态地生成一个子类（即代理类，proxy），代理类是继承原来那个bean的。此时，当这个有注解的方法被调用的时候，实际上是由代理类来调用的，代理类在调用时增加异步作用。然而，如果这个有注解的方法是被同一个类中的其他方法调用的，那么该方法的调用并没有通过代理类，而是直接通过原来的那个bean，所以就没有增加异步作用，我们看到的现象就是@Async注解无效。</p>]]></content>
      
      
      <categories>
          
          <category> 拓展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Async </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL中的锁</title>
      <link href="/post/f312680c.html"/>
      <url>/post/f312680c.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>MySQL中的锁</p></blockquote><span id="more"></span><h2 id="1、MySQL中锁的分类"><a href="#1、MySQL中锁的分类" class="headerlink" title="1、MySQL中锁的分类"></a>1、MySQL中锁的分类</h2><ol><li>全局锁：锁定数据库中所有的表</li><li>表级锁：每次操作锁住整张表</li><li>行级锁：每次操作锁住对应的行数据</li></ol><h2 id="2、全局锁"><a href="#2、全局锁" class="headerlink" title="2、全局锁"></a>2、全局锁</h2><ul><li><p>介绍</p><p>全局锁就是对整个数据库实例加锁，加锁后整个实例就处于只读状态，后续的DML的写语句，DDL语句，已经更新操作的事务提交语句都将被阻塞</p><p>其典型的使用场景是：<font color="orange">做全库的逻辑备份，对所有的表进行锁定，从而获取一致性视图，保证数据的完整性</font></p></li><li><p>加全局锁命令：<font color="orange">flush tables with read lock;</font></p></li><li><p>解锁命令：<font color="orange">unlock tables;</font></p></li><li><p>特点</p><ul><li>如果在主库上备份，那么在备份期间都不能执行更新</li><li>如果在从库上备份，那么在备份期间从库不能执行主库同步过来的二进制日志（binlog），会导致主从延迟</li></ul></li><li><p>注意：在InnoDB存储引擎中，我们可以在备份时加上参数<font color="orange">–signal-transaction</font>参数来完成不加锁的一致性数据备份，例如<font color="orange">mysqldump –signal-transaction -uroot -pxxxx 库名 &gt;存储地址/文件名.sql</font></p></li></ul><h2 id="3、表级锁"><a href="#3、表级锁" class="headerlink" title="3、表级锁"></a>3、表级锁</h2><ul><li>介绍：表级锁，每次操作锁住整张表。锁的粒度大，发生锁冲突的概率极高，并发度最低。应用在MyISAM、InnoDB、BDB等存储引擎中</li><li>分类<ul><li>表锁</li><li>元数据锁</li><li>意向锁</li></ul></li></ul><h4 id="3-1表锁"><a href="#3-1表锁" class="headerlink" title="3.1表锁"></a>3.1表锁</h4><ol><li>表共享读锁（read lock）<font color="orange">自己也不能写，只能读,其他的也只能读</font></li><li>表独占写锁（write lock）<font color="orange">自己可以读，也可以写，其他的不能读也不能写</font></li><li>语法：<ol><li>加锁：lock tables 表名  read/write</li><li>解锁：unlock tables/客户端断开连接</li></ol></li></ol><h4 id="3-2元数据锁（MDL"><a href="#3-2元数据锁（MDL" class="headerlink" title="3.2元数据锁（MDL)"></a>3.2元数据锁（MDL)</h4><p>MDL加锁过程是系统自动控制，无需显式使用，在访问一张表的时候会自动加上.MDL锁主要作用是维护表元数据的数据一致性，在表上有活动事务的时候，不可对元数据进行写入操作，<font color="orange">为了避免DML与DDL冲突，保证读写的正确性</font></p><p>在MySQL5.5中引入MDL，当对一张表进行增删改查的时候，加MDL读锁（共享）；当对表结构进行变更操作的时候，加MDL写锁（排他）</p><div class="table-container"><table><thead><tr><th>SQL</th><th>锁类型</th><th>说明</th></tr></thead><tbody><tr><td>lock tables xxx read/write</td><td>share_read_only/share_no_read_write</td><td></td></tr><tr><td>select   select…lock in share mode</td><td>share_read</td><td>与share_read、share_write兼容，与exclusive互斥</td></tr><tr><td>insert  update  delete select … for update</td><td>share_write</td><td>与share_read、share_write兼容，与exclusive互斥</td></tr><tr><td>alter table ….</td><td>exclusive</td><td>与其他的都互斥</td></tr></tbody></table></div><h4 id="3-3意向锁"><a href="#3-3意向锁" class="headerlink" title="3.3意向锁"></a>3.3意向锁</h4><p>为了避免DML在执行的时候，加的行锁与表锁的冲突，在InnoDB中引入了意向锁，使得表锁不用检查每行数据是否加锁，使用意向锁来减少表锁的检查  </p><ol><li>意向共享锁(IS)：由select … lock in share mode添加</li><li>意向排他锁(IX)：由insert  update  delete select…for update添加</li></ol><p>兼容性：</p><ol><li>意向共享锁：与表锁共享锁(read)兼容，与表锁排它锁(write)互斥</li><li>意向排它锁：与表锁共享锁(read)及排它锁(write)都互斥。意向锁之间不会互斥</li></ol><h2 id="4、行级锁"><a href="#4、行级锁" class="headerlink" title="4、行级锁"></a>4、行级锁</h2><p>行级锁：每次操作锁住对应的行数据。锁的粒度最小，发生锁冲突的概率最低，并发度最高。应用在InnoDB存储引擎中</p><p>InnoDB的数据是基于索引组织的，行锁是通过对索引上的索引项加锁实现的，而不是对记录加的锁。对于行级锁，主要分为三类：</p><ol><li>行锁（Record Lock）：锁定单个行记录的锁，防止其他事务对此进行update和delete。在RR和RC隔离级别下都支持</li><li>间隙锁（Gap Lock）：锁定索引记录间隙（不包含该记录），确保索引记录间隙不变，防止其他事务在这个间隙进行insert，产生幻读。在RR隔离级别下支持</li><li>临间锁（Next-Key Lock）：行锁和间隙锁的组合，同时锁住数据，并锁住数据前面的间隙。在RR隔离级别下支持</li></ol><h4 id="4-1行锁"><a href="#4-1行锁" class="headerlink" title="4.1行锁"></a>4.1行锁</h4><ol><li>共享锁（s）：允许一个事务读一行，阻止其他事物获得相同数据集的排它锁</li><li>排它锁（x）：允许获取排它锁的事务更新数据，阻止其他事务获得相同数据集的共享锁和排它锁</li></ol><div class="table-container"><table><thead><tr><th>SQL</th><th>行锁类型</th><th></th></tr></thead><tbody><tr><td>INSERT</td><td>排它锁</td><td>自动加锁</td></tr><tr><td>UPDATE</td><td>排它锁</td><td>自动加锁</td></tr><tr><td>DELETE</td><td>排它锁</td><td>自动加锁</td></tr><tr><td>SELECT</td><td>不加任何锁</td><td></td></tr><tr><td>SELECT…LOCK IN SHARE MODE</td><td>共享锁</td><td>需要手动</td></tr><tr><td>SELECT…FOR UPDATE</td><td>排它锁</td><td>需要手动</td></tr></tbody></table></div><p>注意：</p><p>默认情况下，InnoDB在RR事务隔离级别下，InnoDB使用next-key锁进行搜索和索引扫描，防止幻读</p><ol><li>针对唯一索引进行检索时，对已经存在的记录进行等值匹配时，将会自动优化为行锁</li><li>InnoDB的行锁是针对索引加的锁，不通过索引条件检索数据，那么InnoDB将对表中的所有记录加锁，此时就会升级为<font color="red">表锁</font></li></ol><h4 id="4-2间隙锁和临间锁"><a href="#4-2间隙锁和临间锁" class="headerlink" title="4.2间隙锁和临间锁"></a>4.2间隙锁和临间锁</h4><p>默认情况下，InnoDB在RR事务隔离级别运行，InnoDB使用next-key锁进行搜索和索引扫描，以防止幻读</p><ol><li>索引上的等值查询（唯一索引），给不存在的记录加锁时，优化为间隙锁</li><li>索引上的等值查询（普通索引），向右遍历时最后一个值不满足查询需求时，next-key退化为间隙锁</li><li>索引上的范围查询（唯一索引）–会访问到不满足条件的第一个值为止</li></ol><p>注意：间隙锁唯一目的是防止其他事务插入间隙，间隙锁可以共存，一个事务采用的间隙锁不会组织另一个事务在同一间隙上采用间隙锁</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FastJson的使用</title>
      <link href="/post/4502a28e.html"/>
      <url>/post/4502a28e.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>FastJson的使用</p></blockquote><span id="more"></span><h2 id="什么是Json"><a href="#什么是Json" class="headerlink" title="什么是Json"></a>什么是Json</h2><p>JSON（<a href="https://baike.baidu.com/item/JavaScript">JavaScript</a> Object Notation, JS对象简谱）是一种轻量级的数据交换格式。它基于 <a href="https://baike.baidu.com/item/ECMAScript">ECMAScript</a>（European Computer Manufacturers Association, 欧洲计算机协会制定的js规范）的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</p><h2 id="Json格式"><a href="#Json格式" class="headerlink" title="Json格式"></a>Json格式</h2><ol><li><p>数组格式</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span><span class="string">&quot;a1&quot;</span><span class="punctuation">,</span><span class="string">&quot;a2&quot;</span><span class="punctuation">,</span><span class="number">100</span><span class="punctuation">,</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure></li><li><p>对象格式</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;userName&quot;</span><span class="punctuation">:</span><span class="string">&quot;xiaoying&quot;</span><span class="punctuation">,</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">12</span><span class="punctuation">,</span><span class="attr">&quot;isMan&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>数组和对象嵌套</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;xiaoying&quot;</span><span class="punctuation">,</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">12</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;ws&quot;</span><span class="punctuation">,</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">22</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;k1&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;xiaoming&quot;</span><span class="punctuation">,</span><span class="string">&quot;xiaohong&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;k2&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;apple&quot;</span><span class="punctuation">,</span><span class="string">&quot;banana&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="FastJson介绍"><a href="#FastJson介绍" class="headerlink" title="FastJson介绍"></a>FastJson介绍</h2><p>FastJson是阿里巴巴的开源JSON解析库，可以解析JSON格式的字符串，支持将Java Bean序列化为JSON字符串，也可以从JSON字符串反序列化到Java Bean</p><p>优点：</p><ol><li>速度快</li><li>使用广泛</li><li>测试完备，质量稳定</li><li>使用简单</li><li>功能完备</li></ol><h2 id="FastJson序列化API"><a href="#FastJson序列化API" class="headerlink" title="FastJson序列化API"></a>FastJson序列化API</h2><p>序列化：将Java对象转换为Json格式字符串的过程</p><h4 id="1-java对象转Json字符串"><a href="#1-java对象转Json字符串" class="headerlink" title="1.java对象转Json字符串"></a>1.java对象转Json字符串</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.setId(<span class="number">1</span>);</span><br><span class="line">        student.setName(<span class="string">&quot;小樱&quot;</span>);</span><br><span class="line">        student.setAge(<span class="number">18</span>);</span><br><span class="line">        student.setEmail(<span class="string">&quot;123217@163.com&quot;</span>);</span><br><span class="line">        student.setBirthday(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将Student对象序列化为Json字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSON.toJSONString(student);</span><br><span class="line">        <span class="comment">//序列化后的json字符串===&gt;&#123;&quot;age&quot;:18,&quot;birthday&quot;:1656338838530,&quot;email&quot;:&quot;123217@163.com&quot;,&quot;id&quot;:1,&quot;name&quot;:&quot;小樱&quot;&#125;</span></span><br><span class="line">        log.info(<span class="string">&quot;序列化后的json字符串===&gt;&#123;&#125;&quot;</span>,jsonString);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="2-List集合转Json字符串"><a href="#2-List集合转Json字符串" class="headerlink" title="2.List集合转Json字符串"></a>2.List集合转Json字符串</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testListToJson</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Student&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        list.add(student1);</span><br><span class="line">        list.add(student2);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSON.toJSONString(list);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * [&#123;&quot;age&quot;:18,&quot;birthday&quot;:1656339162858,&quot;email&quot;:&quot;123217@163.com&quot;,&quot;id&quot;:1,&quot;name&quot;:&quot;小樱&quot;&#125;,</span></span><br><span class="line"><span class="comment">         * &#123;&quot;age&quot;:10,&quot;birthday&quot;:1656339162858,&quot;email&quot;:&quot;sada@163.com&quot;,&quot;id&quot;:2,&quot;name&quot;:&quot;Tomcat&quot;&#125;]</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        log.info(<span class="string">&quot;转换后的===&gt;&#123;&#125;&quot;</span>,jsonString);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="3-Map集合转Json字符串"><a href="#3-Map集合转Json字符串" class="headerlink" title="3.Map集合转Json字符串"></a>3.Map集合转Json字符串</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testMapToJson</span><span class="params">()</span>&#123;</span><br><span class="line">   <span class="comment">//创建对象</span></span><br><span class="line"></span><br><span class="line">   Map&lt;String,Student&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">   map.put(<span class="string">&quot;student1&quot;</span>,student1);</span><br><span class="line">   map.put(<span class="string">&quot;student2&quot;</span>,student2);</span><br><span class="line"></span><br><span class="line">   <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSON.toJSONString(map);</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * &#123;&quot;student2&quot;:&#123;&quot;age&quot;:10,&quot;birthday&quot;:1656339349977,&quot;email&quot;:&quot;sada@163.com&quot;,&quot;id&quot;:2,&quot;name&quot;:&quot;Tomcat&quot;&#125;,</span></span><br><span class="line"><span class="comment">         * &quot;student1&quot;:&#123;&quot;age&quot;:18,&quot;birthday&quot;:1656339349977,&quot;email&quot;:&quot;123217@163.com&quot;,&quot;id&quot;:1,&quot;name&quot;:&quot;小樱&quot;&#125;&#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">   log.info(<span class="string">&quot;转换后的===&gt;&#123;&#125;&quot;</span>,jsonString);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-Json字符串转Java对象"><a href="#4-Json字符串转Java对象" class="headerlink" title="4.Json字符串转Java对象"></a>4.Json字符串转Java对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testJsonToObject</span><span class="params">()</span>&#123;</span><br><span class="line">     String jsonStr=<span class="string">&quot;&#123;\&quot;age\&quot;:18,\&quot;birthday\&quot;:1656338838530,\&quot;email\&quot;:\&quot;123217@163.com\&quot;,\&quot;id\&quot;:1,\&quot;name\&quot;:\&quot;小樱\&quot;&#125;&quot;</span>;</span><br><span class="line">     <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> JSON.parseObject(jsonStr, Student.class);</span><br><span class="line">     <span class="comment">//Student(id=1, name=小樱, age=18, email=123217@163.com, birthday=Mon Jun 27 22:07:18 CST 2022)</span></span><br><span class="line">     log.info(<span class="string">&quot;student==&gt;&#123;&#125;&quot;</span>,student);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-Json字符串转List集合"><a href="#5-Json字符串转List集合" class="headerlink" title="5.Json字符串转List集合"></a>5.Json字符串转List集合</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testJsonToList</span><span class="params">()</span>&#123;</span><br><span class="line">    String jsonStr=<span class="string">&quot;[&#123;\&quot;age\&quot;:18,\&quot;birthday\&quot;:1656340046447,\&quot;email\&quot;:\&quot;123217@163.com\&quot;,\&quot;id\&quot;:1,\&quot;name\&quot;:\&quot;小樱\&quot;&#125;,&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#123;\&quot;age\&quot;:10,\&quot;birthday\&quot;:1656340046447,\&quot;email\&quot;:\&quot;sada@163.com\&quot;,\&quot;id\&quot;:2,\&quot;name\&quot;:\&quot;Tomcat\&quot;&#125;]&quot;</span>;</span><br><span class="line">    List&lt;Student&gt; students = JSON.parseArray(jsonStr, Student.class);</span><br><span class="line">    log.info(<span class="string">&quot;students==&gt;&#123;&#125;&quot;</span>,students);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-Json字符串转Map"><a href="#6-Json字符串转Map" class="headerlink" title="6.Json字符串转Map"></a>6.Json字符串转Map</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testJsonToMap</span><span class="params">()</span>&#123;</span><br><span class="line">     String jsonStr=<span class="string">&quot;&#123;\&quot;student2\&quot;:&#123;\&quot;age\&quot;:10,\&quot;birthday\&quot;:1656340204939,\&quot;email\&quot;:\&quot;sada@163.com\&quot;,\&quot;id\&quot;:2,\&quot;name\&quot;:\&quot;Tomcat\&quot;&#125;,&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;student1\&quot;:&#123;\&quot;age\&quot;:18,\&quot;birthday\&quot;:1656340204939,\&quot;email\&quot;:\&quot;123217@163.com\&quot;,\&quot;id\&quot;:1,\&quot;name\&quot;:\&quot;小樱\&quot;&#125;&#125;&quot;</span>;</span><br><span class="line">        <span class="comment">//直接进行反序列化，Map集合是没有泛型的，不安全</span></span><br><span class="line">        <span class="comment">//调用parseObject，传递参数，TypeReference类型，但由于构造方法是</span></span><br><span class="line">        <span class="comment">//protected修饰，但是我们没必要去写一个子类，使用匿名内部类即可</span></span><br><span class="line">     Map&lt;String, Student&gt; map = JSON.parseObject(jsonStr, <span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;Map&lt;String, Student&gt;&gt;() &#123;&#125;);</span><br><span class="line">     <span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">        System.out.println(key+<span class="string">&quot;::&quot;</span>+map.get(key));</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-SerializerFeature的使用"><a href="#7-SerializerFeature的使用" class="headerlink" title="7.SerializerFeature的使用"></a>7.SerializerFeature的使用</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* SerializerFeature 枚举：进行序列化时，可以自己定义特殊需求</span><br><span class="line">* JSON静态方法 toJSONString()</span><br><span class="line">* 参数1：要序列化的对象</span><br><span class="line">* 参数2：SerializerFeature枚举类型的可变参数</span><br><span class="line">* SerializerFeature枚举的常量，做序列化的个性需求</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testSerializerFeature</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.setId(<span class="number">1</span>);</span><br><span class="line">        student.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        student.setAge(<span class="number">20</span>);</span><br><span class="line">        student.setBirthday(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="comment">//student.setEmail(&quot;xxx&quot;);</span></span><br><span class="line">        <span class="comment">//fastjson序列化时，默认是不序列化空值的</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSON.toJSONString(student, SerializerFeature.WriteMapNullValue);</span><br><span class="line">        System.out.println(jsonString);</span><br><span class="line">        <span class="comment">//&#123;&quot;age&quot;:20,&quot;birthday&quot;:1656341337865,&quot;email&quot;:null,&quot;id&quot;:1,&quot;name&quot;:&quot;张三&quot;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//WriteNullStringAsEmpty 将null值序列化为&quot;&quot;</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testWriteNullStringAsEmpty</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.setId(<span class="number">1</span>);</span><br><span class="line">        student.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        student.setAge(<span class="number">20</span>);</span><br><span class="line">        student.setBirthday(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="comment">//student.setEmail(&quot;xxx&quot;);</span></span><br><span class="line">        <span class="comment">//fastjson序列化时，默认是不序列化空值的</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSON.toJSONString(student, SerializerFeature.WriteNullStringAsEmpty);</span><br><span class="line">        System.out.println(jsonString);</span><br><span class="line">        <span class="comment">//&#123;&quot;age&quot;:20,&quot;birthday&quot;:1656341337865,&quot;email&quot;:&quot;&quot;,&quot;id&quot;:1,&quot;name&quot;:&quot;张三&quot;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//WriteNullNumberAsZero 序列化null的为0</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testWriteNullNumberAsZero</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.setId(<span class="number">1</span>);</span><br><span class="line">        student.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="comment">//student.setAge(20);</span></span><br><span class="line">        student.setBirthday(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        student.setEmail(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">        <span class="comment">//fastjson序列化时，默认是不序列化空值的</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSON.toJSONString(student, SerializerFeature.WriteNullNumberAsZero);</span><br><span class="line">        System.out.println(jsonString);</span><br><span class="line">        <span class="comment">//&#123;&quot;age&quot;:0,&quot;birthday&quot;:1656341575917,&quot;email&quot;:&quot;xxx&quot;,&quot;id&quot;:1,&quot;name&quot;:&quot;张三&quot;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//WriteNullBooleanAsFalse</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testWriteNullBooleanAsFalse</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.setId(<span class="number">1</span>);</span><br><span class="line">        student.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        student.setAge(<span class="number">20</span>);</span><br><span class="line">        student.setBirthday(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        student.setEmail(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">        <span class="comment">//student.setFlag(true);</span></span><br><span class="line">        <span class="comment">//fastjson序列化时，默认是不序列化空值的</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSON.toJSONString(student, SerializerFeature.WriteNullBooleanAsFalse);</span><br><span class="line">        System.out.println(jsonString);</span><br><span class="line">        <span class="comment">//&#123;&quot;age&quot;:20,&quot;birthday&quot;:1656341790037,&quot;email&quot;:&quot;xxx&quot;,&quot;flag&quot;:false,&quot;id&quot;:1,&quot;name&quot;:&quot;张三&quot;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testWriteDateUseDateFormat_PrettyFormat</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.setId(<span class="number">1</span>);</span><br><span class="line">        student.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        student.setAge(<span class="number">20</span>);</span><br><span class="line">        student.setBirthday(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        student.setEmail(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">        <span class="comment">//student.setFlag(true);</span></span><br><span class="line">        <span class="comment">//fastjson序列化时，默认是不序列化空值的</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSON.toJSONString(student, SerializerFeature.WriteDateUseDateFormat,</span><br><span class="line">                SerializerFeature.PrettyFormat);</span><br><span class="line">        System.out.println(jsonString);</span><br><span class="line">        <span class="comment">//&#123;&quot;age&quot;:20,&quot;birthday&quot;:&quot;2022-06-27 22:59:34&quot;,&quot;email&quot;:&quot;xxx&quot;,&quot;id&quot;:1,&quot;name&quot;:&quot;张三&quot;&#125;</span></span><br><span class="line">        <span class="comment">//加上PrettyFormat后</span></span><br><span class="line">        <span class="comment">/*&#123;</span></span><br><span class="line"><span class="comment">            &quot;age&quot;:20,</span></span><br><span class="line"><span class="comment">                &quot;birthday&quot;:&quot;2022-06-27 23:00:35&quot;,</span></span><br><span class="line"><span class="comment">                &quot;email&quot;:&quot;xxx&quot;,</span></span><br><span class="line"><span class="comment">                &quot;id&quot;:1,</span></span><br><span class="line"><span class="comment">                &quot;name&quot;:&quot;张三&quot;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="8-JsonField注解"><a href="#8-JsonField注解" class="headerlink" title="8.JsonField注解"></a>8.JsonField注解</h4><p>该注解作用域方法上，字段上和参数上，可以在序列化和反序列化时进行特性功能定制</p><ol><li>注解属性：name序列化后的名字</li><li>注解属性：ordinal序列化后的顺序</li><li>注解属性：format序列化后的格式</li><li>注解属性：serialize是否序列化该字段</li><li>注解属性：deserialize是否反序列化该字段</li><li>注解属性：serialzeFeatures序列化时的特性定义</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  注解属性 name:指定序列化后的名字</span></span><br><span class="line"><span class="comment">     *  注解属性 ordinal:指定序列化后的字段顺序,属性值越小越靠前</span></span><br><span class="line"><span class="comment">     *  注解属性 format:指定序列化后的格式</span></span><br><span class="line"><span class="comment">     *  注解属性 serialize:指定是否序列化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@JSONField(name = &quot;userName&quot;,ordinal = 1)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@JSONField(ordinal = 2)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@JSONField(serialize = false)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="meta">@JSONField(format = &quot;YYYY-MM-dd&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> Boolean flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-JsonType注解"><a href="#9-JsonType注解" class="headerlink" title="9.JsonType注解"></a>9.JsonType注解</h4><p>该注解作用于类上，对该类的字段进行序列化和反序列化时的特性功能定制</p><ol><li>注解属性：includes要被序列化的字段</li><li>注解属性：orders序列化后的顺序</li><li>注解属性：serialFeatures序列化时的特性定义</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="comment">//includes:要序列化的字段</span></span><br><span class="line"><span class="comment">//order：序列化后的顺序</span></span><br><span class="line"><span class="meta">@JSONType(</span></span><br><span class="line"><span class="meta">        includes = &#123;&quot;id&quot;,&quot;name&quot;,&quot;age&quot;,&quot;address&quot;&#125;,</span></span><br><span class="line"><span class="meta">        orders = &#123;&quot;name&quot;,&quot;age&quot;,&quot;address&quot;,&quot;id&quot;&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 拓展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FastJson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stream简单使用</title>
      <link href="/post/420f7886.html"/>
      <url>/post/420f7886.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Stream简单使用</p></blockquote><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> java8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>优雅的去除请求参数中的前后空格</title>
      <link href="/post/60a16cb1.html"/>
      <url>/post/60a16cb1.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>优雅的去除请求参数中的前后空格</p></blockquote><span id="more"></span><p>我们现在有这样的一个需求，当前端传递的值传递到后端时，我们需要对一些String类型的数据进行去除首位空格的处理，我们如何实现呢？如果我们在controller代码里手动去除空格的话，会使我们的代码变得臃肿且每个controller都要写相同的逻辑，这是十分不方便的。</p><p>基于以上需求，我们有两种实现方案，本文我们先介绍一种实现思路—&gt;<font color="orange">AOP</font></p><p>我们可以在进入controller之前进行数据的处理，首先我们需要编写一个类并标注相应的注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TrimAspect</span> &#123;</span><br><span class="line">  xxxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们需要指出我们需要对哪个方法进行增强,所以我们需要定义一个切点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;execution(* work.xiaoying.validdemo.controller..*.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointCut</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们需要对参数进行解析处理，将String类型的参数进行重新赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;pointCut()&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> Object <span class="title function_">doAround</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">       <span class="comment">//这里可以获取到请求的参数</span></span><br><span class="line">       Object[] arr = pjp.getArgs();</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; ++i) &#123;</span><br><span class="line">           <span class="comment">//对request请求做单独的处理</span></span><br><span class="line">           <span class="keyword">if</span> (arr[i] <span class="keyword">instanceof</span> HttpServletRequest) &#123; </span><br><span class="line">               <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) arr[i];</span><br><span class="line">               Map&lt;String, String[]&gt; last = request.getParameterMap();</span><br><span class="line">               Map&lt;String, String[]&gt; newString = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String[]&gt;();</span><br><span class="line">               <span class="keyword">if</span> (m != <span class="literal">null</span>) &#123;</span><br><span class="line">                   <span class="keyword">for</span> (Map.Entry&lt;String, String[]&gt; entry : last.entrySet()) &#123;</span><br><span class="line">                       <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">                       String[] value = entry.getValue();</span><br><span class="line">                       <span class="keyword">if</span> (value == <span class="literal">null</span>) <span class="keyword">continue</span>;</span><br><span class="line">                       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; value.length; ++j) &#123;</span><br><span class="line">                           <span class="type">String</span> <span class="variable">temp</span> <span class="operator">=</span> value[i].trim();</span><br><span class="line">                           value[i] = temp.length() == <span class="number">0</span> ? <span class="literal">null</span> : temp;</span><br><span class="line">                       &#125;</span><br><span class="line">                       newString.put(key, value);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">// 因为我们无法去改变getParameterMap的返回值</span></span><br><span class="line">               <span class="comment">// 所以对里面的值去除空格是无效的</span></span><br><span class="line">               <span class="comment">// 但是我们可以把参数的值去除空格之后把值放入setAttribute里面</span></span><br><span class="line">               <span class="comment">// 这样request对象就携带了去除空格之后的值</span></span><br><span class="line">               request.setAttribute(<span class="string">&quot;removing result string&quot;</span>, newString);</span><br><span class="line">               arr[i] = request;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="comment">// 考虑到类里面还有类 这里采用递归的方式处理</span></span><br><span class="line">               <span class="keyword">if</span> (<span class="literal">null</span> != arr[i])</span><br><span class="line">                   arr[i] = dfs(arr[i].getClass(), arr[i]);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 把 arr 放回去即可改变参数的值</span></span><br><span class="line">       <span class="keyword">return</span> pjp.proceed(arr);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> Object <span class="title function_">dfs</span><span class="params">(Class&lt;?&gt; aClass, Object object)</span> <span class="keyword">throws</span> IllegalAccessException &#123;</span><br><span class="line">       <span class="keyword">if</span> (object == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="comment">// 判断是否为Java的基本类型或包装类</span></span><br><span class="line">       <span class="keyword">if</span> (isPrimitive(aClass)) &#123;</span><br><span class="line">           <span class="keyword">if</span> (object <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">               <span class="keyword">return</span> ((String) object).trim();</span><br><span class="line">           &#125;<span class="keyword">else</span> <span class="keyword">if</span> (object <span class="keyword">instanceof</span> List&lt;?&gt;) &#123;</span><br><span class="line">              <span class="comment">//List中是字符串的话需要特殊处理，如果是对象List的话递归</span></span><br><span class="line">              List&lt;Object&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">               <span class="keyword">for</span> (Object o : (List&lt;?&gt;) object) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (isPrimitive(o.getClass())) &#123;</span><br><span class="line">                       <span class="keyword">if</span> (o <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">                           o = ((String) o).trim();</span><br><span class="line">                           result.add(o);</span><br><span class="line">                       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isPrimitive(o.getClass())) &#123;</span><br><span class="line">                           result.add(o);</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                       result.add(dfs(o.getClass(), o));</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">return</span> result;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> object;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 返回类所有字段</span></span><br><span class="line">       <span class="comment">// 注意： 会返回静态字段</span></span><br><span class="line">       <span class="comment">// 不要在Dto、Vo定义静态属性</span></span><br><span class="line">       <span class="comment">// 没有获取父类属性 可通过 “object.getClass().getSuperclass()” 获取</span></span><br><span class="line">       <span class="keyword">for</span> (Field item : object.getClass().getDeclaredFields()) &#123;</span><br><span class="line">           <span class="comment">// static修饰的字段忽略</span></span><br><span class="line">           <span class="keyword">if</span> (Modifier.isStatic(item.getModifiers())) &#123;</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// 设置可见性</span></span><br><span class="line">           item.setAccessible(<span class="literal">true</span>);</span><br><span class="line">           <span class="comment">// 递归处理</span></span><br><span class="line">           item.set(object, dfs(item.getType(), item.get(object)));</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> object;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 判断是否为Java的基本类型或包装类</span></span><br><span class="line">   <span class="comment">// java.lang.* java.util.* 存放着Java的基本数据类型的包装类和集合类</span></span><br><span class="line">   <span class="comment">// 基本数据类型和包装类是JVM虚拟机运行需要的类，已嵌入到JVM内核</span></span><br><span class="line">   <span class="comment">// 不需要继承ClassLoader 用户自定义的需要</span></span><br><span class="line">   <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isPrimitive</span><span class="params">(Class&lt;?&gt; aClass)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> aClass != <span class="literal">null</span> &amp;&amp; aClass.getClassLoader() == <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AOP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义校验注解</title>
      <link href="/post/8b8435d6.html"/>
      <url>/post/8b8435d6.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>自定义参数校验注解</p></blockquote><span id="more"></span><p>我们在进行参数校验的时候，很容易的就联想到了使用JSR303规范与数据校验，例如<font color="orange">@NotBlank、@NotNull、@NotEmpty</font>等注解，但是现有的注解可能不能满足我们的需求，比如，我们如何去校验一个非必填的字段呢，如果我们使用@NotBlank注解的话，又不满足非必填这个要求，所以我们可以自定义一个校验注解实现这些功能。接下来我们详细说明步骤：</p><h4 id="1、自定义注解"><a href="#1、自定义注解" class="headerlink" title="1、自定义注解"></a>1、自定义注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="comment">//下面这一行是最重要的，指出校验逻辑的类</span></span><br><span class="line"><span class="meta">@Constraint(validatedBy = CheckParamValidator.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CheckParam &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//boolean required() default false;</span></span><br><span class="line"></span><br><span class="line">    String <span class="title function_">message</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;校验不通过&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">pattern</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;正则规则&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Payload</span>&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2、校验类"><a href="#2、校验类" class="headerlink" title="2、校验类"></a>2、校验类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CheckParamValidator</span> <span class="keyword">implements</span> <span class="title class_">ConstraintValidator</span>&lt;CheckParam,String&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> required;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> String pattern;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(CheckParam constraintAnnotation)</span> &#123;</span><br><span class="line">        <span class="comment">//this.required= constraintAnnotation.required();</span></span><br><span class="line">        <span class="built_in">this</span>.message = constraintAnnotation.message();</span><br><span class="line">        <span class="built_in">this</span>.pattern = constraintAnnotation.pattern();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s, ConstraintValidatorContext constraintValidatorContext)</span> &#123;</span><br><span class="line">        <span class="comment">//这里是禁用默认的约束规则</span></span><br><span class="line">        constraintValidatorContext.disableDefaultConstraintViolation();</span><br><span class="line">        <span class="keyword">if</span>(s.length()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (StrUtil.isBlank(s))&#123;</span><br><span class="line">        constraintValidatorContext.buildConstraintViolationWithTemplate(<span class="string">&quot;这里可以覆盖默认的消息提示&quot;</span>).addConstraintViolation();</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                s=s.replaceAll(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (s.matches(<span class="built_in">this</span>.pattern))&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                constraintValidatorContext.buildConstraintViolationWithTemplate(<span class="string">&quot;xxxxxxxx&quot;</span>).addConstraintViolation();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、全局异常处理器"><a href="#3、全局异常处理器" class="headerlink" title="3、全局异常处理器"></a>3、全局异常处理器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(&#123;MethodArgumentNotValidException.class&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handleValidException</span><span class="params">(MethodArgumentNotValidException e)</span>&#123;</span><br><span class="line">        log.error(Objects.requireNonNull(e.getBindingResult().getFieldError()).getDefaultMessage());</span><br><span class="line">        <span class="keyword">return</span> e.getBindingResult().getFieldError().getDefaultMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、使用"><a href="#4、使用" class="headerlink" title="4、使用"></a>4、使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;用户名不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CheckParam(message=&quot;不能单独出现&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String hobby;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping(&quot;insert&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResultData&lt;String&gt; <span class="title function_">insert</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated</span> User user)</span>&#123;</span><br><span class="line">  log.info(<span class="string">&quot;传递的用户:&quot;</span>+user);</span><br><span class="line">  <span class="keyword">return</span> ResultData.success(user.getUserName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 拓展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据校验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>校验注解@NotBlank、@NotEmpty和@NotNull的区别</title>
      <link href="/post/22183753.html"/>
      <url>/post/22183753.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>@NotBlank、@NotEmpty和@NotNull的区别</p></blockquote><span id="more"></span><h4 id="NotNull"><a href="#NotNull" class="headerlink" title="@NotNull"></a>@NotNull</h4><p>解释：<font color="orange">不能为null，但是可以为empty</font></p><h4 id="NotEmpty"><a href="#NotEmpty" class="headerlink" title="@NotEmpty"></a>@NotEmpty</h4><p>解释：<font color="orange">不能为null，而且长度必须大于0</font></p><h4 id="NotBlank"><a href="#NotBlank" class="headerlink" title="@NotBlank"></a>@NotBlank</h4><p>解释：<font color="orange">只能作用在String上，不能为null，而且调用trim()方法后长度必须大于零</font></p>]]></content>
      
      
      <categories>
          
          <category> 拓展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据校验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式入门</title>
      <link href="/post/a89d29ca.html"/>
      <url>/post/a89d29ca.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>正则表达式入门</p></blockquote><span id="more"></span><h2 id="1、简单案例"><a href="#1、简单案例" class="headerlink" title="1、简单案例"></a>1、简单案例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Regexp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String content=<span class="string">&quot;1995年，互联网的蓬勃发展给了Oak机会。&quot;</span> +</span><br><span class="line">                <span class="string">&quot;业界为了使死板、单调的静态网页能够“灵活”起来，&quot;</span> +</span><br><span class="line">                <span class="string">&quot;急需一种软件技术来开发一种程序，这种程序可以通过网&quot;</span> +</span><br><span class="line">                <span class="string">&quot;络传播并且能够跨平台运行。于是，世界各大IT企业为此&quot;</span> +</span><br><span class="line">                <span class="string">&quot;纷纷投入了大量的人力、物力和财力。这个时候，Sun公&quot;</span> +</span><br><span class="line">                <span class="string">&quot;司想起了那个被搁置起来很久的Oak，并且重新审视了那&quot;</span> +</span><br><span class="line">                <span class="string">&quot;个用软件编写的试验平台，由于它是按照嵌入式系统硬件&quot;</span> +</span><br><span class="line">                <span class="string">&quot;平台体系结构进行编写的，所以非常小，特别适用于网&quot;</span> +</span><br><span class="line">                <span class="string">&quot;络上的传输系统，而Oak也是一种精简的语言，程序非常&quot;</span> +</span><br><span class="line">                <span class="string">&quot;小，适合在网络上传输。Sun公司首先推出了可以嵌入网&quot;</span> +</span><br><span class="line">                <span class="string">&quot;页并且可以随同网页在网络上传输的Applet（Applet是&quot;</span> +</span><br><span class="line">                <span class="string">&quot;一种将小程序嵌入到网页中进行执行的技术），并将Oak&quot;</span> +</span><br><span class="line">                <span class="string">&quot;更名为Java。5月23日，Sun公司在Sun world会议上正&quot;</span> +</span><br><span class="line">                <span class="string">&quot;式发布Java和HotJava浏览器。IBM、Apple、DEC、Ad&quot;</span> +</span><br><span class="line">                <span class="string">&quot;obe、HP、Oracle、Netscape和微软等各大公司都纷&quot;</span> +</span><br><span class="line">                <span class="string">&quot;纷停止了自己的相关开发项目，竞相购买了Java使用许&quot;</span> +</span><br><span class="line">                <span class="string">&quot;可证，并为自己的产品开发了相应的Java平台。&quot;</span>;</span><br><span class="line"></span><br><span class="line">        content=<span class="string">&quot;A类 10.0.0.0--10.255.255.255\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;B类 172.16.0.0--172.31.255.255\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;C类 192.168.0.0--192.168.255.255&quot;</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 提取文章中所有的英文单词和数字</span></span><br><span class="line"><span class="comment">         * (1)传统方法：使用遍历的方式，代码量大，效率不高</span></span><br><span class="line"><span class="comment">         * (2)正则表达式技术</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//1.先创建一个Pattern对象，可以理解为一个正则表达式对象</span></span><br><span class="line">        <span class="comment">//匹配所有的英文单词和数字</span></span><br><span class="line">        <span class="comment">//Pattern pattern = Pattern.compile(&quot;([a-zA-Z]+)|([0-9]+)&quot;);</span></span><br><span class="line">        <span class="comment">//获取ip</span></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;\\d+\\.\\d+\\.\\d+\\.\\d+&quot;</span>);</span><br><span class="line">        <span class="comment">//2.创建一个匹配器对象</span></span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line">        <span class="comment">//3.开始循环匹配</span></span><br><span class="line">        <span class="keyword">while</span> (matcher.find())&#123;</span><br><span class="line">            <span class="comment">//匹配内容，文本，放到m.group(0)</span></span><br><span class="line">            System.out.println(<span class="string">&quot;找到:&quot;</span>+matcher.group(<span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、正则底层原理"><a href="#2、正则底层原理" class="headerlink" title="2、正则底层原理"></a>2、正则底层原理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegTheory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String content=<span class="string">&quot;1998年12月8日，第二代Java平台的企业版J2EE发布。1999年6月，&quot;</span> +</span><br><span class="line">                <span class="string">&quot;Sun公司发布了第二代Java平台（简称为Java2）的3个版本&quot;</span> +</span><br><span class="line">                <span class="string">&quot;：J2ME（Java2 Micro Edition，Java2平台的微型版）&quot;</span> +</span><br><span class="line">                <span class="string">&quot;，应用于移动、无线及有限资源的环境；J2SE（Java 2 Stan&quot;</span> +</span><br><span class="line">                <span class="string">&quot;dard Edition，Java 2平台的标准版），应用于桌面环境；&quot;</span> +</span><br><span class="line">                <span class="string">&quot;J2EE（Java 2Enterprise Edition，Java 2平台的企业版&quot;</span> +</span><br><span class="line">                <span class="string">&quot;），应用于基于Java的应用服务器。Java 2平台的发布，是Java发&quot;</span> +</span><br><span class="line">                <span class="string">&quot;展过程中最重要的一个里程碑，标志着Java的应用开始普及。&quot;</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 目标：匹配所有的四个数字</span></span><br><span class="line"><span class="comment">         * 说明：</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//1. \\d表示一个任意的数字</span></span><br><span class="line">        String regStr=<span class="string">&quot;\\d\\d\\d\\d&quot;</span>;</span><br><span class="line">        <span class="comment">//2.创建模式对象[正则表达式对象]</span></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regStr);</span><br><span class="line">        <span class="comment">//3.创建匹配器</span></span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line">        <span class="comment">//4.开始匹配</span></span><br><span class="line">        <span class="keyword">while</span> (matcher.find())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;找到:&quot;</span>+matcher.group(<span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>matcher.find()<ul><li>什么是分组，比如(\d\d)(\d\d),正则表达式中有()，表示分组，第一个()表示第一组，第二个表示第二组</li><li>根据指定的规则定位满足规则的子字符串</li><li>找到后，将子字符串的开始索引记录到matcher对象的属性中int[] groups<ul><li>group[0]=0,把该子字符串的结束的索引+1的值记录到group[1]=4</li><li>记录1组()匹配到的字符串group[2]=0 group[3]=2</li><li>记录2组()匹配到的字符串group[4]=2 group[5]=4</li><li>如果有更多的分组，以此类推</li></ul></li><li>同时记录oldLast的值为该子字符串的结束的索引+1即4，即下次执行find时，从4开始匹配</li></ul></li><li>matcher.group(0)分析<ul><li>根据groups[0]和group[1]的记录的位置，从content开始截取子字符串时，从开始匹配</li></ul></li></ul><h2 id="3、正则转义符"><a href="#3、正则转义符" class="headerlink" title="3、正则转义符"></a>3、正则转义符</h2><ol><li>元字符-转义号 <font color="red">\\</font></li><li><font color="red">\\</font>符号说明：在我们使用正则表达式去检索某些特殊字符的时候，需要使用转义符号，否则检索不到结果，比如用<code>(</code>匹配不到<code>abc$(</code></li><li>在Java的正则表达式中，两个<font color="red">\\</font>代表其他语言中的一个<font color='red'>\</font></li></ol><h2 id="4、正则字符匹配符"><a href="#4、正则字符匹配符" class="headerlink" title="4、正则字符匹配符"></a>4、正则字符匹配符</h2><div class="table-container"><table><thead><tr><th>符号</th><th></th><th>示例</th><th>解释</th></tr></thead><tbody><tr><td>[ ]</td><td>可接收的字符列表</td><td>[efgh]</td><td>e、f、g、h中任意1个字符</td></tr><tr><td><sup><a href="#fn_" id="reffn_"></a></sup></td><td>不可接收的字符列表</td><td><sup><a href="#fn_abc" id="reffn_abc">abc</a></sup></td><td>除a、b、c之外的任意一个字符，包括数字和特殊符号</td></tr><tr><td>-</td><td>连字符</td><td>A-Z</td><td>任意单个大写字母</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>符号</th><th>含义</th><th>示例</th><th>说明</th><th>匹配输入</th></tr></thead><tbody><tr><td>.</td><td>匹配除\n以外的任何字符</td><td>a..b</td><td>以a开头，以b结尾，中间包含两个任意字符的长度为4的字符串</td><td>aaab、aefb、a35b、a#*b</td></tr><tr><td>\\d</td><td>匹配单个数字字符，相当于[0-9]</td><td>\\d{3}(\\d)?</td><td>包含3个或4个数字的字符串</td><td>123、9876</td></tr><tr><td>\\D</td><td>匹配单个非数字字符，相当于[\^0-9]</td><td>\\D(\d)*</td><td>包含以非数字字符开头，后接任意个数字字符串</td><td>a、A342</td></tr><tr><td>\\w</td><td>匹配单个数字，大小写字母，下划线，相当于[0-9a-zA-Z_]</td><td>\\d{3}\\w{4}</td><td>以3个数字字符开头的长度为7的数字字母字符串</td><td>234abcd、12345Pe</td></tr><tr><td>\\s</td><td>匹配任何空白字符（空格、制表符等）</td><td></td><td></td><td></td></tr><tr><td>\\S</td><td>匹配任何非空白字符</td><td></td><td></td></tr></tbody></table></div><h2 id="5、字符匹配案例"><a href="#5、字符匹配案例" class="headerlink" title="5、字符匹配案例"></a>5、字符匹配案例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegExp03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String content=<span class="string">&quot;abc11c8ABC&quot;</span>;</span><br><span class="line">        <span class="comment">//String regStr=&quot;[a-z]&quot;;匹配a-z之间的任意一个字符</span></span><br><span class="line">        <span class="comment">//String regStr=&quot;[A-Z]&quot;;匹配A-Z之间的任意一个字符</span></span><br><span class="line">        <span class="comment">//String regStr=&quot;abc&quot;;//匹配abc字符 字符串【默认区分大小写】</span></span><br><span class="line">        <span class="comment">//String regStr=&quot;(?i)abc&quot;;//匹配abc字符 字符串【不区分大小写】</span></span><br><span class="line">        <span class="comment">//String regStr=&quot;[0-9]&quot;;//匹配0-9之间的任意一个数字</span></span><br><span class="line">        <span class="comment">//String regStr=&quot;[^a-z]&quot;;//匹配不在a-z之间的任意一个字符</span></span><br><span class="line">        String regStr=<span class="string">&quot;[^0-9]&quot;</span>;<span class="comment">//匹配不在0-9之间的任意一个字符</span></span><br><span class="line">      <span class="comment">//String regStr=&quot;[^a-z]&quot;;//匹配不在a-z之间的任意一个字符</span></span><br><span class="line">        <span class="comment">//String regStr=&quot;[^0-9]&quot;;//匹配不在0-9之间的任意一个字符</span></span><br><span class="line">        <span class="comment">//String regStr=&quot;[abcd]&quot;;//匹配在abcd中任意一个字符</span></span><br><span class="line">        <span class="comment">//String regStr=&quot;\\s&quot;;</span></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regStr);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line">        <span class="keyword">while</span> (matcher.find())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;找到:&quot;</span>+matcher.group(<span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、选择匹配符"><a href="#6、选择匹配符" class="headerlink" title="6、选择匹配符"></a>6、选择匹配符</h2><p>在匹配某个字符串的时候是选择性的，即：既可以匹配这个，又可以匹配那个，这时你需要用到选择匹配符号<font color="red"><code>|</code></font></p><div class="table-container"><table><thead><tr><th>符号</th><th>符号</th><th>实例</th><th>解释</th></tr></thead><tbody><tr><td>\</td><td></td><td>匹配“\</td><td>”之前或之后的表达式</td><td>ab\</td><td>cd</td><td>ab或者cd</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegExp04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String content=<span class="string">&quot;xiaoying 影 樱花&quot;</span>;</span><br><span class="line">        String regStr=<span class="string">&quot;ying|樱&quot;</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regStr);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line">        <span class="keyword">while</span> (matcher.find())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;找到:&quot;</span>+matcher.group(<span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7、正则限定符"><a href="#7、正则限定符" class="headerlink" title="7、正则限定符"></a>7、正则限定符</h2><div class="table-container"><table><thead><tr><th>符号</th><th>含义</th><th>示例</th><th>说明</th><th>匹配输入</th></tr></thead><tbody><tr><td>*</td><td>指定字符重复0次或n次</td><td>(abc)*</td><td>仅包含任意个abc字符串，等效于\w*</td><td>abc、abcabcabc</td></tr><tr><td>+</td><td>指定字符重复1次或者n次（至少一次）</td><td>m+(abc)*</td><td>以至少1个m开头，后接任意个abc的字符串</td><td>m、mabc、mabcabc</td></tr><tr><td>？</td><td>指定字符重复0次或1次</td><td>m+abc?</td><td>以至少一个m开头，后接ab或abc的字符串</td><td>mab、mabc、mmmab、mmabc</td></tr><tr><td>{n}</td><td>只能输入n个字符</td><td>[abcd]{3}</td><td>由abcd中字母组成任意长度为3的字符串</td><td>abc、dbc、adc</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String regStr=<span class="string">&quot;a&#123;3&#125;&quot;</span><span class="comment">//表示匹配aaa</span></span><br><span class="line">String regStr=<span class="string">&quot;1&#123;4&#125;&quot;</span><span class="comment">//表示匹配1111</span></span><br><span class="line">String regStr=<span class="string">&quot;\\d&#123;2&#125;&quot;</span><span class="comment">//表示匹配两位的任意数字</span></span><br><span class="line">String regStr=<span class="string">&quot;&quot;</span></span><br><span class="line">String regStr=<span class="string">&quot;a&#123;3,4&#125;&quot;</span><span class="comment">//表示匹配aaa 或者aaaa</span></span><br></pre></td></tr></table></figure><p>{n,m}说明：表示至少出现n次最多m次，比如a{3,4},1{4,5},\\d{2,5}</p><p>细节：<font color="orange">java匹配默认是贪婪匹配，尽可能匹配多的</font></p><h2 id="8、正则定位符"><a href="#8、正则定位符" class="headerlink" title="8、正则定位符"></a>8、正则定位符</h2><p>定位符，规定要匹配的字符串出现的位置，比如在字符串的开始还是在结束的位置</p><div class="table-container"><table><thead><tr><th>符号</th><th>含义</th><th>示例</th><th>说明</th><th>匹配输入</th></tr></thead><tbody><tr><td>^</td><td>指定起始字符(针对整个字符串)</td><td>^[0-9]+[a-z]*</td><td>以至少1个数字开头，后接任意个小写字母</td><td>123、6aa、555edf</td></tr><tr><td>$</td><td>指定结束字符(针对整个字符串)</td><td>^[0-9]-[a-z]+$</td><td>以1个数字开头后接连字符“-”，并以至少1个小写字母结尾</td><td>1-a</td></tr><tr><td>\\b</td><td>匹配目标字符串的边界</td><td>han\\b</td><td>这里说的字符串的边界指的是子串间有空格，或者是目标字符串的结束位置</td><td>hanshunping、sp<font color="orange">han</font> nn<font color="orange">han</font></td></tr><tr><td>\\B</td><td>匹配目标字符串的非边界</td><td>han\\B</td><td>和\\b相反</td><td><font color="orange">han</font>shunping、sphan hhhan</td></tr></tbody></table></div><h2 id="9、捕获分组"><a href="#9、捕获分组" class="headerlink" title="9、捕获分组"></a>9、捕获分组</h2><div class="table-container"><table><thead><tr><th>常用分组构造形式</th><th>说明</th></tr></thead><tbody><tr><td>(pattern)</td><td>非命名捕获。捕获匹配的子字符串。编号为零的第一个捕获是由整个正则表达式模式匹配的的文本，其他捕获结果则根据左括号的顺序从1开始自动编号</td></tr><tr><td>(?<name> pattern)</td><td>命名捕获。将匹配的子字符串捕获到一个组名称或编号名称中。用于name的字符串不能包含任何标点符号，并且不能以数字开头。可以使用单引号代替尖括号，例如(?’name’)</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegExp07</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String content=<span class="string">&quot;hanshunping s7789 nn1189han&quot;</span>;</span><br><span class="line">        <span class="comment">//String regStr=&quot;(\\d\\d)(\\d\\d)&quot;;</span></span><br><span class="line">        <span class="comment">//命名分组</span></span><br><span class="line">        String regStr=<span class="string">&quot;(?&lt;g1&gt;\\d\\d)(?&lt;g2&gt;\\d\\d)&quot;</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regStr);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (matcher.find())&#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 找到:7789</span></span><br><span class="line"><span class="comment">             * 第一个分组的内容:77</span></span><br><span class="line"><span class="comment">             * 第一个分组的内容[组名]:77</span></span><br><span class="line"><span class="comment">             * 第二个分组的内容:89</span></span><br><span class="line"><span class="comment">             * 找到:1189</span></span><br><span class="line"><span class="comment">             * 第一个分组的内容:11</span></span><br><span class="line"><span class="comment">             * 第一个分组的内容[组名]:11</span></span><br><span class="line"><span class="comment">             * 第二个分组的内容:89</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            System.out.println(<span class="string">&quot;找到:&quot;</span>+matcher.group(<span class="number">0</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;第一个分组的内容:&quot;</span>+matcher.group(<span class="number">1</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;第一个分组的内容[组名]:&quot;</span>+matcher.group(<span class="string">&quot;g1&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;第二个分组的内容:&quot;</span>+matcher.group(<span class="number">2</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10、非捕获分组"><a href="#10、非捕获分组" class="headerlink" title="10、非捕获分组"></a>10、非捕获分组</h2><div class="table-container"><table><thead><tr><th>常用分组构造形式</th><th>说明</th></tr></thead><tbody><tr><td>(?:pattern)</td><td>匹配pattern但不捕获该匹配的子表达式，即它是一个非捕获匹配，不存储供以后使用的匹配。这对于“or”字符(\</td><td>\</td><td>)组合模式部件的情况有用。例如‘industr(?:y\</td><td>ies)是比’industry\</td><td>industries’更经济的表达式</td></tr><tr><td>(?=pattern)</td><td>它是一个非捕获匹配，例如‘Windows(?=95\</td><td>98\</td><td>NT\</td><td>2000)’匹配“Windows2000”中的“Windows”，但不匹配“Windows 3.1”中的“Windows</td></tr><tr><td>(?!pattern)</td><td>该表达式匹配不处于匹配pattern的字符串的起始点的搜索字符串。他是一个非捕获匹配。例如‘Windows(?!95\</td><td>98\</td><td>NT\</td><td>2000)’匹配“Windows 3.1”中的”Windows“，但不匹配”Windows 2000“中的”Windows“</td></tr></tbody></table></div><h2 id="11、非贪婪匹配"><a href="#11、非贪婪匹配" class="headerlink" title="11、非贪婪匹配"></a>11、非贪婪匹配</h2><div class="table-container"><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>?</td><td>当此字符串紧随其他任何限定字符(*、+、？、{n}、{n，m})之后时，匹配模式是“非贪心的”。“非贪心的”模式匹配搜索到的、尽可能短的字符串，而模式的“贪心的”模式匹配搜索的是尽可能长的。例如，在字符串“oooo”中，“o+?”只匹配单个“o”,而“o+”匹配所有的“o”</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegExp09</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String content=<span class="string">&quot;hello111111 ok&quot;</span>;</span><br><span class="line">        <span class="comment">//String regStr=&quot;\\d+&quot;;//默认是贪婪匹配</span></span><br><span class="line">        String regStr=<span class="string">&quot;\\d+?&quot;</span>;<span class="comment">//非贪婪匹配</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regStr);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (matcher.find())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;找到:&quot;</span>+matcher.group(<span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="12、拓展符号"><a href="#12、拓展符号" class="headerlink" title="12、拓展符号"></a>12、拓展符号</h2><div class="table-container"><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td>\f</td><td>换页符匹配</td></tr><tr><td>\n</td><td>换行符匹配</td></tr><tr><td>\r</td><td>匹配一个回车符</td></tr><tr><td>\t</td><td>制表符匹配</td></tr><tr><td>\v</td><td>垂直制表符匹配</td></tr></tbody></table></div><h2 id="13、正则表达式应用示例"><a href="#13、正则表达式应用示例" class="headerlink" title="13、正则表达式应用示例"></a>13、正则表达式应用示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//验证汉字</span></span><br><span class="line">String content=<span class="string">&quot;正则表达式真好用&quot;</span>;</span><br><span class="line">String regStr=<span class="string">&quot;^[\u0391-\uffe5]+$&quot;</span>;</span><br><span class="line"><span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regStr);</span><br><span class="line"><span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line"><span class="keyword">if</span> (matcher.find())&#123;</span><br><span class="line">   System.out.println(<span class="string">&quot;满足格式&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">   System.out.println(<span class="string">&quot;不满足格式要求&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//验证邮政编码,要求是1-9开头的6位数字</span></span><br><span class="line">String content=<span class="string">&quot;323122&quot;</span>;</span><br><span class="line">String regStr=<span class="string">&quot;^[1-9]\\d&#123;5&#125;$&quot;</span>;</span><br><span class="line"><span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regStr);</span><br><span class="line"><span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line"><span class="keyword">if</span> (matcher.find())&#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;满足格式&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;不满足格式要求&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1-9开头的一个（5-10位数）</span></span><br><span class="line">String content=<span class="string">&quot;323122&quot;</span>;</span><br><span class="line">String regStr=<span class="string">&quot;^[1-9]\\d&#123;4,9&#125;$&quot;</span>;</span><br><span class="line"><span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regStr);</span><br><span class="line"><span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line"><span class="keyword">if</span> (matcher.find())&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;满足格式&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;不满足格式要求&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//手机号码，必须以13、14、15、18开头的11位数字</span></span><br><span class="line">String content=<span class="string">&quot;133789876512&quot;</span>;</span><br><span class="line">String regStr=<span class="string">&quot;^1[3458]\\d&#123;9&#125;$&quot;</span>;</span><br><span class="line"><span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regStr);</span><br><span class="line"><span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line"><span class="keyword">if</span> (matcher.find())&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;满足格式&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;不满足格式要求&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//url</span></span><br><span class="line">String conten=<span class="string">&quot;https://www.bilibili.com/video/BV1fh411y7R8?spm_id_from=333.337.search-card.all.click&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1.先确定url的开始部分https://  http://</span></span><br><span class="line"><span class="comment">         * 2.然后通过([\w-]+\.)+[\w-]+ 匹配www.bilibili.com</span></span><br><span class="line"><span class="comment">         * 3.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">String regStr=<span class="string">&quot;^((http|https)://)([\\w-]+\\.)+[\\w-]+(/[\\w-?=&amp;/%.#]*)?$&quot;</span>;<span class="comment">//注意[]里的.表示.本身</span></span><br><span class="line"></span><br><span class="line"><span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regStr);</span><br><span class="line"><span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(conten);</span><br><span class="line"><span class="keyword">if</span> (matcher.find())&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;满足&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;不满足&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="14、Pattern类"><a href="#14、Pattern类" class="headerlink" title="14、Pattern类"></a>14、Pattern类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 挚爱小v脸</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-06-19 1:33 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span> matches方法，用于整体匹配，在验证输入字符串是否满足条件时使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PatternMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String content=<span class="string">&quot;hello xiaoying world,&quot;</span>;</span><br><span class="line">        String regStr=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> match= Pattern.matches(regStr,content);</span><br><span class="line">        System.out.println(<span class="string">&quot;整体匹配=&quot;</span>+match);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="15、Matcher类"><a href="#15、Matcher类" class="headerlink" title="15、Matcher类"></a>15、Matcher类</h2><ol><li>public int start() 返回以前匹配的初始索引</li><li>public int start(int group) 返回在以前的匹配操作期间，由给定组所捕获的子序列的初始索引</li><li>public int end() 返回最后匹配字符之后的偏移量</li><li>public int end(int group) 返回在以前的操作匹配期间，由给定组所捕获子序列的最后字符之后的偏移量</li><li>public boolean lookingAt() 尝试将从区域开头开始的输入序列与该模式匹配</li><li>public boolean find() 尝试查找与该模式匹配的输入序列的下一个子序列</li><li>public boolean find(int start) 重置此匹配器，然后尝试查找匹配该模式，从指定索引开始的输入序列的下一个子序列</li><li>public boolean matches()尝试将整个区域与模式匹配</li><li>…………………………………….</li></ol><h2 id="16、反向引用"><a href="#16、反向引用" class="headerlink" title="16、反向引用"></a>16、反向引用</h2><p>圆括号内容被捕获后，可以在这个括号的后面被使用，从而写出一个比较实用的匹配模式，这个我们称为反向引用，这种引用既可以是在正则表达式的内部，也可以是在正则表达式的外部，内部反向引用<code>\\\分组号</code>，外部反向引用<code>$分组号</code></p><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><ol><li>要匹配两个连续的相同数字：(\\d)\\1</li><li>要匹配五个连续的相同数字：(\\d)\\1{4}</li><li>要匹配个位与千位相同，十位与百位相同的数字，如1551  (\\d)(\\d)\\2\\1</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String content=<span class="string">&quot;12312-333999111&quot;</span>;</span><br><span class="line">String regStr=<span class="string">&quot;\\d&#123;5&#125;-(\\d)\\1&#123;2&#125;(\\d)\\2&#123;2&#125;(\\d)\\3&#123;2&#125;&quot;</span>;</span><br><span class="line"><span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regStr);</span><br><span class="line"><span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line"><span class="keyword">while</span> (matcher.find())&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;找到:&quot;</span>+matcher.group(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="17、结巴去重案例"><a href="#17、结巴去重案例" class="headerlink" title="17、结巴去重案例"></a>17、结巴去重案例</h2><p>把类似：“我..我要..学学学学…编程java”，通过正则表达式修改为:”我要学编程java“</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegExp13</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String content=<span class="string">&quot;我...我要...学学学学...编程java!&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.去掉所有的.</span></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line">        content=matcher.replaceAll(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.去掉重复的字</span></span><br><span class="line">        <span class="comment">//(1)使用(.)\\1+</span></span><br><span class="line">        pattern=Pattern.compile(<span class="string">&quot;(.)\\1+&quot;</span>);</span><br><span class="line">        matcher=pattern.matcher(content);</span><br><span class="line">        <span class="keyword">while</span> (matcher.find())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;找到:&quot;</span>+matcher.group(<span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(2)使用反向引用$1来替换</span></span><br><span class="line">        content=matcher.replaceAll(<span class="string">&quot;$1&quot;</span>);</span><br><span class="line">        System.out.println(content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="18、综合案例"><a href="#18、综合案例" class="headerlink" title="18、综合案例"></a>18、综合案例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeWork</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 验证是不是整数或者小数，考虑正负数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String content=<span class="string">&quot;-0.89&quot;</span>;</span><br><span class="line">        String regStr=<span class="string">&quot;^[-+]?([1-9]\\d*|0)(\\.\\d+)?$&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(content.matches(regStr))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;fail&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对一个url进行解析，获取协议，端口，域名，文件名</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeWork2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String content=<span class="string">&quot;http://www.sohu.com:8080/abc/xxx/yyy/////i@ndex.html&quot;</span>;</span><br><span class="line">        String regStr=<span class="string">&quot;^([a-zA-Z]+)://([a-zA-Z.]+):(\\d+)[\\w-/]*/([\\w.@]+)$&quot;</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regStr);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line">        <span class="keyword">if</span> (matcher.matches())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;协议:&quot;</span>+matcher.group(<span class="number">1</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;域名:&quot;</span>+matcher.group(<span class="number">2</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;端口:&quot;</span>+matcher.group(<span class="number">3</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;文件名:&quot;</span>+matcher.group(<span class="number">4</span>));</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;fail&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 拓展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MapStruct的简单使用</title>
      <link href="/post/7a52d55f.html"/>
      <url>/post/7a52d55f.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>MapStruct的使用</p></blockquote><span id="more"></span><h2 id="一、MapStruct简介"><a href="#一、MapStruct简介" class="headerlink" title="一、MapStruct简介"></a>一、MapStruct简介</h2><ul><li>官网：<a href="https://mapstruct.org/">https://mapstruct.org/</a></li><li>使用场景：实体之间的相互转化</li></ul><h4 id="我们先准备一些测试类"><a href="#我们先准备一些测试类" class="headerlink" title="我们先准备一些测试类"></a>我们先准备一些测试类</h4><h5 id="DTO"><a href="#DTO" class="headerlink" title="DTO"></a>DTO</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CarDto</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String vin;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> totalPrice;</span><br><span class="line">    <span class="keyword">private</span> Date publishDate;</span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> List&lt;PartDto&gt; partDTOS;</span><br><span class="line">    <span class="keyword">private</span> DriverDTO driverDTO;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DriverDTO</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PartDto</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long partId;</span><br><span class="line">    <span class="keyword">private</span> String  partName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="VO"><a href="#VO" class="headerlink" title="VO"></a>VO</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CarVO</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String vin;</span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line">    <span class="keyword">private</span> String totalPrice;</span><br><span class="line">    <span class="keyword">private</span> String publishDate;</span><br><span class="line">    <span class="keyword">private</span> String brandName;</span><br><span class="line">    <span class="keyword">private</span> Boolean hasPart;</span><br><span class="line">    <span class="keyword">private</span> DriverVO driverVo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DriverVO</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long driverId;</span><br><span class="line">    <span class="keyword">private</span> String fullName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PartVVO</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long partId;</span><br><span class="line">    <span class="keyword">private</span> String partName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VehicleVO</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line">    <span class="keyword">private</span> String brandName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用传统方式实现对象之间的属性赋值"><a href="#使用传统方式实现对象之间的属性赋值" class="headerlink" title="使用传统方式实现对象之间的属性赋值"></a>使用传统方式实现对象之间的属性赋值</h4><h5 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> CarDto <span class="title function_">buildCarDto</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">CarDto</span> <span class="variable">carDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CarDto</span>();</span><br><span class="line">        carDto.setId(<span class="number">330L</span>);</span><br><span class="line">        carDto.setVin(<span class="string">&quot;vin12343543&quot;</span>);</span><br><span class="line">        carDto.setPrice(<span class="number">12424234d</span>);</span><br><span class="line">        carDto.setTotalPrice(<span class="number">232343434d</span>);</span><br><span class="line">        carDto.setPublishDate(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        carDto.setBrand(<span class="string">&quot;奥迪&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">PartDto</span> <span class="variable">partDto1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PartDto</span>();</span><br><span class="line">        partDto1.setPartId(<span class="number">1L</span>);</span><br><span class="line">        partDto1.setPartName(<span class="string">&quot;多功能方向盘&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">PartDto</span> <span class="variable">partDto2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PartDto</span>();</span><br><span class="line">        partDto2.setPartId(<span class="number">2L</span>);</span><br><span class="line">        partDto2.setPartName(<span class="string">&quot;智能车门&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;PartDto&gt; partDtoList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        partDtoList.add(partDto1);</span><br><span class="line">        partDtoList.add(partDto2);</span><br><span class="line"></span><br><span class="line">        carDto.setPartDTOS(partDtoList);</span><br><span class="line"></span><br><span class="line">        <span class="type">DriverDTO</span> <span class="variable">driverDTO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DriverDTO</span>();</span><br><span class="line">        driverDTO.setId(<span class="number">88L</span>);</span><br><span class="line">        driverDTO.setName(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">        carDto.setDriverDTO(driverDTO);</span><br><span class="line">        <span class="keyword">return</span> carDto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CarDto</span> <span class="variable">carDto</span> <span class="operator">=</span> buildCarDto();</span><br><span class="line">        <span class="comment">//传统方式转换dto---&gt;vo</span></span><br><span class="line">        <span class="type">CarVO</span> <span class="variable">carVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CarVO</span>();</span><br><span class="line">        carVO.setId(carDto.getId());</span><br><span class="line">        carVO.setVin(carDto.getVin());</span><br><span class="line">        carVO.setPrice(carDto.getPrice());</span><br><span class="line">        <span class="type">double</span> <span class="variable">totalPrice</span> <span class="operator">=</span> carDto.getTotalPrice();</span><br><span class="line">        <span class="type">DecimalFormat</span> <span class="variable">df</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DecimalFormat</span>(<span class="string">&quot;#.00&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">totalPriceStr</span> <span class="operator">=</span> df.format(totalPrice);</span><br><span class="line">        carVO.setTotalPrice(totalPriceStr);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">publishDate</span> <span class="operator">=</span> carDto.getPublishDate();</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">publishDateStr</span> <span class="operator">=</span> sm.format(publishDate);</span><br><span class="line">        carVO.setPublishDate(publishDateStr);</span><br><span class="line">        carVO.setBrandName(carVO.getBrandName());</span><br><span class="line">        List&lt;PartDto&gt; partDTOS = carDto.getPartDTOS();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">hasPart</span> <span class="operator">=</span> partDTOS != <span class="literal">null</span> &amp;&amp; !partDTOS.isEmpty();</span><br><span class="line">        carVO.setHasPart(hasPart);</span><br><span class="line">        DriverVO driverVO=<span class="keyword">new</span> <span class="title class_">DriverVO</span>();</span><br><span class="line">        <span class="type">DriverDTO</span> <span class="variable">driverDTO</span> <span class="operator">=</span> carDto.getDriverDTO();</span><br><span class="line">        driverVO.setDriverId(driverDTO.getId());</span><br><span class="line">        driverVO.setFullName(driverDTO.getName());</span><br><span class="line">        carVO.setDriverVo(driverVO);</span><br><span class="line">        System.out.println(carVO);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，使用传统的方式多而杂的代码与业务逻辑耦合，不能突出业务逻辑的重点</p><h4 id="使用MapStruct"><a href="#使用MapStruct" class="headerlink" title="使用MapStruct"></a>使用MapStruct</h4><h5 id="Mapper"><a href="#Mapper" class="headerlink" title="@Mapper"></a>@Mapper</h5><ul><li>默认的映射规则<ul><li>同类型且同名的属性会自动映射</li><li>mapstruct会进行自动类型转换<ul><li>8种基本类型和他们对应的包装类型之间</li><li>8种基本类型（包括他们的包装类型）和String之间</li><li>日期类型和String之间</li></ul></li></ul></li></ul><h6 id="转换器"><a href="#转换器" class="headerlink" title="转换器"></a>转换器</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 挚爱小v脸</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-06-16 12:38 AM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment"> * 使用步骤：</span></span><br><span class="line"><span class="comment"> * 1.引入依赖</span></span><br><span class="line"><span class="comment"> * 2.新建一个抽象类或者接口并标注<span class="doctag">@Mapper</span>注解（注意是mapstruct下的包）</span></span><br><span class="line"><span class="comment"> * 3.写一个转换方法</span></span><br><span class="line"><span class="comment"> * 4.获取对象并使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">CarConvert</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CarConvert INSTANCE= Mappers.getMapper(CarConvert.class);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> CarVO <span class="title function_">convertToCarVO</span><span class="params">(CarDto carDto)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CarDto</span> <span class="variable">carDto</span> <span class="operator">=</span> buildCarDto();</span><br><span class="line">        <span class="type">CarVO</span> <span class="variable">carVO</span> <span class="operator">=</span> CarConvert.INSTANCE.convertToCarVO(carDto);</span><br><span class="line">        System.out.println(carVO);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//CarVO(id=330, vin=vin12343543, price=1.2424234E7, totalPrice=2.32343434E8, publishDate=6/16/22 12:47 AM, brandName=null, hasPart=null, driverVo=null)</span></span><br></pre></td></tr></table></figure><h5 id="Mappings和-Mapping"><a href="#Mappings和-Mapping" class="headerlink" title="@Mappings和@Mapping"></a>@Mappings和@Mapping</h5><ul><li><p>属性之间的映射关系</p><ul><li>日期格式化：<font color="orange">dataFormat=“yyyy-MM-dd HH:mm:ss”</font></li><li>数字格式化：<font color="orange">numberFormat=“#.00”</font></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mappings(&#123; @Mapping(source = &quot;totalPrice&quot;,target = &quot;totalPrice&quot;,numberFormat = &quot;#.00&quot;),</span></span><br><span class="line"><span class="meta">            @Mapping(source = &quot;publishDate&quot;,target = &quot;publishDate&quot;,dateFormat = &quot;yyyy-MM-dd HH:mm:ss&quot;),&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> CarVO <span class="title function_">convertToCarVO</span><span class="params">(CarDto carDto)</span>;</span><br></pre></td></tr></table></figure></li><li><p>source或trager多余的属性，对方没有，不会报错</p></li><li><p>ignore</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapping(target = &quot;color&quot;,ignore = true)</span></span><br></pre></td></tr></table></figure></li><li><p>属性是引用对象的处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapping(source = &quot;driverDTO&quot;,target = &quot;driverVo&quot;)</span>&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> CarVO <span class="title function_">convertToCarVO</span><span class="params">(CarDto carDto)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapping(source = &quot;id&quot;,target = &quot;driverId&quot;)</span></span><br><span class="line"><span class="meta">@Mapping(source = &quot;name&quot;,target = &quot;fullName&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> DriverVO <span class="title function_">driverDTO2DriverVO</span><span class="params">(DriverDTO driverDTO)</span>;</span><br></pre></td></tr></table></figure></li><li><p>批量映射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 集合批量转换</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">abstract</span> List&lt;CarVO&gt; <span class="title function_">dto2vo</span><span class="params">(List&lt;CarDto&gt; carDto)</span>;</span><br></pre></td></tr></table></figure></li></ul><h5 id="AfterMapping和-MappingTarget"><a href="#AfterMapping和-MappingTarget" class="headerlink" title="@AfterMapping和@MappingTarget"></a>@AfterMapping和@MappingTarget</h5><ul><li>自定义属性映射处理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 让mapstruct调用完自动转换的方法后，会来自动调用本方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> carDto</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> carVO</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AfterMapping</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dto2voAfter</span><span class="params">(CarDto carDto,<span class="meta">@MappingTarget</span> CarVO carVO)</span>&#123;</span><br><span class="line">        <span class="comment">//@MappingTarget 表示传来的carVo已经是赋值过的，@MappingTarget来指定目标类是谁</span></span><br><span class="line">        List&lt;PartDto&gt; partDTOS = carDto.getPartDTOS();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">hasPart</span> <span class="operator">=</span> partDTOS != <span class="literal">null</span> &amp;&amp; !partDTOS.isEmpty();</span><br><span class="line">        carVO.setHasPart(hasPart);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="BeanMapping"><a href="#BeanMapping" class="headerlink" title="@BeanMapping"></a>@BeanMapping</h5><ul><li>ignoreByDefault:忽略maostruct的默认映射规则，避免不需要的赋值、避免属性覆盖</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@BeanMapping(ignoreByDefault = true)</span></span><br><span class="line"><span class="meta">@Mapping(source = &quot;id&quot;,target = &quot;id&quot;)</span></span><br><span class="line"><span class="meta">@Mapping(source = &quot;brand&quot;,target = &quot;brandName&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> VehicleVO <span class="title function_">carDTO2vehicleVO</span><span class="params">(CarDto carDto)</span>;</span><br></pre></td></tr></table></figure><h5 id="InheritConfiguration"><a href="#InheritConfiguration" class="headerlink" title="@InheritConfiguration"></a>@InheritConfiguration</h5><ul><li>更新的场景，避免同样的配置写多份</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@BeanMapping(ignoreByDefault = true)</span></span><br><span class="line">    <span class="meta">@Mapping(source = &quot;id&quot;,target = &quot;id&quot;)</span></span><br><span class="line">    <span class="meta">@Mapping(source = &quot;brand&quot;,target = &quot;brandName&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> VehicleVO <span class="title function_">carDTO2vehicleVO</span><span class="params">(CarDto carDto)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@InheritConfiguration</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">updateVehicleVO</span><span class="params">(CarDto carDto,<span class="meta">@MappingTarget</span> VehicleVO vehicleVO)</span>;</span><br></pre></td></tr></table></figure><h5 id="InheritInverseConfiguration"><a href="#InheritInverseConfiguration" class="headerlink" title="@InheritInverseConfiguration"></a>@InheritInverseConfiguration</h5><ul><li>反向映射不用反过来在写一遍,但是只继承@Mapping注解配置，不会继承@BeanMapping</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*@BeanMapping(ignoreByDefault = true)</span></span><br><span class="line"><span class="comment">    @Mapping(source = &quot;id&quot;,target = &quot;id&quot;)</span></span><br><span class="line"><span class="comment">    @Mapping(source = &quot;brandName&quot;,target = &quot;brand&quot;)*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * name:指定使用哪一个方法的配置，写方法的名字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> vehicleVO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@InheritInverseConfiguration(name = &quot;carDTO2vehicleVO&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> CarDto <span class="title function_">vehicleVO2CarDto</span><span class="params">(VehicleVO vehicleVO)</span>;</span><br></pre></td></tr></table></figure><h5 id="与Spring配合使用"><a href="#与Spring配合使用" class="headerlink" title="与Spring配合使用"></a>与Spring配合使用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper(componentModel = &quot;spring&quot;)</span></span><br><span class="line"><span class="comment">//注意：此时可以不用写获取实例INSTANCE的那一行代码了</span></span><br><span class="line"><span class="comment">//其他的类就可以使用@Autowriter或者@Resource了</span></span><br></pre></td></tr></table></figure><p>实质就是给这个类加了<code>@Component</code>注解</p><h5 id="所有的测试用例"><a href="#所有的测试用例" class="headerlink" title="所有的测试用例"></a>所有的测试用例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MapStructTestApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> CarConvert carConvert;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test6</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">VehicleVO</span> <span class="variable">vehicleVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VehicleVO</span>();</span><br><span class="line">        vehicleVO.setId(<span class="number">999L</span>);</span><br><span class="line">        vehicleVO.setBrandName(<span class="string">&quot;别克&quot;</span>);</span><br><span class="line">        vehicleVO.setPrice(<span class="number">132432d</span>);</span><br><span class="line">        <span class="type">CarDto</span> <span class="variable">carDto</span> <span class="operator">=</span> carConvert.vehicleVO2CarDto(vehicleVO);</span><br><span class="line">        System.out.println(carDto);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CarDto</span> <span class="variable">carDto</span> <span class="operator">=</span> buildCarDto();</span><br><span class="line">        <span class="type">CarVO</span> <span class="variable">carVO</span> <span class="operator">=</span> CarConvert.INSTANCE.convertToCarVO(carDto);</span><br><span class="line">        System.out.println(carVO);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CarDto <span class="title function_">buildCarDto</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">CarDto</span> <span class="variable">carDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CarDto</span>();</span><br><span class="line">        carDto.setId(<span class="number">330L</span>);</span><br><span class="line">        carDto.setVin(<span class="string">&quot;vin12343543&quot;</span>);</span><br><span class="line">        carDto.setPrice(<span class="number">12424234d</span>);</span><br><span class="line">        carDto.setTotalPrice(<span class="number">232343434d</span>);</span><br><span class="line">        carDto.setPublishDate(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        carDto.setBrand(<span class="string">&quot;奥迪&quot;</span>);</span><br><span class="line">        carDto.setColor(<span class="string">&quot;白色&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">PartDto</span> <span class="variable">partDto1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PartDto</span>();</span><br><span class="line">        partDto1.setPartId(<span class="number">1L</span>);</span><br><span class="line">        partDto1.setPartName(<span class="string">&quot;多功能方向盘&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">PartDto</span> <span class="variable">partDto2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PartDto</span>();</span><br><span class="line">        partDto2.setPartId(<span class="number">2L</span>);</span><br><span class="line">        partDto2.setPartName(<span class="string">&quot;智能车门&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;PartDto&gt; partDtoList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        partDtoList.add(partDto1);</span><br><span class="line">        partDtoList.add(partDto2);</span><br><span class="line"></span><br><span class="line">        carDto.setPartDTOS(partDtoList);</span><br><span class="line"></span><br><span class="line">        <span class="type">DriverDTO</span> <span class="variable">driverDTO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DriverDTO</span>();</span><br><span class="line">        driverDTO.setId(<span class="number">88L</span>);</span><br><span class="line">        driverDTO.setName(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">        carDto.setDriverDTO(driverDTO);</span><br><span class="line">        <span class="keyword">return</span> carDto;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">CarDto</span> <span class="variable">carDto</span> <span class="operator">=</span> buildCarDto();</span><br><span class="line">        <span class="type">CarVO</span> <span class="variable">carVO</span> <span class="operator">=</span> CarConvert.INSTANCE.convertToCarVO(carDto);</span><br><span class="line">        System.out.println(carVO);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">CarDto</span> <span class="variable">carDto</span> <span class="operator">=</span> buildCarDto();</span><br><span class="line">        ArrayList&lt;CarDto&gt; carDtos = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        carDtos.add(carDto);</span><br><span class="line"></span><br><span class="line">        List&lt;CarVO&gt; carVOS = CarConvert.INSTANCE.dto2vo(carDtos);</span><br><span class="line">        System.out.println(carVOS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">CarDto</span> <span class="variable">carDto</span> <span class="operator">=</span> buildCarDto();</span><br><span class="line">        <span class="type">VehicleVO</span> <span class="variable">vehicleVO</span> <span class="operator">=</span> CarConvert.INSTANCE.carDTO2vehicleVO(carDto);</span><br><span class="line">        <span class="type">CarDto</span> <span class="variable">carDto1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CarDto</span>();</span><br><span class="line">        <span class="comment">//通过carDto1的属性值来更新已经存在的vehicle对象</span></span><br><span class="line">        carDto1.setBrand(<span class="string">&quot;迈巴赫&quot;</span>);</span><br><span class="line">        CarConvert.INSTANCE.updateVehicleVO(carDto1,vehicleVO);</span><br><span class="line">        System.out.println(vehicleVO);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">CarDto</span> <span class="variable">carDto</span> <span class="operator">=</span> buildCarDto();</span><br><span class="line">        <span class="type">VehicleVO</span> <span class="variable">vehicleVO</span> <span class="operator">=</span> CarConvert.INSTANCE.carDTO2vehicleVO(carDto);</span><br><span class="line">        System.out.println(vehicleVO);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 拓展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MapStruct </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式Servlet容器</title>
      <link href="/post/80a77146.html"/>
      <url>/post/80a77146.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>嵌入式Servlet容器</p></blockquote><span id="more"></span><p>Under the hood, Spring Boot uses a different type of <code>ApplicationContext</code> for embedded servlet container support. The <code>ServletWebServerApplicationContext</code> is a special type of <code>WebApplicationContext</code> that bootstraps itself by searching for a single <code>ServletWebServerFactory</code> bean. Usually a <code>TomcatServletWebServerFactory</code>, <code>JettyServletWebServerFactory</code>, or <code>UndertowServletWebServerFactory</code> has been auto-configured.</p><p>在底层，SpringBoot 使用不同类型的 ApplicationContext 来支持嵌入式 servlet 容器。ServletWebServerApplicationContext 是 WebApplicationContext 的一种特殊类型，它通过搜索单个 ServletWebServerFactory bean 自我引导。通常，TomcatServletWebServerFactory、 JettyServletWebServerFactory 或 UndertowServletWebServerFactory 已被自动配置。</p><p>上文摘自<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/web.html#web.servlet.embedded-container.application-context">Spring官方文档</a></p><h2 id="1、切换嵌入式Servlet容器"><a href="#1、切换嵌入式Servlet容器" class="headerlink" title="1、切换嵌入式Servlet容器"></a>1、切换嵌入式Servlet容器</h2><ul><li>默认支持的webServer<ul><li>Tomcat、Jetty、Undertow</li><li>ServletWebServerApplicationContext 容器启动寻找ServletWebServerFactory 并引导创建服务器</li></ul></li><li>切换服务器</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>原理</p></li><li><ul><li>SpringBoot应用启动发现当前是Web应用。web场景包-导入tomcat</li><li>web应用会创建一个web版的ioc容器 <code>ServletWebServerApplicationContext</code> </li><li><code>ServletWebServerApplicationContext</code> 启动的时候寻找 <code>**ServletWebServerFactory**``（Servlet 的web服务器工厂---&gt; Servlet 的web服务器）</code> </li><li>SpringBoot底层默认有很多的WebServer工厂；<code>TomcatServletWebServerFactory</code>, <code>JettyServletWebServerFactory</code>, or <code>UndertowServletWebServerFactory</code></li><li><code>底层直接会有一个自动配置类。ServletWebServerFactoryAutoConfiguration</code></li><li><code>ServletWebServerFactoryAutoConfiguration导入了ServletWebServerFactoryConfiguration（配置类）</code></li><li><code>ServletWebServerFactoryConfiguration 配置类 根据动态判断系统中到底导入了那个Web服务器的包。（默认是web-starter导入tomcat包），容器中就有 TomcatServletWebServerFactory</code></li><li><code>TomcatServletWebServerFactory 创建出Tomcat服务器并启动；TomcatWebServer 的构造器拥有初始化方法initialize---this.tomcat.start();</code></li><li><code>内嵌服务器，就是手动把启动服务器的代码调用（tomcat核心jar包存在）</code></li></ul></li></ul><h2 id="2、定制Servlet容器"><a href="#2、定制Servlet容器" class="headerlink" title="2、定制Servlet容器"></a>2、定制Servlet容器</h2><ul><li><p>实现  <strong>WebServerFactoryCu</strong>stomizer<ConfigurableServletWebServerFactory> </p></li><li><ul><li>把配置文件的值和<code>**ServletWebServerFactory 进行绑定**</code></li></ul></li><li><p>修改配置文件 <strong>server.xxx</strong></p></li><li>直接自定义 <strong>ConfigurableServletWebServerFactory</strong> </li></ul><p><strong>xxxxx</strong>Customizer：定制化器，可以改变xxxx的默认规则**</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.web.server.WebServerFactoryCustomizer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.server.ConfigurableServletWebServerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomizationBean</span> <span class="keyword">implements</span> <span class="title class_">WebServerFactoryCustomizer</span>&lt;ConfigurableServletWebServerFactory&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">customize</span><span class="params">(ConfigurableServletWebServerFactory server)</span> &#123;</span><br><span class="line">        server.setPort(<span class="number">9000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web原生组件注入</title>
      <link href="/post/e63490f2.html"/>
      <url>/post/e63490f2.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Web原生组件注入（Servlet、Filter、Listener）</p></blockquote><span id="more"></span><h2 id="方式一、使用Servlet-Api"><a href="#方式一、使用Servlet-Api" class="headerlink" title="方式一、使用Servlet Api"></a>方式一、使用Servlet Api</h2><h4 id="servlet"><a href="#servlet" class="headerlink" title="servlet"></a>servlet</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/my&quot;)</span><span class="comment">//直接响应，不经过Spring的拦截器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        response.getWriter().write(<span class="string">&quot;66666&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主配置类还要加上<font color="orange">@ServletComponentScan(basePackages = “work.xiaoying.admin”)</font></p><h4 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@WebFilter(urlPatterns = &#123;&quot;/css/*&quot;,&quot;/images/*&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;MyFilter初始化完成&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;MyFilter销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;MyFilter工作&quot;</span>);</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>主配置类还要加上<font color="orange">@ServletComponentScan(basePackages = “work.xiaoying.admin”)</font></p><h4 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyListener</span> <span class="keyword">implements</span> <span class="title class_">ServletContextListener</span>, HttpSessionListener, HttpSessionAttributeListener &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyListener</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;MyListener监听到项目初始化完成&quot;</span>);</span><br><span class="line">        <span class="comment">/* This method is called when the servlet context is initialized(when the Web application is deployed). */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;MyListener监听到项目销毁&quot;</span>);</span><br><span class="line">        <span class="comment">/* This method is called when the servlet Context is undeployed or Application Server shuts down. */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sessionCreated</span><span class="params">(HttpSessionEvent se)</span> &#123;</span><br><span class="line">        <span class="comment">/* Session is created. */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sessionDestroyed</span><span class="params">(HttpSessionEvent se)</span> &#123;</span><br><span class="line">        <span class="comment">/* Session is destroyed. */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attributeAdded</span><span class="params">(HttpSessionBindingEvent sbe)</span> &#123;</span><br><span class="line">        <span class="comment">/* This method is called when an attribute is added to a session. */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attributeRemoved</span><span class="params">(HttpSessionBindingEvent sbe)</span> &#123;</span><br><span class="line">        <span class="comment">/* This method is called when an attribute is removed from a session. */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attributeReplaced</span><span class="params">(HttpSessionBindingEvent sbe)</span> &#123;</span><br><span class="line">        <span class="comment">/* This method is called when an attribute is replaced in a session. */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>主配置类还要加上<font color="orange">@ServletComponentScan(basePackages = “work.xiaoying.admin”)</font></p><p>扩展：DispatcherServlet如何注册进来的</p><ul><li>容器中自动配置了DispatcherServlet属性绑定到<font color="orange">WebMvcProperties</font>，对应的配置文件项是<font color="orange">spring.mvc</font></li><li>通过 ServletRegistrationBean<DispatcherServlet>把DispatcherServlet注册进来</li><li>默认映射路径是/</li></ul><p>Tomcat-Servlet</p><ul><li>多个Servlet都能处理到同一层路径，精确优先原则</li></ul><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202206130043369.png" alt="image-20220613004258138"></p><h2 id="方式二、使用RegistrationBean"><a href="#方式二、使用RegistrationBean" class="headerlink" title="方式二、使用RegistrationBean"></a>方式二、使用RegistrationBean</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRegistConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServletRegistrationBean <span class="title function_">myServlet</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MyServlet</span> <span class="variable">myServlet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyServlet</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ServletRegistrationBean</span>(myServlet,<span class="string">&quot;/my&quot;</span>,<span class="string">&quot;/my02&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FilterRegistrationBean <span class="title function_">MyFilter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MyFilter</span> <span class="variable">myFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyFilter</span>();</span><br><span class="line">        <span class="comment">//return new FilterRegistrationBean(myFilter,myServlet());</span></span><br><span class="line">        <span class="type">FilterRegistrationBean</span> <span class="variable">filterRegistrationBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>(myFilter);</span><br><span class="line">        filterRegistrationBean.setUrlPatterns(Arrays.asList(<span class="string">&quot;/my&quot;</span>,<span class="string">&quot;/css&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> filterRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServletListenerRegistrationBean <span class="title function_">myListener</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MyListener</span> <span class="variable">myListener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyListener</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ServletListenerRegistrationBean</span>(myListener);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot错误处理机制</title>
      <link href="/post/dbaf01a7.html"/>
      <url>/post/dbaf01a7.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>SpringBoot错误处理机制</p></blockquote><span id="more"></span><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><h4 id="1、默认规则"><a href="#1、默认规则" class="headerlink" title="1、默认规则"></a>1、默认规则</h4><ul><li>默认情况下，SpringBoot提供<code>/error</code>处理所有错误的映射</li><li>对于机器客户端，它将生成JSON响应，其中包含错误，HTTP状态和异常消息的详细信息。对于浏览器客户端，它将相应一个<font color="orange">whitelabel</font>视图错误，以HTML格式呈现相应的数据</li><li>要对其进行自定义，可以添加<code>view</code>解析为<code>error</code></li><li>要完全替换默认行为，可以实现<code>ErrorController</code>并注册该类型的Bean定义，或添加<code>ErrorAttributes类型的组件</code>以使用现有机机制但替换其内容</li><li><code>error/</code>下的<font color="orange">4xx,5xx</font>页面会被自动解析</li></ul><h4 id="2、定制错误处理逻辑"><a href="#2、定制错误处理逻辑" class="headerlink" title="2、定制错误处理逻辑"></a>2、定制错误处理逻辑</h4><ol><li><p>自定义错误页</p><ol><li>error/404.html;有精确的错误状态码页面就精准匹配，没有就找4xx.html页面，如果都没有那么就触发白页效果</li></ol></li><li><p>@ControllerAdvice+@ExceptionHandler处理全局异常，底层是 <strong>ExceptionHandlerExceptionResolver 支持的</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(&#123;ArithmeticException.class,NullPointerException.class&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">handlerArithException</span><span class="params">(Exception e)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;异常是:&#123;&#125;&quot;</span>,e);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>@ResponseStatus+自定义异常，底层是 <strong>ResponseStatusExceptionResolver ，把responsestatus注解的信息底层调用</strong> <strong>response.sendError(statusCode, resolvedReason)；执行sendError方法后，此次请求就结束了，tomcat发送的/error</strong></p><ol><li>spring底层的异常，如参数类型转换异常：DefaultHandlerExceptionResolver处理框架底层的异常<ol><li>response.sendError(HttpServletResponse.SC_BAD_REQUEST,ex.getMessage())</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseStatus(value = HttpStatus.FORBIDDEN,reason = &quot;用户数量太多&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserTooManyException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserTooManyException</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserTooManyException</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>自定义实现HandlerExceptionResolver处理异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数字越小，优先级越高，不设置的话，排在最后边，第二个组合的解析之后就返回了，就轮不到我们自定义的了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Order(value = Ordered.HIGHEST_PRECEDENCE)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomerHandlerExceptionResolver</span> <span class="keyword">implements</span> <span class="title class_">HandlerExceptionResolver</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">resolveException</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            response.sendError(<span class="number">511</span>,<span class="string">&quot;自定义错误&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ErrorViewResolver实现自定义处理异常</p><ol><li>response.sendError,error请求会转给controller</li><li>异常没有任何人能处理，tomcat底层response.sendError,error请求就会转给controller</li><li><font color="red">basicErrorController</font>要去的页面地址是ErrorViewResolver</li></ol></li></ol><h4 id="3、异常处理自动配置原理"><a href="#3、异常处理自动配置原理" class="headerlink" title="3、异常处理自动配置原理"></a>3、异常处理自动配置原理</h4><ul><li><font color="orange">ErrorMvcAutoConfiguration</font>自动配置异常处理规则- 容器中的组件：类型：<font color="orange">DefaultErrorAttributes</font>–>id:<font color="orange">errorAttributes</font><ul><li><p>public class DefaultErrorAttributes implements ErrorAttributes, HandlerExceptionResolver, Ordered {}</p></li><li><p>DefaultErrorAttributes:定义错误页面中可以包含哪些数据</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202206012115046.png" alt="image-20220601211545917"></p></li></ul><ul><li><p>容器中的组件：类型:<font color="orange">BasicErrorController</font>–&gt;id:<font color="orange">basicErrorController</font>(json+白页响应适配)</p><ul><li>处理默认<code>/error</code>路径的请求；页面响应<font color="orange">new ModelAndView(“error”,model);</font></li><li>容器中有组件<font color="orange">View</font>–&gt;id是<font color="orange">error</font>(响应默认错误页)</li><li>容器中放组件<font color="orange">BeanNameViewResolver</font>(视图解析器)；按照返回的视图名作为组件的id去容器中找View对象</li></ul></li><li><p>容器中的组件：类型<font color="orange">DefaultErrorViewResolver</font>–&gt;id:<font color="orange">conventionErrorViewResolver</font></p><ul><li>如果发生错误，会以HTTP的状态码作为视图地址(viewName)，找到真正的页面</li><li>error/4xx、5xx.html</li></ul></li></ul><p>如果想要返回页面，就会找到error视图[StaticView]。默认是一个白页</p></li></ul><h4 id="4、异常处理步骤流程"><a href="#4、异常处理步骤流程" class="headerlink" title="4、异常处理步骤流程"></a>4、异常处理步骤流程</h4><ol><li><p>执行目标方法，目标方法运行期间有任何异常都会被catch、而且标志当前请求结束，用dispatchException保存异常信息</p></li><li><p>进入视图解析流程，processDispatchResult(processedRequest, response, mappedHandler, <strong>mv</strong>,<font color="red"> <strong>dispatchException</strong></font>);</p></li><li><p><strong>mv=processHandlerException;</strong>处理handler发生的异常，处理完返回ModelAndView</p><ol><li><p>遍历所有的handlerExceptionresolvers，看谁能处理当前异常<font color="red">【handlerExceptionResolver处理器异常解析器】</font></p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202206021523535.png" alt="image-20220602152332463"></p></li><li><p>系统默认的异常解析器</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202206021520417.png" alt="image-20220602152050003"></p><ol><li><p><strong>DefaultErrorAttributes先来处理异常,把异常信息保存到request域，并且返回null；</strong></p></li><li><p>默认没有任何人能处理异常，所以异常会被抛出</p><ol><li><p>如果没有任何人能处理最终就会发送/error请求，会被底层的<font color="orange">BasicErrorController</font>处理</p></li><li><p>解析错误视图，遍历所有的<font color="orange">ErrorViewResolver</font>看谁能解析</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202206021544792.png" alt="image-20220602154456745"></p></li><li><p>默认的<font color="orange">DefaultErrorViewResolver</font>作用是把响应状态码作为错误页的地址，error/500.html</p></li><li><p>模板引擎最终响应这个页面error/500.html</p></li></ol></li></ol></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot文件上传</title>
      <link href="/post/fae035d5.html"/>
      <url>/post/fae035d5.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>SpringBoot文件上传</p></blockquote><span id="more"></span><h4 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/upload&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="文件上传代码"><a href="#文件上传代码" class="headerlink" title="文件上传代码"></a>文件上传代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(<span class="meta">@RequestParam(&quot;email&quot;)</span> String email,</span></span><br><span class="line"><span class="params">                         <span class="meta">@RequestParam(&quot;username&quot;)</span> String username,</span></span><br><span class="line"><span class="params">                         <span class="meta">@RequestPart(&quot;headerImg&quot;)</span> MultipartFile headerImg,</span></span><br><span class="line"><span class="params">                         <span class="meta">@RequestPart(&quot;photos&quot;)</span> MultipartFile[] photos)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;上传的信息：email=&#123;&#125;，username=&#123;&#125;，headerImg=&#123;&#125;，photos=&#123;&#125;&quot;</span>,</span><br><span class="line">                email,username,headerImg.getSize(),photos.length);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!headerImg.isEmpty())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> headerImg.getOriginalFilename();</span><br><span class="line">            headerImg.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\&quot;</span>+originalFilename));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(photos.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (MultipartFile photo : photos) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!photo.isEmpty())&#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> photo.getOriginalFilename();</span><br><span class="line">                    photo.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\+originalFilename));</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">     return &quot;</span>main<span class="string">&quot;;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><ul><li>文件上传自动配置类<font color="orange"><strong>MultipartAutoConfiguration</strong></font></li><li>自动配置好了<font color="orange"><strong>StandardServletMultipartResolver</strong></font>【文件上传解析器】</li><li><font color="orange">FileCopyUtils</font>实现文件流的拷贝</li></ul><ol><li>请求进来使用文件上传解析器判断并封装<font color="orange">(resolveMultipart,返回MultiPartHttpServletRequest)</font>文件上传请求</li><li>参数解析器来解析请求中的文件内容封装成<font color="orange">MultipartFile</font></li><li>将request中文件信息封装成为一个Map；<font color="orange">MultiValueMap<String,MultipartFile></font></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>视图解析器与视图源码分析</title>
      <link href="/post/6d89c38b.html"/>
      <url>/post/6d89c38b.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>视图解析器与视图源码分析</p></blockquote><span id="more"></span><h2 id="视图解析原理流程"><a href="#视图解析原理流程" class="headerlink" title="视图解析原理流程"></a>视图解析原理流程</h2><p>视图解析：SpringBoot默认不支持JSP，需要引入第三方模板引擎技术来实现页面的渲染</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205311035014.png" alt="image-20220531103535372"></p><ol><li>目标方法处理过程中，所有的数据都会被放在<font color="orange">ModelAndViewContainer</font>里面,包括数据和视图地址</li><li>方法的参数是一个自定义类型对象(从请求参数中确定的)，把他重新放在<font color="orange">ModelAndViewContainer</font></li><li>任何目标方法执行完以后都会返回<font color="orange">ModelAndView(数据和视图地址)</font></li><li><font color="orange">processDispatchResult</font>处理派发结果（页面该如何响应）1. <font color="orange">render(mv,request,response)</font>进行页面渲染逻辑   1. 根据方法的String返回值得到<font color="orange">View</font>对象[定义了页面的渲染逻辑]      1. 根据所有的视图解析器尝试是否能根据当前返回值得到View对象      2. 得到了redirect:/main.html–>Thymeleaf <font color="orange">new RedirectView()</font>      3. <font color="orange">ContentNegotiationViewResolver</font>里面包含了下面所有的视图解析器，内部还是利用下面的所有视图解析器得到视图对象      4. <font color="orange">view.render(mv.getMethodInternal(),request,response);</font>视图对象调用自定义的render进行页面渲染         1. <font color="orange">RedirectView</font>如何渲染（重定向到一个页面）            1. 获取目标地址URL            2. <font color="orange">response.sendRedirect(encodedURL)</font></li></ol><p>测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">main</span><span class="params">(User user, HttpSession session, Model model)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isEmpty(user.getUserName())&amp;&amp;StringUtils.hasLength(user.getPassword()))&#123;</span><br><span class="line">            session.setAttribute(<span class="string">&quot;loginUser&quot;</span>,user);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;redirect:/main.html&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;账号密码错误&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>采用的返回值处理器</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205271615107.png" alt="image-20220527161542964"></p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205271641708.png" alt="image-20220527164138310"></p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205301917888.png" alt="image-20220530191727799"></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot参数解析原理</title>
      <link href="/post/deb95044.html"/>
      <url>/post/deb95044.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>SpringBoot参数解析原理</p></blockquote><span id="more"></span><h2 id="各种类型参数解析原理"><a href="#各种类型参数解析原理" class="headerlink" title="各种类型参数解析原理"></a>各种类型参数解析原理</h2><ul><li>HandlerMapping中找到能处理请求的Handler(Controller.method())</li></ul><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205201525121.png" alt="image-20220520152550879"></p><ul><li>为当前Handler找一个适配器HandlerAdapter，<strong>RequestMappingHandlerAdapter</strong></li></ul><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205201526298.png" alt="image-20220520152626230"></p><h4 id="1、HandlerAdapter"><a href="#1、HandlerAdapter" class="headerlink" title="1、HandlerAdapter"></a>1、HandlerAdapter</h4><p>进入<code>getHandlerAdapter</code>方法</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205201527354.png" alt="image-20220520152727180"></p><p>找到了四个handlerAdapter</p><p>第0个支持方法上标注@RequestMapping注解的</p><p>第1个支持函数式编程的</p><p>……</p><p>进入<code>adapter.supports(handler)</code>方法</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205201531466.png" alt="image-20220520153131274"></p><h4 id="2、执行目标方法"><a href="#2、执行目标方法" class="headerlink" title="2、执行目标方法"></a>2、执行目标方法</h4><p>退出方法继续执行，我们在<font color="orange">DispatcherServlet.java</font>的第1040行找到了真正能执行目标方法的语句</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205201537354.png" alt="image-20220520153718235"></p><p>进入handle方法</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205201539480.png" alt="image-20220520153910346"></p><p>进入handleInternal方法</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205201540634.png" alt="image-20220520154055268"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mav = invokeHandlerMethod(request, response, handlerMethod); <span class="comment">//执行目标方法</span></span><br></pre></td></tr></table></figure><h4 id="3、参数解析器"><a href="#3、参数解析器" class="headerlink" title="3、参数解析器"></a>3、参数解析器</h4><p>进入invokeHandlerMethod方法，我们发现了26个参数解析器，这些是参数解析的核心，确定将要执行的目标方法的每一个参数值是什么，SpringMVC目标方法能写多少种参数类型。取决于参数解析器。</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205201543683.png" alt="image-20220520154324401"></p><p>我们可以查看参数解析器</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205201547273.png" alt="image-20220520154751097"></p><p>参数解析器工作的两个步骤</p><ul><li>当前解析器是否支持解析这种参数</li><li>支持就调用 resolveArgument</li></ul><h4 id="4、返回值处理器"><a href="#4、返回值处理器" class="headerlink" title="4、返回值处理器"></a>4、返回值处理器</h4><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205201554137.png" alt="image-20220520155413880"></p><p>执行目标方法</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205201557170.png" alt="image-20220520155704881"></p><p>我们进入invokeAndHandle方法，如下如所示是真正执行目标方法并得到返回值</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205201600594.png" alt="image-20220520160003320"></p><p>进入invokeRequest方法，可以看到第134行获取了方法参数值</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205201603153.png" alt="image-20220520160311842"></p><h4 id="4、如何确定目标方法的每一个参数的值"><a href="#4、如何确定目标方法的每一个参数的值" class="headerlink" title="4、如何确定目标方法的每一个参数的值"></a>4、如何确定目标方法的每一个参数的值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//============InvocableHandlerMethod.java==========================</span></span><br><span class="line"><span class="keyword">protected</span> Object[] getMethodArgumentValues(NativeWebRequest request, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span><br><span class="line">Object... providedArgs) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">MethodParameter[] parameters = getMethodParameters();</span><br><span class="line"><span class="keyword">if</span> (ObjectUtils.isEmpty(parameters)) &#123;</span><br><span class="line"><span class="keyword">return</span> EMPTY_ARGS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Object[] args = <span class="keyword">new</span> <span class="title class_">Object</span>[parameters.length];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; parameters.length; i++) &#123;</span><br><span class="line"><span class="type">MethodParameter</span> <span class="variable">parameter</span> <span class="operator">=</span> parameters[i];</span><br><span class="line">parameter.initParameterNameDiscovery(<span class="built_in">this</span>.parameterNameDiscoverer);</span><br><span class="line">args[i] = findProvidedArgument(parameter, providedArgs);</span><br><span class="line"><span class="keyword">if</span> (args[i] != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">this</span>.resolvers.supportsParameter(parameter)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(formatArgumentError(parameter, <span class="string">&quot;No suitable resolver&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">args[i] = <span class="built_in">this</span>.resolvers.resolveArgument(parameter, mavContainer, request, <span class="built_in">this</span>.dataBinderFactory);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line"><span class="comment">// Leave stack trace for later, exception may actually be resolved and handled...</span></span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">exMsg</span> <span class="operator">=</span> ex.getMessage();</span><br><span class="line"><span class="keyword">if</span> (exMsg != <span class="literal">null</span> &amp;&amp; !exMsg.contains(parameter.getExecutable().toGenericString())) &#123;</span><br><span class="line">logger.debug(formatArgumentError(parameter, exMsg));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> args;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205201608527.png" alt="image-20220520160831383"></p><p>判断参数解析器支不支持解析当前参数</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205201612637.png" alt="image-20220520161239561"></p><p>进入supportsParameter方法</p><h4 id="5-1、挨个判断所有参数解析器中哪个支持解析当前参数"><a href="#5-1、挨个判断所有参数解析器中哪个支持解析当前参数" class="headerlink" title="5.1、挨个判断所有参数解析器中哪个支持解析当前参数"></a>5.1、挨个判断所有参数解析器中哪个支持解析当前参数</h4><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205201613180.png" alt="image-20220520161342835"></p><h4 id="5-2、解析这个参数的值"><a href="#5-2、解析这个参数的值" class="headerlink" title="5.2、解析这个参数的值"></a>5.2、解析这个参数的值</h4><p>调用各自 HandlerMethodArgumentResolver 的 resolveArgument 方法即可</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205201625315.png" alt="image-20220520162506249"></p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205201631736.png" alt="image-20220520163119391"></p><h2 id="Servlet-API参数解析原理"><a href="#Servlet-API参数解析原理" class="headerlink" title="Servlet API参数解析原理"></a>Servlet API参数解析原理</h2><ol><li>WebRequest</li><li>ServletRequest</li><li>MultipartRequest</li><li>HttpSession</li><li>javax.servlet.http.PushBuilder</li><li>Principal</li><li>InputStream</li><li>Reader</li><li>HttpMethod</li><li>Locale</li><li>TimeZone</li><li>Zoneld</li></ol><p>在我们上面分析的26个参数解析器中<font color="orange"><strong>ServletRequestMethodArgumentResolver</strong></font>负责解析以上的参数</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205201848397.png" alt="image-20220520184828210"></p><h2 id="复杂参数"><a href="#复杂参数" class="headerlink" title="复杂参数"></a>复杂参数</h2><font color="orange">Map、Model（map、model里面的数据会被放在request的请求域  request.setAttribute）</font>、Errors/BindingResult、<font color="orange">RedirectAttributes（ 重定向携带数据）、ServletResponse（response）</font>、SessionStatus、UriComponentsBuilder、ServletUriComponentsBuilderMap类型的参数会被<font color="orange">MapMthodProcessor</font>处理<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapMethodProcessor</span> <span class="keyword">implements</span> <span class="title class_">HandlerMethodArgumentResolver</span>, HandlerMethodReturnValueHandler &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supportsParameter</span><span class="params">(MethodParameter parameter)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> Map.class.isAssignableFrom(parameter.getParameterType()) &amp;&amp;</span><br><span class="line">parameter.getParameterAnnotations().length == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">resolveArgument</span><span class="params">(MethodParameter parameter, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span></span><br><span class="line"><span class="params">NativeWebRequest webRequest, <span class="meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">Assert.state(mavContainer != <span class="literal">null</span>, <span class="string">&quot;ModelAndViewContainer is required for model exposure&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> mavContainer.getModel();</span><br><span class="line">&#125;</span><br><span class="line">....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>Map类型的参数会返回`mavContainer.getModel()`,我们进入getModel方法里会发现给我们返回了`BindingAwareModelMap`，这个既是model也是mapModel类型的参数会被<font color="orange">ModelMthodProcessor</font>处理<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ModelMethodProcessor</span> <span class="keyword">implements</span> <span class="title class_">HandlerMethodArgumentResolver</span>, HandlerMethodReturnValueHandler &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supportsParameter</span><span class="params">(MethodParameter parameter)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> Model.class.isAssignableFrom(parameter.getParameterType());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">resolveArgument</span><span class="params">(MethodParameter parameter, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span></span><br><span class="line"><span class="params">NativeWebRequest webRequest, <span class="meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">Assert.state(mavContainer != <span class="literal">null</span>, <span class="string">&quot;ModelAndViewContainer is required for model exposure&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> mavContainer.getModel();</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>我们可以看到model和map最终的处理方法都是调用的<font color="orange"> mavContainer.getModel();</font><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205201938214.png" alt="image-20220520193812165"></p><p>第0个参数处理的是map，第1个处理的是model，我们可以看到它们都是相同的对象</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205201954749.png" alt="image-20220520195428655"></p><p>处理返回结果</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205201956680.png" alt="image-20220520195646536"></p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205201957537.png" alt="image-20220520195721349"></p><p>向mavContainer设置视图</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205201959049.png" alt="image-20220520195954802"></p><h4 id="6、目标方法执行完成"><a href="#6、目标方法执行完成" class="headerlink" title="6、目标方法执行完成"></a>6、目标方法执行完成</h4><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205202006557.png" alt="image-20220520200630424"></p><p>将所有的数据都放在 <strong>ModelAndViewContainer</strong>；包含要去的页面地址View。还包含Model数据。</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205202006953.png" alt="image-20220520200657799"></p><h4 id="7、处理派发结果"><a href="#7、处理派发结果" class="headerlink" title="7、处理派发结果"></a>7、处理派发结果</h4><p><strong>processDispatchResult</strong>(processedRequest, response, mappedHandler, mv, dispatchException);</p><p>renderMergedOutputModel(mergedModel, getRequestToExpose(request), response);</p><p>接下来我们关注一下model里的数据何时被放入到request域中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DispatcherServlet</span> <span class="keyword">extends</span> <span class="title class_">FrameworkServlet</span> &#123;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            </span><br><span class="line">            ...</span><br><span class="line"></span><br><span class="line"><span class="comment">// Actually invoke the handler.</span></span><br><span class="line">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line">            </span><br><span class="line">            ...</span><br><span class="line">            </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">dispatchException = ex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line"><span class="comment">// As of 4.3, we&#x27;re processing Errors thrown from handler methods as well,</span></span><br><span class="line"><span class="comment">// making them available for @ExceptionHandler methods and other scenarios.</span></span><br><span class="line">dispatchException = <span class="keyword">new</span> <span class="title class_">NestedServletException</span>(<span class="string">&quot;Handler dispatch failed&quot;</span>, err);</span><br><span class="line">&#125;</span><br><span class="line">      <span class="comment">//处理分发结果,重点关注这个方法</span></span><br><span class="line">processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class="line">&#125;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processDispatchResult</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class="line"><span class="params"><span class="meta">@Nullable</span> HandlerExecutionChain mappedHandler, <span class="meta">@Nullable</span> ModelAndView mv,</span></span><br><span class="line"><span class="params"><span class="meta">@Nullable</span> Exception exception)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line"><span class="comment">// Did the handler return a view to render?</span></span><br><span class="line"><span class="keyword">if</span> (mv != <span class="literal">null</span> &amp;&amp; !mv.wasCleared()) &#123;</span><br><span class="line">render(mv, request, response);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">render</span><span class="params">(ModelAndView mv, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">View view;</span><br><span class="line"><span class="type">String</span> <span class="variable">viewName</span> <span class="operator">=</span> mv.getViewName();</span><br><span class="line"><span class="keyword">if</span> (viewName != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">// We need to resolve the view name.</span></span><br><span class="line">view = resolveViewName(viewName, mv.getModelInternal(), locale, request);</span><br><span class="line"><span class="keyword">if</span> (view == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServletException</span>(<span class="string">&quot;Could not resolve view with name &#x27;&quot;</span> + mv.getViewName() +</span><br><span class="line"><span class="string">&quot;&#x27; in servlet with name &#x27;&quot;</span> + getServletName() + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// No need to lookup: the ModelAndView object contains the actual View object.</span></span><br><span class="line">view = mv.getView();</span><br><span class="line"><span class="keyword">if</span> (view == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServletException</span>(<span class="string">&quot;ModelAndView [&quot;</span> + mv + <span class="string">&quot;] neither contains a view name nor a &quot;</span> +</span><br><span class="line"><span class="string">&quot;View object in servlet with name &#x27;&quot;</span> + getServletName() + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">view.render(mv.getModelInternal(), request, response);</span><br><span class="line">        </span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InternalResourceView</span> <span class="keyword">extends</span> <span class="title class_">AbstractUrlBasedView</span> &#123;</span><br><span class="line">    </span><br><span class="line"> <span class="meta">@Override</span><span class="comment">//该方法在AbstractView，AbstractUrlBasedView继承了AbstractView</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">render</span><span class="params">(<span class="meta">@Nullable</span> Map&lt;String, ?&gt; model, HttpServletRequest request,</span></span><br><span class="line"><span class="params">HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">        </span><br><span class="line">Map&lt;String, Object&gt; mergedModel = createMergedOutputModel(model, request, response);</span><br><span class="line">prepareResponse(request, response);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//看下一个方法实现</span></span><br><span class="line">renderMergedOutputModel(mergedModel, getRequestToExpose(request), response);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">renderMergedOutputModel</span><span class="params">(</span></span><br><span class="line"><span class="params">Map&lt;String, Object&gt; model, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Expose the model object as request attributes.</span></span><br><span class="line">        <span class="comment">// 暴露模型作为请求域属性</span></span><br><span class="line">exposeModelAsRequestAttributes(model, request);<span class="comment">//&lt;---重点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Expose helpers as request attributes, if any.</span></span><br><span class="line">exposeHelpers(request);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Determine the path for the request dispatcher.</span></span><br><span class="line"><span class="type">String</span> <span class="variable">dispatcherPath</span> <span class="operator">=</span> prepareForRendering(request, response);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Obtain a RequestDispatcher for the target resource (typically a JSP).</span></span><br><span class="line"><span class="type">RequestDispatcher</span> <span class="variable">rd</span> <span class="operator">=</span> getRequestDispatcher(request, dispatcherPath);</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//该方法在AbstractView，AbstractUrlBasedView继承了AbstractView</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">exposeModelAsRequestAttributes</span><span class="params">(Map&lt;String, Object&gt; model,</span></span><br><span class="line"><span class="params">HttpServletRequest request)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//这里真正的放入到了请求域中</span></span><br><span class="line">model.forEach((name, value) -&gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (value != <span class="literal">null</span>) &#123;</span><br><span class="line">request.setAttribute(name, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">request.removeAttribute(name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义参数绑定原理"><a href="#自定义参数绑定原理" class="headerlink" title="自定义参数绑定原理"></a>自定义参数绑定原理</h2><p><strong>表单</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/saveuser&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    姓名:  <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    年龄:  <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    生日:  <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;birth&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2019/12/10&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    宠物姓名:  <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;pet.name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;阿猫&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    宠物年龄:  <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;pet.age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;保存&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>实体类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Pet pet;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>controller</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//页面提交的请求数据（GET、POST）都可以和对象属性进行绑定</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/saveuser&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Person <span class="title function_">saveuser</span><span class="params">(Person person)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> person;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="拓展5-3-自定义类型参数—-gt-封装到Entity"><a href="#拓展5-3-自定义类型参数—-gt-封装到Entity" class="headerlink" title="拓展5.3 自定义类型参数—&gt;封装到Entity"></a>拓展5.3 自定义类型参数—&gt;封装到Entity</h4><p>通过<code>ServletModelAttributeMethodProcessor</code>解析器进行解析</p><p>判断是否支持参数</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205221557580.png" alt="image-20220522155743237"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isSimpleProperty</span><span class="params">(Class&lt;?&gt; type)</span> &#123;</span><br><span class="line">Assert.notNull(type, <span class="string">&quot;&#x27;type&#x27; must not be null&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> isSimpleValueType(type) || (type.isArray() &amp;&amp; isSimpleValueType(type.getComponentType()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断是否是简单类型参数</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205221558871.png" alt="image-20220522155858659"></p><p>进入到解析参数流程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title function_">resolveArgument</span><span class="params">(MethodParameter parameter, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span></span><br><span class="line"><span class="params">NativeWebRequest webRequest, <span class="meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">Assert.state(mavContainer != <span class="literal">null</span>, <span class="string">&quot;ModelAttributeMethodProcessor requires ModelAndViewContainer&quot;</span>);</span><br><span class="line">Assert.state(binderFactory != <span class="literal">null</span>, <span class="string">&quot;ModelAttributeMethodProcessor requires WebDataBinderFactory&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> ModelFactory.getNameForParameter(parameter);</span><br><span class="line"><span class="type">ModelAttribute</span> <span class="variable">ann</span> <span class="operator">=</span> parameter.getParameterAnnotation(ModelAttribute.class);</span><br><span class="line"><span class="keyword">if</span> (ann != <span class="literal">null</span>) &#123;</span><br><span class="line">mavContainer.setBinding(name, ann.binding());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Object</span> <span class="variable">attribute</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">BindingResult</span> <span class="variable">bindingResult</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mavContainer.containsAttribute(name)) &#123;</span><br><span class="line">attribute = mavContainer.getModel().get(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Create attribute instance</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//这里创建了一个空的Person对象</span></span><br><span class="line">attribute = createAttribute(name, parameter, binderFactory, webRequest);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (BindException ex) &#123;</span><br><span class="line"><span class="keyword">if</span> (isBindExceptionRequired(parameter)) &#123;</span><br><span class="line"><span class="comment">// No BindingResult parameter -&gt; fail with BindException</span></span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Otherwise, expose null/empty value and associated BindingResult</span></span><br><span class="line"><span class="keyword">if</span> (parameter.getParameterType() == Optional.class) &#123;</span><br><span class="line">attribute = Optional.empty();</span><br><span class="line">&#125;</span><br><span class="line">bindingResult = ex.getBindingResult();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (bindingResult == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">// Bean property binding and validation;</span></span><br><span class="line"><span class="comment">// skipped in case of binding failure on construction.</span></span><br><span class="line">      <span class="comment">//web数据绑定器，将请求参数的值绑定到指定的javabean里</span></span><br><span class="line"><span class="type">WebDataBinder</span> <span class="variable">binder</span> <span class="operator">=</span> binderFactory.createBinder(webRequest, attribute, name);</span><br><span class="line"><span class="keyword">if</span> (binder.getTarget() != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!mavContainer.isBindingDisabled(name)) &#123;</span><br><span class="line">bindRequestParameters(binder, webRequest);</span><br><span class="line">&#125;</span><br><span class="line">validateIfApplicable(binder, parameter);</span><br><span class="line"><span class="keyword">if</span> (binder.getBindingResult().hasErrors() &amp;&amp; isBindExceptionRequired(binder, parameter)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BindException</span>(binder.getBindingResult());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Value type adaptation, also covering java.util.Optional</span></span><br><span class="line"><span class="keyword">if</span> (!parameter.getParameterType().isInstance(attribute)) &#123;</span><br><span class="line">attribute = binder.convertIfNecessary(binder.getTarget(), parameter.getParameterType(), parameter);</span><br><span class="line">&#125;</span><br><span class="line">bindingResult = binder.getBindingResult();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add resolved attribute and BindingResult at the end of the model</span></span><br><span class="line">Map&lt;String, Object&gt; bindingResultModel = bindingResult.getModel();</span><br><span class="line">mavContainer.removeAttributes(bindingResultModel);</span><br><span class="line">mavContainer.addAllAttributes(bindingResultModel);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> attribute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用124个转换器，将请求参数转换成指定的数据类型，再次封装到javaBean，例如将String转换成Integer</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205221613900.png" alt="image-20220522161350702"></p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205221624622.png" alt="image-20220522162447516"></p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205221636662.png" alt="image-20220522163649472"></p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205221639970.png" alt="image-20220522163901570"></p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205221639975.png" alt="image-20220522163953777"></p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205221640310.png" alt="image-20220522164038896"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">applyPropertyValues</span><span class="params">(MutablePropertyValues mpvs)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// Bind request parameters onto target object.</span></span><br><span class="line">getPropertyAccessor().setPropertyValues(mpvs, isIgnoreUnknownFields(), isIgnoreInvalidFields());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (PropertyBatchUpdateException ex) &#123;</span><br><span class="line"><span class="comment">// Use bind error processor to create FieldErrors.</span></span><br><span class="line"><span class="keyword">for</span> (PropertyAccessException pae : ex.getPropertyAccessExceptions()) &#123;</span><br><span class="line">getBindingErrorProcessor().processPropertyAccessException(pae, getInternalBindingResult());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205221642614.png" alt="image-20220522164253216"></p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205221644623.png" alt="image-20220522164402279"></p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205221646719.png" alt="image-20220522164641394"></p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205221648748.png" alt="image-20220522164851426"></p><p><strong>在绑定过程当中，用到GenericConversionService：在设置每一个值的时候，找它里面的所有converter那个可以将这个数据类型（request带来参数的字符串）转换到指定的类型</strong></p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205221626942.png" alt="image-20220522162625654"></p><p>转换</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205221629396.png" alt="image-20220522162955041"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">StringToNumberConverterFactory</span> <span class="keyword">implements</span> <span class="title class_">ConverterFactory</span>&lt;String, Number&gt; &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Number</span>&gt; Converter&lt;String, T&gt; <span class="title function_">getConverter</span><span class="params">(Class&lt;T&gt; targetType)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StringToNumber</span>&lt;&gt;(targetType);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">StringToNumber</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Number</span>&gt; <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;String, T&gt; &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Class&lt;T&gt; targetType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">StringToNumber</span><span class="params">(Class&lt;T&gt; targetType)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.targetType = targetType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">convert</span><span class="params">(String source)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (source.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">      <span class="comment">//这里</span></span><br><span class="line"><span class="keyword">return</span> NumberUtils.parseNumber(source, <span class="built_in">this</span>.targetType);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转换完后赋值</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205221651721.png" alt="image-20220522165105450"></p><h2 id="自定义Converter"><a href="#自定义Converter" class="headerlink" title="自定义Converter"></a>自定义Converter</h2><p>我们只需要将自己的converter放到WebDataBinder即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> WebMvcConfigurer <span class="title function_">webMvcConfigurer</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WebMvcConfigurer</span>() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFormatters</span><span class="params">(FormatterRegistry registry)</span> &#123;</span><br><span class="line">               registry.addConverter(<span class="keyword">new</span> <span class="title class_">Converter</span>&lt;String, Pet&gt;() &#123;</span><br><span class="line">                   <span class="meta">@Override</span></span><br><span class="line">                   <span class="keyword">public</span> Pet <span class="title function_">convert</span><span class="params">(String source)</span> &#123;</span><br><span class="line">                       <span class="comment">//小花,2</span></span><br><span class="line">                       <span class="keyword">if</span>(!StringUtils.isEmpty(source))&#123;</span><br><span class="line">                           <span class="type">Pet</span> <span class="variable">pet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pet</span>();</span><br><span class="line">                           String[] split = source.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                           pet.setName(split[<span class="number">0</span>]);</span><br><span class="line">                           pet.setAge(Integer.valueOf(split[<span class="number">1</span>]));</span><br><span class="line">                           <span class="keyword">return</span> pet;</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>测试表单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">宠物:  <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;pet&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小花,2&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>拓展：</strong>注意，我们在添加自定义转换器时，如果使用<font color="orange">lambda</font>表达式代替内部类时要注意书写格式，否则会报错。</p><p>因为我们在自定义转换器的时候，使用lambda表达式时调用的是<font color="orange">void addConverter(Converter&lt;?, ?&gt; converter);</font>,这会让转换器无法解析传入的是什么类型，什么是目标类型，这就导致无法生效，所以，当我们使用lambda表达式代替内部类时，应该调用<font color="orange">    <S, T> void addConverter(Class<S> sourceType, Class<T> targetType, Converter&lt;? super S, ? extends T&gt; converter);</font></p><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFormatters</span><span class="params">(FormatterRegistry registry)</span> &#123;</span><br><span class="line">       registry.addConverter(String.class,Pet.class,(source)-&gt;&#123;</span><br><span class="line">       <span class="comment">//小花,2</span></span><br><span class="line">       <span class="keyword">if</span> (source!=<span class="literal">null</span>) &#123;</span><br><span class="line">            String[] split = source.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="type">Pet</span> <span class="variable">pet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pet</span>();</span><br><span class="line">            pet.setName(split[<span class="number">0</span>]);</span><br><span class="line">            pet.setAge(Integer.parseInt(split[<span class="number">1</span>]));</span><br><span class="line">            <span class="keyword">return</span> pet;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="ReturnValueHandler原理"><a href="#ReturnValueHandler原理" class="headerlink" title="ReturnValueHandler原理"></a>ReturnValueHandler原理</h2><p>  <img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205231535369.png" alt="image-20220523153549402"></p><h4 id="1、响应JSON数据"><a href="#1、响应JSON数据" class="headerlink" title="1、响应JSON数据"></a>1、响应JSON数据</h4><h5 id="1-1、jackson-jar-ResponseBody"><a href="#1-1、jackson-jar-ResponseBody" class="headerlink" title="1.1、jackson.jar+@ResponseBody"></a>1.1、jackson.jar+@ResponseBody</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">//web场景自动引入了json场景</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="1、返回值处理器"><a href="#1、返回值处理器" class="headerlink" title="1、返回值处理器"></a>1、返回值处理器</h6><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205231542410.png" alt="image-20220523154255181"></p><p>利用返回值处理器处理返回值</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205231548074.png" alt="image-20220523154806929"></p><p>寻找能处理返回值的处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleReturnValue</span><span class="params">(<span class="meta">@Nullable</span> Object returnValue, MethodParameter returnType,</span></span><br><span class="line"><span class="params">ModelAndViewContainer mavContainer, NativeWebRequest webRequest)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//寻找能处理返回值的处理器</span></span><br><span class="line"><span class="type">HandlerMethodReturnValueHandler</span> <span class="variable">handler</span> <span class="operator">=</span> selectHandler(returnValue, returnType);</span><br><span class="line"><span class="keyword">if</span> (handler == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Unknown return value type: &quot;</span> + returnType.getParameterType().getName());</span><br><span class="line">&#125;</span><br><span class="line">handler.handleReturnValue(returnValue, returnType, mavContainer, webRequest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2、返回值处理器原理"><a href="#2、返回值处理器原理" class="headerlink" title="2、返回值处理器原理"></a>2、返回值处理器原理</h6><ul><li>1、返回值处理器判断是否支持这种类型返回值 supportsReturnType</li><li>2、返回值处理器调用 handleReturnValue 进行处理</li><li><p>3、RequestResponseBodyMethodProcessor 可以处理返回值标了@ResponseBody 注解的。</p></li><li><ul><li><ol><li>利用 MessageConverters 进行处理 将数据写为json</li></ol></li></ul></li><li><ul><li><ul><li>1、内容协商（浏览器默认会以请求头的方式告诉服务器他能接受什么样的内容类型）</li><li>2、服务器最终根据自己自身的能力，决定服务器能生产出什么样内容类型的数据，</li><li>3、SpringMVC会挨个遍历所有容器底层的 HttpMessageConverter ，看谁能处理？</li></ul></li></ul></li><li><ul><li><ul><li><ul><li>1、得到MappingJackson2HttpMessageConverter可以将对象写为json</li><li>2、利用MappingJackson2HttpMessageConverter将对象转为json再写出去。</li></ul></li></ul></li></ul></li></ul><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205231633367.png" alt="image-20220523162448985"></p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205231555652.png" alt="image-20220523155537585"></p><p>找到处理器后进行处理</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205231609460.png" alt="image-20220523160954345"></p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205231614583.png" alt="image-20220523161456409"></p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205231627503.png" alt="image-20220523162717111"></p><p>各自的类型的数据</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205231634024.png" alt="image-20220523163421692"></p><h4 id="1-2、SpringMVC支持哪些返回值类型"><a href="#1-2、SpringMVC支持哪些返回值类型" class="headerlink" title="1.2、SpringMVC支持哪些返回值类型"></a>1.2、SpringMVC支持哪些返回值类型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ModelAndView</span><br><span class="line">Model</span><br><span class="line">View</span><br><span class="line">ResponseEntity </span><br><span class="line">ResponseBodyEmitter</span><br><span class="line">StreamingResponseBody</span><br><span class="line">HttpEntity</span><br><span class="line">HttpHeaders</span><br><span class="line">Callable</span><br><span class="line">DeferredResult</span><br><span class="line">ListenableFuture</span><br><span class="line">CompletionStage</span><br><span class="line">WebAsyncTask</span><br><span class="line">有 <span class="meta">@ModelAttribute</span> 且为对象类型的</span><br><span class="line"><span class="meta">@ResponseBody</span> 注解 ---&gt; RequestResponseBodyMethodProcessor；</span><br></pre></td></tr></table></figure><h4 id="1-3、HttpMessageConverter原理"><a href="#1-3、HttpMessageConverter原理" class="headerlink" title="1.3、HttpMessageConverter原理"></a>1.3、HttpMessageConverter原理</h4><h5 id="1、MessageConverter规范"><a href="#1、MessageConverter规范" class="headerlink" title="1、MessageConverter规范"></a>1、MessageConverter规范</h5><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205231639581.png" alt="image-20220523163946509"></p><p>HttpMessageConverter: 看是否支持将 此 Class类型的对象，转为MediaType类型的数据。</p><p>例子：Person对象转为JSON。或者 JSON转为Person</p><h5 id="2、默认的MessageConverter"><a href="#2、默认的MessageConverter" class="headerlink" title="2、默认的MessageConverter"></a>2、默认的MessageConverter</h5><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205231642618.png" alt="image-20220523164244551"></p><p>0 - 只支持Byte数组类型的</p><p>1 - String（字符编码UTF-8)</p><p>2 - String （字符编码ISO-8859-1）</p><p>3 - Resource</p><p>4 - ResourceRegion</p><p>5 - DOMSource.class \ SAXSource.class \ StAXSource.class \StreamSource.class \Source.class</p><p><strong>6 -</strong> MultiValueMap</p><p>7 - <strong>true</strong> (无论什么类都返回true，换句话说，就是可以将任何类型的对象转换为浏览器所想要的数据类型；)</p><p><strong>8 - true</strong></p><p><strong>9 - 支持注解方式xml处理的。</strong></p><p>最终 MappingJackson2HttpMessageConverter  把对象转为JSON（利用底层的jackson的objectMapper转换的）</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205231659163.png" alt="image-20220523165919973"></p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205231700900.png" alt="image-20220523170016484"></p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205231701574.png" alt="image-20220523170123308"></p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205231702547.png" alt="image-20220523170245368"></p><h2 id="内容协商"><a href="#内容协商" class="headerlink" title="内容协商"></a>内容协商</h2><p>根据客户端接收能力不同，返回不同媒体类型的数据</p><h4 id="1、引入xml依赖"><a href="#1、引入xml依赖" class="headerlink" title="1、引入xml依赖"></a>1、引入xml依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2、用postman分别测试返回json和xml"><a href="#2、用postman分别测试返回json和xml" class="headerlink" title="2、用postman分别测试返回json和xml"></a>2、用postman分别测试返回json和xml</h4><p>只需要改变请求头中的<font color="orange">Accept</font>字段即可</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205232114661.png" alt="image-20220523211455429"></p><h4 id="3、开启浏览器参数方式内容协商功能"><a href="#3、开启浏览器参数方式内容协商功能" class="headerlink" title="3、开启浏览器参数方式内容协商功能"></a>3、开启浏览器参数方式内容协商功能</h4><p>为了方便内容协商，开启基于请求参数的内容协商功能</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">contentnegotiation:</span></span><br><span class="line">      <span class="attr">favor-parameter:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>我们在发送请求时：</p><ul><li><p><a href="http://localhost:8080/test/person?format=json">http://localhost:8080/test/person?format=json</a></p></li><li><p><a href="http://localhost:8080/test/person?format=xml">http://localhost:8080/test/person?format=xml</a></p></li></ul><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205240036793.png" alt="image-20220524003635645"></p><p>确定客户端接收什么样的内容类型：</p><p>Parameter策略优先确定要返回json数据（获取请求参数中的format值）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resurn request.getParameter(getParameterName());</span><br></pre></td></tr></table></figure><h4 id="4、内容协商原理"><a href="#4、内容协商原理" class="headerlink" title="4、内容协商原理"></a>4、内容协商原理</h4><ol><li><p>判断当前响应头中是否已经有确定的媒体类型，MediaType</p></li><li><p>获取客户端支持接收的内容类型（获取客户端的Accept请求字段)</p><ul><li><p><strong>contentNegotiationManager 内容协商管理器 默认使用基于请求头的策略</strong></p></li><li><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205232254208.png" alt="image-20220523225443030"></p></li><li><p><strong>HeaderContentNegotiationStrategy  确定客户端可以接收的内容类型</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;MediaType&gt; <span class="title function_">resolveMediaTypes</span><span class="params">(NativeWebRequest request)</span></span><br><span class="line"><span class="keyword">throws</span> HttpMediaTypeNotAcceptableException &#123;</span><br><span class="line">    <span class="comment">//注意这里</span></span><br><span class="line">String[] headerValueArray = request.getHeaderValues(HttpHeaders.ACCEPT);</span><br><span class="line"><span class="keyword">if</span> (headerValueArray == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> MEDIA_TYPE_ALL_LIST;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; headerValues = Arrays.asList(headerValueArray);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">List&lt;MediaType&gt; mediaTypes = MediaType.parseMediaTypes(headerValues);</span><br><span class="line">MediaType.sortBySpecificityAndQuality(mediaTypes);</span><br><span class="line"><span class="keyword">return</span> !CollectionUtils.isEmpty(mediaTypes) ? mediaTypes : MEDIA_TYPE_ALL_LIST;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (InvalidMediaTypeException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">HttpMediaTypeNotAcceptableException</span>(</span><br><span class="line"><span class="string">&quot;Could not parse &#x27;Accept&#x27; header &quot;</span> + headerValues + <span class="string">&quot;: &quot;</span> + ex.getMessage());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>遍历循环所有当前系统的MessageConverter，看谁支持操作这个对象(Person)</p></li><li><p>找到支持操作Person的Converter，把Converter支持的媒体类型统计出来</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205232133692.png" alt="image-20220523213343444"></p></li><li><p>客户端需要[application/xml],服务端能力【10种、json、xml】</p><p> <img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205232135558.png" alt="image-20220523213528364"></p></li><li><p>进行内容协商的最佳匹配媒体类型</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205232138939.png" alt="image-20220523213855842"></p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205232208351.png" alt="image-20220523220825143"></p><p>注意这里<font color="red">根据权重进行了排序</font>，所以<font color="orange">selectedMedisType</font>的值就是第一个xml类型我们查看浏览器请求头的Accept的时候，发现xml权重是比json高的，所以返回的是xml</p></li><li><p>用支持将对象转为最佳匹配媒体类型的Converter，调用他进行转换</p></li></ol><p>导入了jackson处理xml的包，xml的converter就会自动进来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//WebMvcConfigurationSupport.java</span></span><br><span class="line">jackson2XmlPresent = ClassUtils.isPresent(<span class="string">&quot;com.fasterxml.jackson.dataformat.xml.XmlMapper&quot;</span>, classLoader);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (jackson2XmlPresent) &#123;</span><br><span class="line"><span class="type">Jackson2ObjectMapperBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> Jackson2ObjectMapperBuilder.xml();</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.applicationContext != <span class="literal">null</span>) &#123;</span><br><span class="line">builder.applicationContext(<span class="built_in">this</span>.applicationContext);</span><br><span class="line">&#125;</span><br><span class="line">messageConverters.add(<span class="keyword">new</span> <span class="title class_">MappingJackson2XmlHttpMessageConverter</span>(builder.build()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、自定义MessageConverter"><a href="#5、自定义MessageConverter" class="headerlink" title="5、自定义MessageConverter"></a>5、自定义MessageConverter</h4><p>实现多协议数据兼容，如json、xml、x-xiaoying</p><ol><li><strong>@ResponseBody</strong> 响应数据出去 调用 <strong>RequestResponseBodyMethodProcessor</strong>处理</li><li>Processor 处理方法返回值。通过 <strong>MessageConverter</strong> 处理</li><li>所有 <strong>MessageConverter</strong> 合起来可以支持各种媒体类型数据的操作（读、写）</li><li>内容协商找到最终的 <strong>messageConverter</strong>；</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span>: 自定义converter</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Param</span>: </span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span>: </span></span><br><span class="line"><span class="comment">* <span class="doctag">@Author</span>: 挚爱小v脸</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Date</span>: 5/24/2022</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XiaoyingMessageConverter</span> <span class="keyword">implements</span> <span class="title class_">HttpMessageConverter</span>&lt;Person&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canRead</span><span class="params">(Class&lt;?&gt; clazz, MediaType mediaType)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canWrite</span><span class="params">(Class&lt;?&gt; clazz, MediaType mediaType)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> clazz.isAssignableFrom(Person.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: 服务器要统计所有的messageConverter都能写出哪些内容类型</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Param</span>: []</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>: java.util.List&lt;org.springframework.http.MediaType&gt;</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span>: 挚爱小v脸</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span>: 5/24/2022</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;MediaType&gt; <span class="title function_">getSupportedMediaTypes</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> MediaType.parseMediaTypes(<span class="string">&quot;application/x-xiaoying&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Person <span class="title function_">read</span><span class="params">(Class&lt;? extends Person&gt; clazz, HttpInputMessage inputMessage)</span> <span class="keyword">throws</span> IOException, HttpMessageNotReadableException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: 自定义协议数据的写出</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Param</span>: [person, contentType, outputMessage]</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span>: 挚爱小v脸</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span>: 5/24/2022</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(Person person, MediaType contentType, HttpOutputMessage outputMessage)</span> <span class="keyword">throws</span> IOException, HttpMessageNotWritableException &#123;</span><br><span class="line">        String data=person.getUserName()+<span class="string">&quot;;&quot;</span>+person.getAge()+<span class="string">&quot;;&quot;</span>+person.getBirth();</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">body</span> <span class="operator">=</span> outputMessage.getBody();</span><br><span class="line">        body.write(data.getBytes());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> WebMvcConfigurer <span class="title function_">webMvcConfigurer</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WebMvcConfigurer</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">            converters.add(<span class="keyword">new</span> <span class="title class_">XiaoyingMessageConverter</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205240102032.png" alt="image-20220524010251860"></p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205240101451.png" alt="image-20220524010111377"></p><h4 id="6、自定义参数内容协商"><a href="#6、自定义参数内容协商" class="headerlink" title="6、自定义参数内容协商"></a>6、自定义参数内容协商</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> WebMvcConfigurer <span class="title function_">webMvcConfigurer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WebMvcConfigurer</span>() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//自定义内容协商策略</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureContentNegotiation</span><span class="params">(ContentNegotiationConfigurer configurer)</span> &#123;</span><br><span class="line"><span class="comment">//                Map&lt;String, MediaType&gt; mediaTypeMap= new HashMap&lt;&gt;();</span></span><br><span class="line"><span class="comment">//                mediaTypeMap.put(&quot;json&quot;,MediaType.APPLICATION_JSON);</span></span><br><span class="line"><span class="comment">//                mediaTypeMap.put(&quot;xml&quot;,MediaType.APPLICATION_XML);</span></span><br><span class="line"><span class="comment">//                mediaTypeMap.put(&quot;xiaoying&quot;,MediaType.parseMediaType(&quot;application/x-xiaoying&quot;));</span></span><br><span class="line"><span class="comment">//                ParameterContentNegotiationStrategy strategy = new ParameterContentNegotiationStrategy(mediaTypeMap);</span></span><br><span class="line"><span class="comment">//                configurer.strategies(Arrays.asList(strategy));</span></span><br><span class="line">                <span class="comment">//上面的方式会将默认的覆盖掉，包括基于Header的也会被覆盖掉</span></span><br><span class="line">                configurer.mediaType(<span class="string">&quot;xiaoying&quot;</span>,MediaType.parseMediaType(<span class="string">&quot;application/x-xiaoying&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205242048399.png" alt="image-20220524204846140"></p><p>测试：</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205242050201.png" alt="image-20220524205044016"></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot常用参数注解使用</title>
      <link href="/post/35120b54.html"/>
      <url>/post/35120b54.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>SpringBoot常用参数注解使用</p></blockquote><span id="more"></span><h2 id="常用参数注解"><a href="#常用参数注解" class="headerlink" title="常用参数注解"></a>常用参数注解</h2><h4 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h4><ol><li>@PathVariable    获取路径变量</li><li>@RequestHeader   获取请求头</li><li>@RequestParam   获取请求参数（query传参方式，url?username=xiaoying&amp;age=19)</li><li>@CookieValue   获取cookie的值</li><li>@RequestAttribute   获取request域属性</li><li>@RequestBody   获取请求体</li><li>@MatrixVariable   获取矩阵变量</li><li>@ModelAttribute</li></ol><p>使用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParameterTestController</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//  car/2/owner/zhangsan</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/car/&#123;id&#125;/owner/&#123;username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title function_">getCar</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id,</span></span><br><span class="line"><span class="params">                                     <span class="meta">@PathVariable(&quot;username&quot;)</span> String name,</span></span><br><span class="line"><span class="params">                                     <span class="meta">@PathVariable</span> Map&lt;String,String&gt; pv,</span></span><br><span class="line"><span class="params">                                     <span class="meta">@RequestHeader(&quot;User-Agent&quot;)</span> String userAgent,</span></span><br><span class="line"><span class="params">                                     <span class="meta">@RequestHeader</span> Map&lt;String,String&gt; header,</span></span><br><span class="line"><span class="params">                                     <span class="meta">@RequestParam(&quot;age&quot;)</span> Integer age,</span></span><br><span class="line"><span class="params">                                     <span class="meta">@RequestParam(&quot;inters&quot;)</span> List&lt;String&gt; inters,</span></span><br><span class="line"><span class="params">                                     <span class="meta">@RequestParam</span> Map&lt;String,String&gt; params,</span></span><br><span class="line"><span class="params">                                     <span class="meta">@CookieValue(&quot;_ga&quot;)</span> String _ga,</span></span><br><span class="line"><span class="params">                                     <span class="meta">@CookieValue(&quot;_ga&quot;)</span> Cookie cookie)</span>&#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">&quot;id&quot;</span>,id);</span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>,name);</span><br><span class="line">        map.put(<span class="string">&quot;pv&quot;</span>,pv);</span><br><span class="line">        map.put(<span class="string">&quot;userAgent&quot;</span>,userAgent);</span><br><span class="line">        map.put(<span class="string">&quot;headers&quot;</span>,header);</span><br><span class="line">        map.put(<span class="string">&quot;age&quot;</span>,age);</span><br><span class="line">        map.put(<span class="string">&quot;inters&quot;</span>,inters);</span><br><span class="line">        map.put(<span class="string">&quot;params&quot;</span>,params);</span><br><span class="line">        map.put(<span class="string">&quot;_ga&quot;</span>,_ga);</span><br><span class="line">        System.out.println(cookie.getName()+<span class="string">&quot;===&gt;&quot;</span>+cookie.getValue());</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map <span class="title function_">postMethod</span><span class="params">(<span class="meta">@RequestBody</span> String content)</span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;content&quot;</span>,content);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/goto&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">goToPage</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line"></span><br><span class="line">        request.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;成功了...&quot;</span>);</span><br><span class="line">        request.setAttribute(<span class="string">&quot;code&quot;</span>,<span class="number">200</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;forward:/success&quot;</span>;  <span class="comment">//转发到  /success请求</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/params&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testParam</span><span class="params">(Map&lt;String,Object&gt; map,</span></span><br><span class="line"><span class="params">                            Model model,</span></span><br><span class="line"><span class="params">                            HttpServletRequest request,</span></span><br><span class="line"><span class="params">                            HttpServletResponse response)</span>&#123;</span><br><span class="line">        map.put(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world666&quot;</span>);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;world&quot;</span>,<span class="string">&quot;hello666&quot;</span>);</span><br><span class="line">        request.setAttribute(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;c1&quot;</span>,<span class="string">&quot;v1&quot;</span>);</span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;forward:/success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@RequestAttribute在这个方法</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/success&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map <span class="title function_">success</span><span class="params">(<span class="meta">@RequestAttribute(value = &quot;msg&quot;,required = false)</span> String msg,</span></span><br><span class="line"><span class="params">                       <span class="meta">@RequestAttribute(value = &quot;code&quot;,required = false)</span>Integer code,</span></span><br><span class="line"><span class="params">                       HttpServletRequest request)</span>&#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">msg1</span> <span class="operator">=</span> request.getAttribute(<span class="string">&quot;msg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">hello</span> <span class="operator">=</span> request.getAttribute(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">world</span> <span class="operator">=</span> request.getAttribute(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">message</span> <span class="operator">=</span> request.getAttribute(<span class="string">&quot;message&quot;</span>);</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">&quot;reqMethod_msg&quot;</span>,msg1);</span><br><span class="line">        map.put(<span class="string">&quot;annotation_msg&quot;</span>,msg);</span><br><span class="line">        map.put(<span class="string">&quot;hello&quot;</span>,hello);</span><br><span class="line">        map.put(<span class="string">&quot;world&quot;</span>,world);</span><br><span class="line">        map.put(<span class="string">&quot;message&quot;</span>,message);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意，<font color="orange">@MatrixVariable</font>注解比较特殊，虽然用的可能比较少，但是可以用来解决<font color="red">cookie被禁用的问题，可以将sessionid放到url里</font></p><ol><li>请求路径：/cars/{path};low=34;brand=yd,anta</li><li>SpringBoot默认禁用了矩阵变量的功能，需要手动开启</li><li>矩阵变量必须有url路径才能被解析</li></ol><p>开启矩阵变量的两种方法</p><ul><li><font color="orange">实现WebMvcConfigurer接口</font></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configurePathMatch</span><span class="params">(PathMatchConfigurer configurer)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">UrlPathHelper</span> <span class="variable">urlPathHelper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlPathHelper</span>();</span><br><span class="line">        <span class="comment">// 不移除；后面的内容。矩阵变量功能就可以生效</span></span><br><span class="line">        urlPathHelper.setRemoveSemicolonContent(<span class="literal">false</span>);</span><br><span class="line">        configurer.setUrlPathHelper(urlPathHelper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>向容器中放入Bean</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> WebMvcConfigurer <span class="title function_">webMvcConfigurer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WebMvcConfigurer</span>() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configurePathMatch</span><span class="params">(PathMatchConfigurer configurer)</span> &#123;</span><br><span class="line">                <span class="type">UrlPathHelper</span> <span class="variable">urlPathHelper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlPathHelper</span>();</span><br><span class="line">                <span class="comment">// 不移除；后面的内容。矩阵变量功能就可以生效</span></span><br><span class="line">                urlPathHelper.setRemoveSemicolonContent(<span class="literal">false</span>);</span><br><span class="line">                configurer.setUrlPathHelper(urlPathHelper);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParameterTestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">///cars/sell;low=34;brand=byd,audi,yd</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/cars/&#123;path&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map <span class="title function_">carsSell</span><span class="params">(<span class="meta">@MatrixVariable(&quot;low&quot;)</span> Integer low,</span></span><br><span class="line"><span class="params">                        <span class="meta">@MatrixVariable(&quot;brand&quot;)</span> List&lt;String&gt; brand,</span></span><br><span class="line"><span class="params">                        <span class="meta">@PathVariable(&quot;path&quot;)</span> String path)</span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">&quot;low&quot;</span>,low);</span><br><span class="line">        map.put(<span class="string">&quot;brand&quot;</span>,brand);</span><br><span class="line">        map.put(<span class="string">&quot;path&quot;</span>,path);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// /boss/1;age=20/2;age=10</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/boss/&#123;bossId&#125;/&#123;empId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map <span class="title function_">boss</span><span class="params">(<span class="meta">@MatrixVariable(value = &quot;age&quot;,pathVar = &quot;bossId&quot;)</span> Integer bossAge,</span></span><br><span class="line"><span class="params">                    <span class="meta">@MatrixVariable(value = &quot;age&quot;,pathVar = &quot;empId&quot;)</span> Integer empAge)</span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">&quot;bossAge&quot;</span>,bossAge);</span><br><span class="line">        map.put(<span class="string">&quot;empAge&quot;</span>,empAge);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然说矩阵变量的方式可能我们用的比较少,但是我们可以通过为什么这样配置就可以开启矩阵变量的支持的原理学习到探究源码的方法</p><p>我们进入到<font color="orange">WebMvcAutoConfiguration.java</font>中找到<code>configurePathMatch</code>方法，在这个方法里面我们主要关注<code>UrlPathHelper</code></p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205201425361.png" alt="image-20220520142543261"></p><p>接下来我们进入到这个类中,我们可以看到是哪个属性禁用掉了路径变量功能</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205201427334.png" alt="image-20220520142741086"></p><p>我们在<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/web.html#web">Spring官网</a>上找到了这段话，可以帮我们快速理解SpringBoot所做的配置</p><h4 id="1-1-1-Spring-MVC-Auto-configuration"><a href="#1-1-1-Spring-MVC-Auto-configuration" class="headerlink" title="1.1.1. Spring MVC Auto-configuration"></a>1.1.1. Spring MVC Auto-configuration</h4><p>Spring Boot provides auto-configuration for Spring MVC that works well with most applications.</p><p>The auto-configuration adds the following features on top of Spring’s defaults:</p><ul><li>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.</li><li>Support for serving static resources, including support for WebJars (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#web.servlet.spring-mvc.static-content">later in this document</a>).</li><li>Automatic registration of <code>Converter</code>, <code>GenericConverter</code>, and <code>Formatter</code> beans.</li><li>Support for <code>HttpMessageConverters</code> (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#web.servlet.spring-mvc.message-converters">later in this document</a>).</li><li>Automatic registration of <code>MessageCodesResolver</code> (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#web.servlet.spring-mvc.message-codes">later in this document</a>).</li><li>Static <code>index.html</code> support.</li><li>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#web.servlet.spring-mvc.binding-initializer">later in this document</a>).</li></ul><p>If you want to keep those Spring Boot MVC customizations and make more <a href="https://docs.spring.io/spring-framework/docs/5.3.20/reference/html/web.html#mvc">MVC customizations</a> (interceptors, formatters, view controllers, and other features), you can add your own <code>@Configuration</code> class of type <code>WebMvcConfigurer</code> but <strong>without</strong> <code>@EnableWebMvc</code>.</p><p>If you want to provide custom instances of <code>RequestMappingHandlerMapping</code>, <code>RequestMappingHandlerAdapter</code>, or <code>ExceptionHandlerExceptionResolver</code>, and still keep the Spring Boot MVC customizations, you can declare a bean of type <code>WebMvcRegistrations</code> and use it to provide custom instances of those components.</p><p>If you want to take complete control of Spring MVC, you can add your own <code>@Configuration</code> annotated with <code>@EnableWebMvc</code>, or alternatively add your own <code>@Configuration</code>-annotated <code>DelegatingWebMvcConfiguration</code> as described in the Javadoc of <code>@EnableWebMvc</code>.</p><p><strong>通过官网的讲解，我们就明白了我们为什么要那样配置就可以实现开启矩阵变量的功能</strong></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot请求处理和映射源码分析</title>
      <link href="/post/1e112138.html"/>
      <url>/post/1e112138.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>SpringBoot请求处理源码分析</p></blockquote><span id="more"></span><h2 id="Rest映射及源码分析"><a href="#Rest映射及源码分析" class="headerlink" title="Rest映射及源码分析"></a>Rest映射及源码分析</h2><h4 id="什么是Rest？"><a href="#什么是Rest？" class="headerlink" title="什么是Rest？"></a>什么是Rest？</h4><p>Rest是一种软件架构风格，或者说是一种规范，其强调HTTP应当以资源为中心，并且规定了URI的风格；规范了HTTP请求动作(GET/PUT/POST/DELETE/HEAD/OPTIONS)的使用，具有对应的语义</p><h4 id="对比传统风格"><a href="#对比传统风格" class="headerlink" title="对比传统风格"></a>对比传统风格</h4><ul><li>以前：/getUser 获取用户   /deleteUser 删除用户  /editUser 修改用户 /saveUser 保存用户</li><li>现在：/user    GET-获取用户  DELETE-删除用户  PUT-修改用户  POST-保存用户</li><li>Rest的核心Filter：<font color="orange">HiddenHttpMethodFilter</font><ul><li>用法：表单method=post  隐藏域 _method=put</li><li>SpringBoot的配置文件中手动开启</li></ul></li></ul><p><strong>controller</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getUser</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;GET-张三&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.POST)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">saveUser</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;POST-张三&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.PUT)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">putUser</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;PUT-张三&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.DELETE)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">deleteUser</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;DELETE-张三&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>表单</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;REST-GET提交&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;REST-POST提交&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">value</span>=<span class="string">&quot;DELETE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;REST-DELETE 提交&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;REST-PUT提交&quot;</span><span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>配置文件</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">hiddenmethod:</span></span><br><span class="line">      <span class="attr">filter:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>接下来我们通过源码分析为什么我们这么配置的原因：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcAutoConfiguration</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(HiddenHttpMethodFilter.class)</span></span><br><span class="line">  <span class="comment">//这里是为什么在配置文件配置的原因</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;spring.mvc.hiddenmethod.filter&quot;, name = &quot;enabled&quot;, matchIfMissing = false)</span></span><br><span class="line"><span class="keyword">public</span> OrderedHiddenHttpMethodFilter <span class="title function_">hiddenHttpMethodFilter</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OrderedHiddenHttpMethodFilter</span>();</span><br><span class="line">&#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//public class OrderedHiddenHttpMethodFilter extends HiddenHttpMethodFilter implements OrderedFilter</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\dell\AppData\Roaming\Typora\typora-user-images\image-20220519204949411.png" alt="image-20220519204949411"></p><h4 id="Rest原理（表单提交要使用REST的时候）"><a href="#Rest原理（表单提交要使用REST的时候）" class="headerlink" title="Rest原理（表单提交要使用REST的时候）"></a>Rest原理（表单提交要使用REST的时候）</h4><ul><li>表单提交会带上<font color="orange">_method=PUT</font></li><li>请求过来会被<font color="orange">HiddenHttpMethodFilter</font>拦截<ul><li>请求是否正常并且是<font color="orange">POST</font><ul><li>获取到<font color="orange">_method</font>的值</li><li>兼容以下请求<font color="orange">PUT、DELETE、PATCH</font></li><li>原生request(post),包装模式<font color="orange">requestWrapper</font>重写了<font color="orange">getMethod</font>方法，返回的是传入的值</li><li>过滤器链放行的时候用wrapper，以后的方法调用getMethod是调用<font color="orange">requestWrapper</font>的</li></ul></li></ul></li></ul><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205192139559.png" alt="image-20220519213947489"></p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205192142781.png" alt="image-20220519214236461"></p><h4 id="REST使用客户端工具"><a href="#REST使用客户端工具" class="headerlink" title="REST使用客户端工具"></a>REST使用客户端工具</h4><p>如PostMan直接发送PUT、DELTE等方式请求，无需Filter</p><h4 id="请求处理，如何改变默认的-method"><a href="#请求处理，如何改变默认的-method" class="headerlink" title="请求处理，如何改变默认的_method"></a>请求处理，如何改变默认的_method</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(HiddenHttpMethodFilter.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;spring.mvc.hiddenmethod.filter&quot;, name = &quot;enabled&quot;, matchIfMissing = false)</span></span><br><span class="line"><span class="keyword">public</span> OrderedHiddenHttpMethodFilter <span class="title function_">hiddenHttpMethodFilter</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OrderedHiddenHttpMethodFilter</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过源码我们看到，当我们配置了HiddenHttpMethodFilter后，SpringBoot就不会帮我们配置了，就使用我们自己的，所以我们可以这样做：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span>&#123;</span><br><span class="line">    <span class="comment">//自定义filter</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> HiddenHttpMethodFilter <span class="title function_">hiddenHttpMethodFilter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">HiddenHttpMethodFilter</span> <span class="variable">methodFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HiddenHttpMethodFilter</span>();</span><br><span class="line">        methodFilter.setMethodParam(<span class="string">&quot;_xiaoying&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> methodFilter;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="请求映射原理"><a href="#请求映射原理" class="headerlink" title="请求映射原理"></a>请求映射原理</h2><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205192249094.png" alt="image-20220519224922923"></p><p>SpringMVC功能分析都从 <code>org.springframework.web.servlet.DispatcherServlet</code> -&gt; <code>doDispatch()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">HttpServletRequest</span> <span class="variable">processedRequest</span> <span class="operator">=</span> request;</span><br><span class="line"><span class="type">HandlerExecutionChain</span> <span class="variable">mappedHandler</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">multipartRequestParsed</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">WebAsyncManager</span> <span class="variable">asyncManager</span> <span class="operator">=</span> WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">Exception</span> <span class="variable">dispatchException</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">processedRequest = checkMultipart(request);</span><br><span class="line">multipartRequestParsed = (processedRequest != request);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Determine handler for the current request.</span></span><br><span class="line">        <span class="comment">//找到当前请求使用哪个Handler(Controller的方法)处理</span></span><br><span class="line">mappedHandler = getHandler(processedRequest);</span><br><span class="line"><span class="keyword">if</span> (mappedHandler == <span class="literal">null</span>) &#123;</span><br><span class="line">noHandlerFound(processedRequest, response);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Determine handler adapter for the current request.</span></span><br><span class="line"><span class="type">HandlerAdapter</span> <span class="variable">ha</span> <span class="operator">=</span> getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Process last-modified header, if supported by the handler.</span></span><br><span class="line"><span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line"><span class="type">boolean</span> <span class="variable">isGet</span> <span class="operator">=</span> <span class="string">&quot;GET&quot;</span>.equals(method);</span><br><span class="line"><span class="keyword">if</span> (isGet || <span class="string">&quot;HEAD&quot;</span>.equals(method)) &#123;</span><br><span class="line"><span class="type">long</span> <span class="variable">lastModified</span> <span class="operator">=</span> ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">new</span> <span class="title class_">ServletWebRequest</span>(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Actually invoke the handler.</span></span><br><span class="line">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">applyDefaultViewName(processedRequest, mv);</span><br><span class="line">mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">dispatchException = ex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line"><span class="comment">// As of 4.3, we&#x27;re processing Errors thrown from handler methods as well,</span></span><br><span class="line"><span class="comment">// making them available for @ExceptionHandler methods and other scenarios.</span></span><br><span class="line">dispatchException = <span class="keyword">new</span> <span class="title class_">NestedServletException</span>(<span class="string">&quot;Handler dispatch failed&quot;</span>, err);</span><br><span class="line">&#125;</span><br><span class="line">processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">triggerAfterCompletion(processedRequest, response, mappedHandler,</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">NestedServletException</span>(<span class="string">&quot;Handler processing failed&quot;</span>, err));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line"><span class="comment">// Instead of postHandle and afterCompletion</span></span><br><span class="line"><span class="keyword">if</span> (mappedHandler != <span class="literal">null</span>) &#123;</span><br><span class="line">mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Clean up any resources used by a multipart request.</span></span><br><span class="line"><span class="keyword">if</span> (multipartRequestParsed) &#123;</span><br><span class="line">cleanupMultipart(processedRequest);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//getHandler方法    handlerMapping:处理器映射：哪个请求可以被谁谁谁处理</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">protected</span> HandlerExecutionChain <span class="title function_">getHandler</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.handlerMappings != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (HandlerMapping mapping : <span class="built_in">this</span>.handlerMappings) &#123;</span><br><span class="line"><span class="type">HandlerExecutionChain</span> <span class="variable">handler</span> <span class="operator">=</span> mapping.getHandler(request);</span><br><span class="line"><span class="keyword">if</span> (handler != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> handler;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205192306869.png" alt="image-20220519230648774"></p><p>我们主要查看<code>RequestMappingHandlerMapping</code></p><p>作用：<font color="orange">保存了所有@RequestMapping和handler的映射规则</font></p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205192313605.png" alt="image-20220519231307396"></p><p>进入getHandler方法</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205192333685.png" alt="image-20220519233339612"></p><p>进入getHandlerInternal方法</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205192334706.png" alt="image-20220519233432598"></p><p>进入父类的getHandlerInternal方法</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205192335394.png" alt="image-20220519233547239"></p><p>进入lookupHandlerMethod方法</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205192339120.png" alt="image-20220519233905764"></p><p>所有的请求映射都在<font color="orange">HandlerMapping</font>中。</p><ul><li>SpringBoot自动配置欢迎页的 WelcomePageHandlerMapping 。访问 /能访问到index.html；</li><li>SpringBoot自动配置了默认 的 RequestMappingHandlerMapping</li><li><p>请求进来，挨个尝试所有的HandlerMapping看是否有请求信息。</p></li><li><ul><li>如果有就找到这个请求对应的handler</li><li>如果没有就是下一个 HandlerMapping</li></ul></li><li><p>我们需要一些自定义的映射处理，我们也可以自己给容器中放<strong>HandlerMapping</strong>。自定义 <strong>HandlerMapping</strong></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot-Web开发静态资源规则</title>
      <link href="/post/4d54384f.html"/>
      <url>/post/4d54384f.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Web开发静态资源规则与定制化</p></blockquote><span id="more"></span><h2 id="静态资源目录"><a href="#静态资源目录" class="headerlink" title="静态资源目录"></a>静态资源目录</h2><p>类路径下：<code>/static</code>、<code>/public</code>、<code>/resources</code>、<code>/META-INF/resources</code></p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205191557983.png" alt="image-20220519155740538"></p><p>访问方法：当前项目根路径+静态资源名</p><p>原理：静态映射<font color="red">/**</font></p><font color="orange">请求进来时，先去找controller看能不能处理，不能处理的所有请求又交给静态资源处理器，静态资源也找不到则响应404页面</font><h2 id="静态资源访问前缀"><a href="#静态资源访问前缀" class="headerlink" title="静态资源访问前缀"></a>静态资源访问前缀</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  mvc:</span><br><span class="line">    static-path-pattern: /res/**</span><br></pre></td></tr></table></figure><p>访问方法：当前项目+<font color="orange">/res</font>+静态资源名</p><h2 id="改变默认静态资源路径"><a href="#改变默认静态资源路径" class="headerlink" title="改变默认静态资源路径"></a>改变默认静态资源路径</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">    resources:</span><br><span class="line">      static-locations: classpath:/xiaoying/</span><br></pre></td></tr></table></figure><h2 id="Webjars"><a href="#Webjars" class="headerlink" title="Webjars"></a>Webjars</h2><p>注意，静态资源还会自动映射到<font color="orange">/webjars/**</font></p><p>例如我们项目中引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205191559754.png" alt="image-20220519155921638"></p><p>那么我们的访问路径：当前项目+/webjars/jquery/3.5.1.jquery.js</p><p>这也提醒了我们<font color="orange">META-INF/resources</font>路径下的静态资源是可以直接访问的，无论是否更改了静态资源路径，不可能因为我们在项目中更改了静态资源路径就导致外部引入的第三方依赖不能使用</p><h2 id="欢迎页"><a href="#欢迎页" class="headerlink" title="欢迎页"></a>欢迎页</h2><ol><li>静态资源路径下的index.html<ol><li>可以配置静态资源路径</li><li>但是不可以配置静态资源访问的前缀，否则会导致index.html不能被默认访问(2.3.4.RELEASE版本)</li></ol></li><li>controller能处理/index</li></ol><h2 id="自定义Favicon"><a href="#自定义Favicon" class="headerlink" title="自定义Favicon"></a>自定义Favicon</h2><p>将<font color="orange">favicon.ico</font>放在静态资源目录下即可</p><h2 id="静态资源配置原理"><a href="#静态资源配置原理" class="headerlink" title="静态资源配置原理"></a>静态资源配置原理</h2><ul><li>SpringBoot启动默认加载xxxxAutoConfiguration类（自动配置类）</li><li>SpringMVC功能的自动配置类是WebMvcAutoConfiguration</li></ul><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205191622368.png" alt="image-20220519162246012"></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class &#125;)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(&#123; DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,</span></span><br><span class="line"><span class="meta">ValidationAutoConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcAutoConfiguration</span> &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>给容器中配置了什么</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//WebMvcAutoConfiguration.java</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcAutoConfiguration</span> &#123;</span><br><span class="line">  ...</span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@Import(EnableWebMvcConfiguration.class)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123; WebMvcProperties.class, ResourceProperties.class &#125;)</span></span><br><span class="line"><span class="meta">@Order(0)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">WebMvcAutoConfigurationAdapter</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;&#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置文件的相关属性和xxx进行了绑定</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.mvc&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcProperties</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.resources&quot;, ignoreUnknownFields = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResourceProperties</span> &#123;&#125;</span><br></pre></td></tr></table></figure><ol><li><p>配置类只有一个有参构造器时候,<font color="orange">有参构造器中的所有参数都会从容器中获取</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//WebMvcAutoConfiguration.java</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ResourceProperties resourceProperties；获取和spring.resources绑定的所有的值的对象</span></span><br><span class="line"><span class="comment">//WebMvcProperties mvcProperties 获取和spring.mvc绑定的所有的值的对象</span></span><br><span class="line"><span class="comment">//ListableBeanFactory beanFactory Spring的beanFactory</span></span><br><span class="line"><span class="comment">//HttpMessageConverters 找到所有的HttpMessageConverters</span></span><br><span class="line"><span class="comment">//ResourceHandlerRegistrationCustomizer 找到 资源处理器的自定义器。=========</span></span><br><span class="line"><span class="comment">//DispatcherServletPath  </span></span><br><span class="line"><span class="comment">//ServletRegistrationBean   给应用注册Servlet、Filter....</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcAutoConfiguration</span> &#123;</span><br><span class="line">  ...</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">WebMvcAutoConfigurationAdapter</span><span class="params">(ResourceProperties resourceProperties, WebMvcProperties mvcProperties,</span></span><br><span class="line"><span class="params">ListableBeanFactory beanFactory, ObjectProvider&lt;HttpMessageConverters&gt; messageConvertersProvider,</span></span><br><span class="line"><span class="params">ObjectProvider&lt;ResourceHandlerRegistrationCustomizer&gt; resourceHandlerRegistrationCustomizerProvider,</span></span><br><span class="line"><span class="params">ObjectProvider&lt;DispatcherServletPath&gt; dispatcherServletPath,</span></span><br><span class="line"><span class="params">ObjectProvider&lt;ServletRegistrationBean&lt;?&gt;&gt; servletRegistrations)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.resourceProperties = resourceProperties;</span><br><span class="line"><span class="built_in">this</span>.mvcProperties = mvcProperties;</span><br><span class="line"><span class="built_in">this</span>.beanFactory = beanFactory;</span><br><span class="line"><span class="built_in">this</span>.messageConvertersProvider = messageConvertersProvider;</span><br><span class="line"><span class="built_in">this</span>.resourceHandlerRegistrationCustomizer = resourceHandlerRegistrationCustomizerProvider.getIfAvailable();</span><br><span class="line"><span class="built_in">this</span>.dispatcherServletPath = dispatcherServletPath;</span><br><span class="line"><span class="built_in">this</span>.servletRegistrations = servletRegistrations;</span><br><span class="line">&#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>资源处理的默认规则</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcAutoConfiguration</span> &#123;</span><br><span class="line">  ...</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">logger.debug(<span class="string">&quot;Default resource handling disabled&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">      <span class="comment">//静态资源缓存时间,可以在配置文件配置</span></span><br><span class="line"><span class="type">Duration</span> <span class="variable">cachePeriod</span> <span class="operator">=</span> <span class="built_in">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class="line"><span class="type">CacheControl</span> <span class="variable">cacheControl</span> <span class="operator">=</span> <span class="built_in">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();</span><br><span class="line">    <span class="comment">//webjars相关规则，去哪里找</span></span><br><span class="line"><span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">&quot;/webjars/**&quot;</span>)) &#123;</span><br><span class="line">customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>)</span><br><span class="line">.addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>)</span><br><span class="line">.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">&#125;</span><br><span class="line">      <span class="comment">//   /**</span></span><br><span class="line"><span class="type">String</span> <span class="variable">staticPathPattern</span> <span class="operator">=</span> <span class="built_in">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line"><span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">customizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)</span><br><span class="line">                                             <span class="comment">//this.resourceProperties.getStaticLocations()在下面的图示</span></span><br><span class="line">.addResourceLocations(getResourceLocations(<span class="built_in">this</span>.resourceProperties.getStaticLocations()))</span><br><span class="line">.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205191933800.png" alt="image-20220519193351464"></p><p>通过源码，我们发现，可以配置禁止所有静态资源规则,直接return</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">add-mappings:</span> <span class="literal">false</span>   <span class="comment">#禁用所有静态资源规则</span></span><br></pre></td></tr></table></figure><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205191945877.png" alt="image-20220519194509801"></p><h2 id="欢迎页处理规则"><a href="#欢迎页处理规则" class="headerlink" title="欢迎页处理规则"></a>欢迎页处理规则</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//HandlerMapping:处理器映射，保存了每一个Handler能处理哪些请求</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcAutoConfiguration</span> &#123;</span><br><span class="line">  ...</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> WelcomePageHandlerMapping <span class="title function_">welcomePageHandlerMapping</span><span class="params">(ApplicationContext applicationContext,</span></span><br><span class="line"><span class="params">FormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider)</span> &#123;</span><br><span class="line"><span class="type">WelcomePageHandlerMapping</span> <span class="variable">welcomePageHandlerMapping</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WelcomePageHandlerMapping</span>(</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">TemplateAvailabilityProviders</span>(applicationContext), applicationContext, getWelcomePage(),</span><br><span class="line">        <span class="comment">//绑定配置文件里的配置</span></span><br><span class="line"><span class="built_in">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class="line">welcomePageHandlerMapping.setInterceptors(getInterceptors(mvcConversionService, mvcResourceUrlProvider));</span><br><span class="line">welcomePageHandlerMapping.setCorsConfigurations(getCorsConfigurations());</span><br><span class="line"><span class="keyword">return</span> welcomePageHandlerMapping;</span><br><span class="line">&#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205191959882.png" alt="image-20220519195953496"></p><p>这里也解释了之前的问题：为什么配置了静态资源访问路径后index.html就失效的问题，从上面的图片我们可以看出，默认的规则是<font color="orange">当我们有欢迎页并且访问路径是/**</font>才会去找index.html</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot自动配置源码分析</title>
      <link href="/post/3848525a.html"/>
      <url>/post/3848525a.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>SpringBoot自动配置源码分析</p></blockquote><span id="more"></span><p>首先，我们可以进入<code>@SpringBootApplication</code>注解进行查看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(</span></span><br><span class="line"><span class="meta">    excludeFilters = &#123;@Filter(</span></span><br><span class="line"><span class="meta">    type = FilterType.CUSTOM,</span></span><br><span class="line"><span class="meta">    classes = &#123;TypeExcludeFilter.class&#125;</span></span><br><span class="line"><span class="meta">), @Filter(</span></span><br><span class="line"><span class="meta">    type = FilterType.CUSTOM,</span></span><br><span class="line"><span class="meta">    classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span></span><br><span class="line"><span class="meta">)&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication&#123;&#125;</span><br></pre></td></tr></table></figure><p>接下来我们对这三个注解逐一进行分析</p><h4 id="SpringBootConfiguration"><a href="#SpringBootConfiguration" class="headerlink" title="@SpringBootConfiguration"></a>@SpringBootConfiguration</h4><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205182152325.png" alt="image-20220518215206216"></p><p>通过这个注解，我们发现上面标注了<code>@Configuration</code>，也说明了主启动类也是个配置类，是容器中的组件</p><h4 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h4><p>指定要扫描哪些</p><h4 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;&#125;</span><br></pre></td></tr></table></figure><p>1、 @AutoConfigurationPackage</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(&#123;Registrar.class&#125;)</span><span class="comment">//给容器中导入组件</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AutoConfigurationPackage &#123;&#125;</span><br></pre></td></tr></table></figure><p><code>利用Register给容器中导入一系列组件(批量注册),将指定包下的所有组件注册</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Registrar.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinitions</span><span class="params">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line">            AutoConfigurationPackages.register(registry, (String[])(<span class="keyword">new</span> <span class="title class_">AutoConfigurationPackages</span>.PackageImports(metadata)).getPackageNames().toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//AnnotationMetadata注解元信息，可以告诉我们这个注解标注在了哪里，每一个属性值</span></span><br><span class="line"><span class="comment">//new AutoConfigurationPackages.PackageImports(metadata)).getPackageNames()拿到标注这个注解所在的包</span></span><br></pre></td></tr></table></figure><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205182209487.png" alt="image-20220518220937124"></p><p>2、@Import({AutoConfigurationImportSelector.class})</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//AutoConfigurationImportSelector.java</span></span><br><span class="line"><span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.isEnabled(annotationMetadata)) &#123;</span><br><span class="line">            <span class="keyword">return</span> NO_IMPORTS;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            AutoConfigurationImportSelector.<span class="type">AutoConfigurationEntry</span> <span class="variable">autoConfigurationEntry</span> <span class="operator">=</span> <span class="built_in">this</span>.getAutoConfigurationEntry(annotationMetadata);</span><br><span class="line">            <span class="keyword">return</span> StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//getAutoConfigurationEntry(annotationMetadata) 1、给容器中批量导入一些组件</span></span><br><span class="line"><span class="comment">//List&lt;String&gt; configurations = this.getCandidateConfigurations(annotationMetadata, attributes); 2、获取所有需要导入到容器中的组件</span></span><br></pre></td></tr></table></figure><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205190006469.png" alt="image-20220519000655160"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//AutoConfigurationImportSelector.java</span></span><br><span class="line"><span class="keyword">protected</span> List&lt;String&gt; <span class="title function_">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> &#123;</span><br><span class="line">        List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(<span class="built_in">this</span>.getSpringFactoriesLoaderFactoryClass(), <span class="built_in">this</span>.getBeanClassLoader());</span><br><span class="line">        Assert.notEmpty(configurations, <span class="string">&quot;No auto configuration classes found in META-INF/spring.factories. If you are using a custom packaging, make sure that file is correct.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> configurations;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//SpringFactoriesLoader.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">loadFactoryNames</span><span class="params">(Class&lt;?&gt; factoryType, <span class="meta">@Nullable</span> ClassLoader classLoader)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">factoryTypeName</span> <span class="operator">=</span> factoryType.getName();</span><br><span class="line">        <span class="keyword">return</span> (List)loadSpringFactories(classLoader).getOrDefault(factoryTypeName, Collections.emptyList());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、利用工厂加载得到所有的组件</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, List&lt;String&gt;&gt; <span class="title function_">loadSpringFactories</span><span class="params">(<span class="meta">@Nullable</span> ClassLoader classLoader)</span> &#123;&#125;</span><br><span class="line"><span class="comment">//4、从META-INF/spring.factories位置加载一个文件</span></span><br><span class="line"><span class="comment">//默认扫描我们系统内所有的META-INF/spring.factories文件</span></span><br><span class="line"><span class="comment">//而spring-boot-autoconfigure-2.3.4.RELEASE.jar包里面也有META-INF/spring.factories</span></span><br></pre></td></tr></table></figure><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205190019092.png" alt="image-20220519001925835"></p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205190025441.png" alt="image-20220519002524039"></p><font color="orange">虽然我们127个场景的所有自动配置启动时会默认全部加载，但是最终会按照条件装配规则（@Conditional）按需配置</font><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205190037829.png" alt="image-20220519003741430"></p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205190047610.png" alt="image-20220519004755151"></p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205190048961.png" alt="image-20220519004833511"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(MultipartResolver.class)</span>  <span class="comment">//容器中有这个类型组件</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME)</span> <span class="comment">//容器中没有这个名字 multipartResolver 的组件</span></span><br><span class="line"><span class="keyword">public</span> MultipartResolver <span class="title function_">multipartResolver</span><span class="params">(MultipartResolver resolver)</span> &#123;</span><br><span class="line"><span class="comment">//给@Bean标注的方法传入了对象参数，这个参数的值就会从容器中找。</span></span><br><span class="line"><span class="comment">//SpringMVC multipartResolver。防止有些用户配置的文件上传解析器不符合规范</span></span><br><span class="line"><span class="comment">// Detect if the user has created a MultipartResolver but named it incorrectly</span></span><br><span class="line"><span class="keyword">return</span> resolver;<span class="comment">//给容器中加入了文件上传解析器；</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>SpringBoot默认会在底层配好所有的组件，但是<strong>如果用户自己配置了以用户的优先</strong>。</p></blockquote><p>总结：</p><ul><li>SpringBoot先加载所有的自动配置类 xxxxAutoConfiguration</li><li>每个自动配置类按照条件进行生效，默认都会绑定配置文件指定的值。（xxxxProperties里面读取，xxxProperties和配置文件进行了绑定）</li><li>生效的配置类就会给容器中装配很多组件</li><li>只要容器中有这些组件，相当于这些功能就有了</li><li>定制化配置<ul><li>用户直接自己@Bean替换底层的组件</li><li>用户去看这个组件是获取的配置文件什么值就去修改。</li></ul></li></ul><p><strong>xxxxxAutoConfiguration —&gt; 组件 —&gt; xxxxProperties里面拿值 ——&gt; application.properties</strong></p><hr>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SprinbBoot底层注解</title>
      <link href="/post/59c5a4d.html"/>
      <url>/post/59c5a4d.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>SpringBoot底层注解及其原理</p></blockquote><span id="more"></span><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h2><p>被<font color="orange">@Configuration</font>注解标注的类表示为一个配置类，相当于我们传统SSM开发的xml配置文件，@Configuration注解有两种工作模式：<code>Full模式</code>和<code>Lite模式</code>。</p><p>我们可以通过<font color="orange">proxyBeanMethods</font>属性来进行模式的切换</p><ol><li>Full模式:@Configuration(proxyBeanMethods=true) 【保证每个@Bean方法被调用多少次返回的组件都是单实例的】</li><li>Lite模式:@Configuration(proxyBeanMethods=false)  【每个@Bean方法被调用多少次返回的组件都是新创建的】</li></ol><h4 id="详细理解"><a href="#详细理解" class="headerlink" title="详细理解"></a>详细理解</h4><ol><li>如果为true，则被@Bean注解标注的方法都会被<font color="orange">CGLIB</font>进行代理，而且会进行bean的生命周期，如果bean是单例的，那么调用@Bean标识的方法，无论方法调用几次都是同一个bean</li><li>如果为false，则被@Bean注解标识的方法，不会被CGLIB代理，也不会进行bean的生命周期，调用这些方法，就是普通方法的调用，并不会从容器中获取对象</li></ol><blockquote><p>总结：如果配置类中@Bean标识的方法之间不存在依赖调用的话，可以设置为false，可以避免拦截方法进行代理类操作，对性能有一定的提升；组件依赖必须使用Full模式默认。但是要注意，@Bean标识的返回值对象还是会放到容器里的，从容器中获取的bean还是单例的，会进行生命周期</p></blockquote><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置类，配置类本身也是组件</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方法名就是组件的id</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">user</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//IOC容器</span></span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">run</span> <span class="operator">=</span> SpringApplication.run(MainApplication.class, args);</span><br><span class="line">        <span class="comment">//查看容器里的组件</span></span><br><span class="line">        String[] names = run.getBeanDefinitionNames();</span><br><span class="line">        Arrays.stream(names)</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">      </span><br><span class="line">        <span class="type">MyConfig</span> <span class="variable">bean</span> <span class="operator">=</span> run.getBean(MyConfig.class);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> bean.user();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> bean.user();</span><br><span class="line">        System.out.println(user1==user2);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user01</span> <span class="operator">=</span> run.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user02</span> <span class="operator">=</span> run.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">        System.out.println(user01==user02 );<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Bean、-Component、-Controller、-Service、-Repository"><a href="#Bean、-Component、-Controller、-Service、-Repository" class="headerlink" title="@Bean、@Component、@Controller、@Service、@Repository"></a>@Bean、@Component、@Controller、@Service、@Repository</h4><h4 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h4><h4 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h4><p>@Import注解可以快速向容器中导入组件，但我们要注意<font color="orange">注解只能放在容器中的组件上，例如配置类，主启动类或controller层等等</font>，具体使用方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Import(&#123;User.class, DBHelper.class&#125;)</span></span><br><span class="line"><span class="comment">//给容器中自动创建出这两个类型的组件、默认组件的名字就是全类名</span></span><br><span class="line"><span class="meta">@Import(&#123;User.class, DBHelper.class&#125;)</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Conditional"><a href="#Conditional" class="headerlink" title="@Conditional"></a>@Conditional</h4><p>条件装配：<font color="orange">满足Conditional指定的条件，则进行组件的注入</font></p><p>首先我们可以查看派生出来的注解：</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205181942840.png" alt="image-20220518194233687"></p><h4 id="ImportResource"><a href="#ImportResource" class="headerlink" title="@ImportResource"></a>@ImportResource</h4><p>使用这个注解，妈妈再也不用担心我要把传统的xml里配置的bean手动改成@Bean注解形式了，使用这个注解，我们可以很方便的将xml里配置的bean加入到spring容器中,使用方法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@ImportResource(&quot;classpath:beans.xml&quot;)</span><br><span class="line">public class MyConfig &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ConfigurationProperties"><a href="#ConfigurationProperties" class="headerlink" title="@ConfigurationProperties"></a>@ConfigurationProperties</h4><p>我们有时候会将一些经常变动的内容放到<font color="orange">application.properties</font>，然后绑定在我们的代码中，除了使用<font color="orange">@Value</font>注解外，我们还可以通过以下方式实现配置绑定。</p><ol><li><p>@ConfigurationProperties+@Component</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;mycar&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>@EnableConfiguration+@ConfigurationProperties</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties(Car.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//========================================</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;mycar&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：<code>@EnableConfiguration</code>注解有两个作用：1、开启Car配置绑定功能 2、将Car这个组件自动注册到容器中</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot依赖管理与自动配置</title>
      <link href="/post/843a4e2e.html"/>
      <url>/post/843a4e2e.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>SpringBoot依赖管理和自动配置特性</p></blockquote><span id="more"></span><h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><p>当我们开发SpringBoot应用时会引入以下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们可能会好奇这个依赖的作用是什么，为什么我们引入的许多依赖不需要加版本号就能使用，根本原因和这个依赖密不可分，我们可以进入这个依赖内部</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们可以看到这个依赖内部还是有parent标签，我们继续进入</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205181617445.png" alt="image-20220518161659165"></p><p>这时，我们会发现，我们项目所有的依赖版本号都是以及维护好了的，这个机制也可以称为SpringBoot的<font color="orange">自动版本仲裁机制</font>，那如果我们如果想更改这些版本号该怎么办呢？—我们可以在当前项目的POM文件里进行版本号的更改，例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.43<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样，我们就更改了默认的版本号配置。</p><p>注意：</p><ol><li>引入默认依赖可以不写版本号</li><li>引入非版本仲裁的依赖，需要写版本号</li></ol><h2 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h2><ol><li>自动配置好Tomcat<ol><li>引入Tomcat依赖</li><li>配置Tomcat</li></ol></li><li>自动配置好SpringMVC<ol><li>引入SpringMVC全套组件</li><li>自动配置好SpringMVC常用功能</li></ol></li><li>自动配置好web常见功能，如：<font color="orange">字符串编码问题</font></li><li>默认的包结构<ol><li>主程序所在的包及其下面的所有子包里面的组件都会被默认扫描</li><li>无需以前的包扫描配置</li><li>如果改变默认的扫描路径，可以使用<font color="orange">@SpringBootApplication(scanBasePackages=<strong>“xxxx”</strong>)</font>或者<font color="orange">@ComponentScan</font>扫描指定路径</li></ol></li><li>各种配置都有默认值<ol><li>默认配置最终都是映射到某个类上</li><li>配置文件的值最终都会绑定在每个类上，这个类会在容器中创建对象</li></ol></li><li>按需加载所有的自动配置项<ol><li>引入非常多的starter</li><li>引入了哪些场景，这个场景的自动配置才会开启</li><li>SpringBoot所有的自动配置功能都在spring-boot-autoconfigure包下</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拦截器</title>
      <link href="/post/31f56178.html"/>
      <url>/post/31f56178.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>拦截器的正确使用会大大加快我们的开发效率</p></blockquote><span id="more"></span><p>我们现在有这样的一个场景：我们在进行系统的开发时，若用户没有登录则跳转到登录页面，让用户登录，但是这个校验逻辑我们要在每个接口里面都写一遍吗？如果不进行登录判断的话，那么我们的系统则是不安全的，但每个接口都写一遍相同的校验逻辑未免也太繁琐了，这时候就可以考虑使用我们的<font color="orange">拦截器</font>来解决这个问题。</p><p>当然，拦截器的功能不仅限于此，还可以完成<code>日志记录</code>、<code>权限检查</code>等任务</p><p>为了更加深入的了解拦截器，我们需要查看拦截器里面包含哪些方法，我们可以看到拦截器<font color="orange">Interceptor</font>是一个接口，里面包含了三个方法：</p><ol><li>preHandle：请求被处理之前进行操作，预处理</li><li>postHandle：请求被处理之后，但是结果还没渲染之前进行操作，可以改变响应结果，后处理</li><li>afterCompletion：所有的请求响应结束后(渲染视图完毕后)执行善后操作，清理对象，关闭资源，最终处理</li></ol><p>我们可以通过一张图来深入学习这三个方法的作用</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205172000154.png" alt="image-20220517195952971"></p><p>接下来我们可以通过一段代码来学习到SpringBoot中如何使用拦截器</p><h4 id="实现HandlerInterceptor接口"><a href="#实现HandlerInterceptor接口" class="headerlink" title="实现HandlerInterceptor接口"></a>实现HandlerInterceptor接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 目标方法执行之前</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">        log.info(<span class="string">&quot;preHandle拦截的请求路径是&#123;&#125;&quot;</span>,requestURI);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//登录检查逻辑</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">loginUser</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;loginUser&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(loginUser != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//放行</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拦截住。未登录。跳转到登录页</span></span><br><span class="line">        request.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;请先登录&quot;</span>);</span><br><span class="line"><span class="comment">//        re.sendRedirect(&quot;/&quot;);</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/&quot;</span>).forward(request,response);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 目标方法执行完成以后</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modelAndView</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.info(<span class="string">&quot;postHandle执行&#123;&#125;&quot;</span>,modelAndView);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 页面渲染以后</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.info(<span class="string">&quot;afterCompletion执行异常&#123;&#125;&quot;</span>,ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注册拦截器"><a href="#注册拦截器" class="headerlink" title="注册拦截器"></a>注册拦截器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminWebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Filter、Interceptor 几乎拥有相同的功能？</span></span><br><span class="line"><span class="comment">     * 1、Filter是Servlet定义的原生组件。好处，脱离Spring应用也能使用</span></span><br><span class="line"><span class="comment">     * 2、Interceptor是Spring定义的接口。可以使用Spring的自动装配等功能</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>())</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>)  <span class="comment">//所有请求都被拦截包括静态资源</span></span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/login&quot;</span>,<span class="string">&quot;/css/**&quot;</span>,<span class="string">&quot;/fonts/**&quot;</span>,<span class="string">&quot;/images/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/js/**&quot;</span>,<span class="string">&quot;/aa/**&quot;</span>); <span class="comment">//放行的请求</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205172216942.png" alt="image-20220517221603860"></p><p>通过结果，我们可以直观的了解到每个方法的执行顺序</p><p>接下来我们可以深入分析拦截器的<font color="orange">执行时机</font>和<font color="orange">原理</font></p><ol><li><p>根据当前请求，找到HandlerExecutionChain[可以处理请求的handler以及Handler的所有拦截器]</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205172316202.png" alt="image-20220517231622654"></p></li><li><p>在执行目标方法之前执行拦截器的前置处理，顺序执行所有拦截器的preHandle方法</p><ol><li>如果当前拦截器preHandle返回true，则执行下一个拦截器的preHandle</li><li>如若当前拦截器返回false。直接<font color="orange">倒叙执行</font>所有以及执行了的拦截器的afterCompletion方法</li></ol><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205172319869.png" alt="image-20220517231942812"></p><p>​        我们进入这个applyPreHandle方法</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205172322526.png" alt="image-20220517232213344"></p><p>​        我们可以看到这个方法里通过for循环遍历所有的拦截器，我们进入preHandle方法进行查看，进入之后我们可以看到跳转到了我们自定义的拦截器 </p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205172324521.png" alt="image-20220517232449411"></p><p>​       根据执行返回的结果进行下一步</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205172330647.png" alt="image-20220517233056498"></p></li><li><p>如果任何一个拦截器返回false，则直接跳出，不执行目标方法</p></li><li><p>所有的拦截器都返回true，则执行目标方法</p></li><li><p>倒叙执行所有拦截器的postHandle方法<img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205172334339.png" alt="image-20220517233431214"></p></li><li><p>前面的步骤有任何异常都会直接触发afterCompletion</p></li><li><p>页面成功渲染完成也会倒叙触发afterCompletion</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205172343679.png" alt="image-20220517234309542"></p></li></ol><h4 id="图解："><a href="#图解：" class="headerlink" title="图解："></a>图解：</h4><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205172353728.png" alt="image-20220517235302648"></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拦截器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java8日期API</title>
      <link href="/post/f1ecb925.html"/>
      <url>/post/f1ecb925.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>java8日期API的出现真是解决了java的一大诟病</p></blockquote><span id="more"></span><h2 id="JDK老DateApi"><a href="#JDK老DateApi" class="headerlink" title="JDK老DateApi"></a>JDK老DateApi</h2><p>传统的日期API让开发人员很头疼，各种规范不统一，而且还会有线程安全问题，一直被开发人员吐槽！</p><p>例如以下逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line">        Date date=<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">116</span>,<span class="number">2</span>,<span class="number">18</span>);</span><br><span class="line">      <span class="comment">//Fri Mar 18 00:00:00 CST 2016</span></span><br><span class="line">        System.out.println(date);</span><br><span class="line"></span><br><span class="line">        SimpleDateFormat sdf=<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyyMMdd&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> x=<span class="number">0</span>;x&lt;<span class="number">100</span>;x++)&#123;</span><br><span class="line">                    Date parseDate=<span class="literal">null</span>;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        parseDate=sdf.parse(<span class="string">&quot;20160505&quot;</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(parseDate);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你能一眼看出第4行的打印结果吗？这显然是一个问题。此外，日期转换还会出现线程安全问题，会抛出异常</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205161133425.png" alt="image-20220516113326192"></p><h3 id="新DateApi"><a href="#新DateApi" class="headerlink" title="新DateApi"></a>新DateApi</h3><h4 id="LocalDate"><a href="#LocalDate" class="headerlink" title="LocalDate"></a>LocalDate</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testLocalDate</span><span class="params">()</span>&#123;</span><br><span class="line">     LocalDate localDate=LocalDate.of(<span class="number">2022</span>,<span class="number">5</span>,<span class="number">16</span>);</span><br><span class="line">     System.out.println(localDate.getYear());<span class="comment">//2022</span></span><br><span class="line">     System.out.println(localDate.getMonth());<span class="comment">//MAY</span></span><br><span class="line">     System.out.println(localDate.getMonthValue());<span class="comment">//5</span></span><br><span class="line">     System.out.println(localDate.getDayOfYear());<span class="comment">//136</span></span><br><span class="line">     System.out.println(localDate.getDayOfMonth());<span class="comment">//16</span></span><br><span class="line">     System.out.println(localDate.getDayOfWeek());<span class="comment">//MONDAY</span></span><br><span class="line">     System.out.println(LocalDate.now());<span class="comment">//2022-05-16</span></span><br><span class="line">     System.out.println(localDate.get(ChronoField.DAY_OF_MONTH));<span class="comment">//16</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="LocalTime"><a href="#LocalTime" class="headerlink" title="LocalTime"></a>LocalTime</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testLocalTime</span><span class="params">()</span>&#123;</span><br><span class="line">     LocalTime time=LocalTime.now();</span><br><span class="line">     System.out.println(time.getHour());<span class="comment">//11</span></span><br><span class="line">     System.out.println(time.getMinute());<span class="comment">//49</span></span><br><span class="line">     System.out.println(time.getSecond());<span class="comment">//44</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="LocalDateTime"><a href="#LocalDateTime" class="headerlink" title="LocalDateTime"></a>LocalDateTime</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">combineLocalDateAndTime</span><span class="params">()</span>&#123;</span><br><span class="line">     LocalDate localDate=LocalDate.now();</span><br><span class="line">     LocalTime time=LocalTime.now();</span><br><span class="line">     <span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> LocalDateTime.of(localDate, time);</span><br><span class="line">     System.out.println(localDateTime.toString());<span class="comment">//2022-05-16T11:54:22.981</span></span><br><span class="line">     <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">     System.out.println(now);<span class="comment">//2022-05-16T11:54:22.981</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Instant"><a href="#Instant" class="headerlink" title="Instant"></a>Instant</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testInstant</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">     Instant start=Instant.now();</span><br><span class="line">     Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">     Instant end=Instant.now();</span><br><span class="line">     <span class="type">Duration</span> <span class="variable">duration</span> <span class="operator">=</span> Duration.between(start, end);</span><br><span class="line">     System.out.println(duration.toMillis());<span class="comment">//1004</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Duration"><a href="#Duration" class="headerlink" title="Duration"></a>Duration</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testDuration</span><span class="params">()</span>&#123;</span><br><span class="line">     LocalTime time=LocalTime.now();</span><br><span class="line">     <span class="type">LocalTime</span> <span class="variable">beforeTime</span> <span class="operator">=</span> time.minusHours(<span class="number">1</span>);</span><br><span class="line">     <span class="type">Duration</span> <span class="variable">duration</span> <span class="operator">=</span> Duration.between(time, beforeTime);</span><br><span class="line">     System.out.println(duration.toHours());<span class="comment">//-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Period"><a href="#Period" class="headerlink" title="Period"></a>Period</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testPeriod</span><span class="params">()</span>&#123;</span><br><span class="line">     <span class="type">Period</span> <span class="variable">period</span> <span class="operator">=</span> Period.between(LocalDate.of(<span class="number">2020</span>, <span class="number">1</span>, <span class="number">1</span>), LocalDate.of(<span class="number">2021</span>,<span class="number">2</span>,<span class="number">2</span>));</span><br><span class="line">     System.out.println(period.getDays());<span class="comment">//1</span></span><br><span class="line">     System.out.println(period.getMonths());<span class="comment">//1</span></span><br><span class="line">     System.out.println(period.getYears());<span class="comment">//1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="format"><a href="#format" class="headerlink" title="format"></a>format</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testDateFormat</span><span class="params">()</span>&#123;</span><br><span class="line">     LocalDate localDate=LocalDate.now();</span><br><span class="line">     <span class="type">String</span> <span class="variable">format1</span> <span class="operator">=</span> localDate.format(DateTimeFormatter.BASIC_ISO_DATE);</span><br><span class="line">     String format2=localDate.format(DateTimeFormatter.ISO_LOCAL_DATE);</span><br><span class="line">     System.out.println(format1);<span class="comment">//20220516</span></span><br><span class="line">     System.out.println(format2);<span class="comment">//2022-05-16</span></span><br><span class="line"></span><br><span class="line">     DateTimeFormatter dateTimeFormatter=DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">     <span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> localDate.format(dateTimeFormatter);</span><br><span class="line">     System.out.println(format);<span class="comment">//2022-05-16</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="parse"><a href="#parse" class="headerlink" title="parse"></a>parse</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testDateParse</span><span class="params">()</span>&#123;</span><br><span class="line">     String date1=<span class="string">&quot;20220516&quot;</span>;</span><br><span class="line">     LocalDate localDate=LocalDate.parse(date1,DateTimeFormatter.BASIC_ISO_DATE);</span><br><span class="line">     System.out.println(localDate);<span class="comment">//2022-05-16</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Date </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程Future设计模式</title>
      <link href="/post/73eb5e06.html"/>
      <url>/post/73eb5e06.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>多线程的Future设计模式可以大大提高我们程序的运行效率</p></blockquote><span id="more"></span><h2 id="Future模式原理"><a href="#Future模式原理" class="headerlink" title="Future模式原理"></a>Future模式原理</h2><p>当某个方法需要执行时间很长时，如果我们采用传统的编程方式，只能等待这个耗时较长的方法执行完之后才能继续进行下去，我们可以发现，这对于程序的执行效率来说是不高的，但是当我们采用<font color="orange">Future</font>时就无需等待，我们就可以继续做我们的事情，接下来我们通过一个例子来理解Future的原理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FutureInAction</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Future&lt;String&gt; future = invoke(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;I am Finished&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Error&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(future.get());</span><br><span class="line">        System.out.println(future.get());</span><br><span class="line">        System.out.println(future.get());</span><br><span class="line">        <span class="comment">//自己的业务逻辑</span></span><br><span class="line">        <span class="keyword">while</span> (!future.isDone())&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(future.get());</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        *传统方式</span></span><br><span class="line"><span class="comment">        String value = block(() -&gt; &#123;</span></span><br><span class="line"><span class="comment">            try &#123;</span></span><br><span class="line"><span class="comment">                Thread.sleep(10000);</span></span><br><span class="line"><span class="comment">                return &quot;I am Finished&quot;;</span></span><br><span class="line"><span class="comment">            &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">                return &quot;Error&quot;;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;);</span></span><br><span class="line"><span class="comment">        System.out.println(value);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">block</span><span class="params">(Callable&lt;T&gt; callable)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> callable.action();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; Future&lt;T&gt; <span class="title function_">invoke</span><span class="params">(Callable&lt;T&gt; callable)</span>&#123;</span><br><span class="line">        AtomicReference&lt;T&gt; result=<span class="keyword">new</span> <span class="title class_">AtomicReference</span>&lt;&gt;();</span><br><span class="line">        AtomicBoolean finished=<span class="keyword">new</span> <span class="title class_">AtomicBoolean</span>(<span class="literal">false</span>);</span><br><span class="line">        Thread t=<span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">           T value=callable.action();</span><br><span class="line">           result.set(value);</span><br><span class="line">           finished.set(<span class="literal">true</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        t.start();</span><br><span class="line">        Future&lt;T&gt; future=<span class="keyword">new</span> <span class="title class_">Future</span>&lt;T&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> T <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> result.get();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isDone</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> finished.get();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> future;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">interface</span> <span class="title class_">Future</span>&lt;T&gt;&#123;</span><br><span class="line">        T <span class="title function_">get</span><span class="params">()</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="title function_">isDone</span><span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">interface</span> <span class="title class_">Callable</span>&lt;T&gt;&#123;</span><br><span class="line">        T <span class="title function_">action</span><span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="程序运行的结果："><a href="#程序运行的结果：" class="headerlink" title="程序运行的结果："></a>程序运行的结果：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">null</span></span><br><span class="line"><span class="literal">null</span></span><br><span class="line"><span class="literal">null</span></span><br><span class="line"><span class="comment">//这里间隔了一段时间</span></span><br><span class="line">I am Finished</span><br></pre></td></tr></table></figure><blockquote><p>通过Future的方式，我们发现我们无需进行阻塞，而是异步的执行任务，这对我们来说是极好的，当然我们使用Future时也要考虑应用场景。当我们想要执行一些其他的事情时就可以考虑使用Future，如果我们想要等到方法执行完后在执行后面的逻辑，我们就无需采用Future</p></blockquote><h2 id="JDK自带的Future"><a href="#JDK自带的Future" class="headerlink" title="JDK自带的Future"></a>JDK自带的Future</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FutureInAction2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException, TimeoutException &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line">        Future&lt;String&gt; future = executorService.submit(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;I am finished&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;I am Error&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//这里会卡住</span></span><br><span class="line">        <span class="comment">//String value = future.get();</span></span><br><span class="line">        <span class="comment">//超过时间限制就抛异常</span></span><br><span class="line">        <span class="comment">//String value = future.get(10, TimeUnit.MICROSECONDS);</span></span><br><span class="line">        <span class="comment">//System.out.println(value);</span></span><br><span class="line">        <span class="keyword">while</span> (!future.isDone())&#123;</span><br><span class="line">            Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(future.get());</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是在这个例子中，我们会发现，我们的主线程还是需要一直傻傻的等待方法的返回值（主线程需要的话），<code>那么能不能方法执行完之后会主动把结果返回给我呢？</code>我们可以添加一个回调事件！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FutureInAction3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Future&lt;String&gt; future = invoke(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;I am finished&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;I am Error&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        future.setCompletable(<span class="keyword">new</span> <span class="title class_">Completable</span>&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">complete</span><span class="params">(String s)</span> &#123;</span><br><span class="line">                System.out.println(s);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exception</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;ERROR&quot;</span>);</span><br><span class="line">                cause.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;..........&quot;</span>);</span><br><span class="line">        System.out.println(future.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; Future&lt;T&gt; <span class="title function_">invoke</span><span class="params">(Callable&lt;T&gt; callable)</span>&#123;</span><br><span class="line">        AtomicReference&lt;T&gt; result=<span class="keyword">new</span> <span class="title class_">AtomicReference</span>&lt;&gt;();</span><br><span class="line">        AtomicBoolean finished=<span class="keyword">new</span> <span class="title class_">AtomicBoolean</span>(<span class="literal">false</span>);</span><br><span class="line">        Future&lt;T&gt; future=<span class="keyword">new</span> <span class="title class_">Future</span>&lt;T&gt;() &#123;</span><br><span class="line">            <span class="keyword">private</span> Completable&lt;T&gt; completable;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> T <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> result.get();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isDone</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> finished.get();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCompletable</span><span class="params">(Completable&lt;T&gt; completable)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.completable=completable;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Completable&lt;T&gt; <span class="title function_">getCompletable</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> completable;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Thread t=<span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                T value=callable.action();</span><br><span class="line">                result.set(value);</span><br><span class="line">                finished.set(<span class="literal">true</span>);</span><br><span class="line">                <span class="keyword">if</span>(future.getCompletable()!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    future.getCompletable().complete(value);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Throwable cause)&#123;</span><br><span class="line">                <span class="keyword">if</span>(future.getCompletable()!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    future.getCompletable().exception(cause);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> future;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">interface</span> <span class="title class_">Future</span>&lt;T&gt;&#123;</span><br><span class="line">        T <span class="title function_">get</span><span class="params">()</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="title function_">isDone</span><span class="params">()</span>;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">setCompletable</span><span class="params">(Completable&lt;T&gt; completable)</span>;</span><br><span class="line">        Completable&lt;T&gt; <span class="title function_">getCompletable</span><span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">interface</span> <span class="title class_">Callable</span>&lt;T&gt;&#123;</span><br><span class="line">        T <span class="title function_">action</span><span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">interface</span> <span class="title class_">Completable</span>&lt;T&gt;&#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">complete</span><span class="params">(T t)</span>;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">exception</span><span class="params">(Throwable cause)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了以上知识的铺垫，我们可以引出<font color="orange">CompletableFuture</font></p><p>使用<font color="orange">CompletableFuture</font>完成上述任务，我们可以使用提供的<font color="orange">supplyAsync</font>方法,例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompletableFutureInAction2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">AtomicBoolean</span> <span class="variable">finished</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicBoolean</span>(<span class="literal">false</span>);</span><br><span class="line">        ExecutorService executor= Executors.newFixedThreadPool(<span class="number">2</span>, r-&gt;&#123;</span><br><span class="line">            Thread t=<span class="keyword">new</span> <span class="title class_">Thread</span>(r);</span><br><span class="line">            t.setDaemon(<span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;);</span><br><span class="line">        CompletableFuture.supplyAsync(CompletableFutureInAction1::get,executor)</span><br><span class="line">                .whenComplete((v, t) -&gt; &#123;</span><br><span class="line">                    Optional.ofNullable(v).ifPresent(System.out::println);</span><br><span class="line">                    Optional.ofNullable(t).ifPresent(Throwable::printStackTrace);</span><br><span class="line">                    finished.set(<span class="literal">true</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;no block&quot;</span>);</span><br><span class="line"><span class="comment">//        while (!finished.get()) &#123;</span></span><br><span class="line"><span class="comment">//            Thread.sleep(1);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">    <span class="comment">/*    ExecutorService executor= Executors.newFixedThreadPool(2, r-&gt;&#123;</span></span><br><span class="line"><span class="comment">            Thread t=new Thread(r);</span></span><br><span class="line"><span class="comment">            t.setDaemon(true);</span></span><br><span class="line"><span class="comment">            return t;</span></span><br><span class="line"><span class="comment">        &#125;);</span></span><br><span class="line"><span class="comment">        executor.execute(()-&gt; System.out.println(&quot;test...&quot;));</span></span><br><span class="line"><span class="comment">        //executor.shutdown();*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可能会有疑问，为什么这里要使用非守护线程的方式呢？若是采用默认方式，开启的线程则是守护线程，这时候会出现我们第11和12行不输出的情况，原因是因为主线程已经结束。为了满足我们的需求，我们可以灵活选择是否设置为守护线程。</p><p>有时候我们可能会对查询出来的结果进行一些操作后再进行返回，这时我们可以搭配<font color="orange">thenApply方法</font></p><p>我们现在有这样的一个需求，对五个数据进行一些乘法操作返回一个集合，传统方式完成这项任务，我们会对这五个数据逐一进行乘法操作，是串行化执行的，但是当我们使用CompletableFuture完成这项任务时，就是并行执行的，大大提高了程序执行的效率。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompletableFutureInAction3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ExecutorService executor= Executors.newFixedThreadPool(<span class="number">2</span>,r-&gt;&#123;</span><br><span class="line">            Thread t=<span class="keyword">new</span> <span class="title class_">Thread</span>(r);</span><br><span class="line">            t.setDaemon(<span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="comment">//        CompletableFuture.supplyAsync(CompletableFutureInAction1::get,executor)</span></span><br><span class="line"><span class="comment">//                .thenApply(CompletableFutureInAction3::multiply)</span></span><br><span class="line"><span class="comment">//                .whenComplete((v,t)-&gt; Optional.ofNullable(v).ifPresent(System.out::println));</span></span><br><span class="line">        List&lt;Integer&gt; productionIds= Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">        Stream&lt;CompletableFuture&lt;Double&gt;&gt; completableFutureStream = productionIds.stream()</span><br><span class="line">                .map(i -&gt; CompletableFuture.supplyAsync(() -&gt; queryProduction(i), executor));</span><br><span class="line">        Stream&lt;CompletableFuture&lt;Double&gt;&gt; multiplyFuture = completableFutureStream.map(future -&gt; future.thenApply(CompletableFutureInAction3::multiply));</span><br><span class="line">        List&lt;Double&gt; result = multiplyFuture.map(CompletableFuture::join).collect(Collectors.toList());</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">multiply</span><span class="params">(<span class="type">double</span> value)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value*<span class="number">10d</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">queryProduction</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> CompletableFutureInAction1.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CompletableFuture常用API"><a href="#CompletableFuture常用API" class="headerlink" title="CompletableFuture常用API"></a>CompletableFuture常用API</h2><h4 id="thenApply"><a href="#thenApply" class="headerlink" title="thenApply"></a>thenApply</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture.supplyAsync(()-&gt;<span class="number">1</span>)</span><br><span class="line">                .thenApply(i-&gt;Integer.sum(i,<span class="number">10</span>))</span><br><span class="line">                        .whenComplete((v,t)-&gt; System.out.println(v));</span><br></pre></td></tr></table></figure><h4 id="handle"><a href="#handle" class="headerlink" title="handle"></a>handle</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture.supplyAsync(()-&gt;<span class="number">1</span>)</span><br><span class="line">                .handle((v,t)-&gt;Integer.sum(v,<span class="number">10</span>))</span><br><span class="line">                    .whenComplete((v,t)-&gt; System.out.println(v));</span><br></pre></td></tr></table></figure><h4 id="thenRun"><a href="#thenRun" class="headerlink" title="thenRun"></a>thenRun</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ompletableFuture.supplyAsync(()-&gt;<span class="number">1</span>)</span><br><span class="line">                .handle((v,t)-&gt;Integer.sum(v,<span class="number">10</span>))</span><br><span class="line">                .whenComplete((v,t)-&gt; System.out.println(v))</span><br><span class="line">                .thenRun(System.out::println);</span><br></pre></td></tr></table></figure><h4 id="thenAccept"><a href="#thenAccept" class="headerlink" title="thenAccept"></a>thenAccept</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture.supplyAsync(()-&gt;<span class="number">1</span>)</span><br><span class="line">        .thenApply(i-&gt;Integer.sum(i,<span class="number">10</span>))</span><br><span class="line">                .thenAccept(System.out::println);</span><br></pre></td></tr></table></figure><h4 id="thenCompose"><a href="#thenCompose" class="headerlink" title="thenCompose"></a>thenCompose</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture.supplyAsync(()-&gt;<span class="number">1</span>)</span><br><span class="line">                        .thenCompose(i-&gt;CompletableFuture.supplyAsync(()-&gt;<span class="number">10</span>*i))</span><br><span class="line">                                .thenAccept(System.out::println);</span><br></pre></td></tr></table></figure><h4 id="thenCombine"><a href="#thenCombine" class="headerlink" title="thenCombine"></a>thenCombine</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture.supplyAsync(()-&gt;<span class="number">1</span>)</span><br><span class="line">                        .thenCombine(CompletableFuture.supplyAsync(()-&gt;<span class="number">2.0d</span>),(r1,r2)-&gt;r1+r2)</span><br><span class="line">                                .thenAccept(System.out::println);</span><br></pre></td></tr></table></figure><h4 id="thenAcceptBoth"><a href="#thenAcceptBoth" class="headerlink" title="thenAcceptBoth"></a>thenAcceptBoth</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture.supplyAsync(()-&gt;<span class="number">1</span>)</span><br><span class="line">                          .thenAcceptBoth(CompletableFuture.supplyAsync(()-&gt;<span class="number">2.0d</span>),(r1,r2)-&gt;&#123;</span><br><span class="line">                              System.out.println(r1);</span><br><span class="line">                              System.out.println(r2);</span><br><span class="line">                              System.out.println(r1+r2);</span><br><span class="line">                          &#125;);</span><br></pre></td></tr></table></figure><h4 id="runAfterBoth"><a href="#runAfterBoth" class="headerlink" title="runAfterBoth"></a>runAfterBoth</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture.supplyAsync(()-&gt;&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;is Running&quot;</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125;)</span><br><span class="line">                .runAfterBoth(CompletableFuture.supplyAsync(()-&gt;&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;is Running&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">                &#125;),()-&gt; System.out.println(<span class="string">&quot;done&quot;</span>));</span><br></pre></td></tr></table></figure><h4 id="applyToEither"><a href="#applyToEither" class="headerlink" title="applyToEither"></a>applyToEither</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture.supplyAsync(()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;I am future 1&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> CompletableFutureInAction1.get();</span><br><span class="line">        &#125;).applyToEither(CompletableFuture.supplyAsync(()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;I am future 2&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> CompletableFutureInAction1.get();</span><br><span class="line">        &#125;),v-&gt;v*<span class="number">10</span>)</span><br><span class="line">                .thenAccept(System.out::println);</span><br></pre></td></tr></table></figure><h4 id="acceptEither"><a href="#acceptEither" class="headerlink" title="acceptEither"></a>acceptEither</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture.supplyAsync(()-&gt;&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;I am future 1&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> CompletableFutureInAction1.get();</span><br><span class="line">                &#125;).acceptEither(CompletableFuture.supplyAsync(()-&gt;&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;I am future 2&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> CompletableFutureInAction1.get();</span><br><span class="line">                &#125;),System.out::println);</span><br></pre></td></tr></table></figure><h4 id="runAfterEither"><a href="#runAfterEither" class="headerlink" title="runAfterEither"></a>runAfterEither</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture.supplyAsync(()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;I am future 1&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> CompletableFutureInAction1.get();</span><br><span class="line">        &#125;).runAfterEither(CompletableFuture.supplyAsync(()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;I am future 2&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> CompletableFutureInAction1.get();</span><br><span class="line">        &#125;),()-&gt; System.out.println(<span class="string">&quot;done&quot;</span>));</span><br></pre></td></tr></table></figure><h4 id="allof"><a href="#allof" class="headerlink" title="allof"></a>allof</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;CompletableFuture&lt;Double&gt;&gt; collect = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">                .stream()</span><br><span class="line">                .map(i -&gt; CompletableFuture.supplyAsync(CompletableFutureInAction1::get))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        CompletableFuture.allOf(collect.toArray(<span class="keyword">new</span> <span class="title class_">CompletableFuture</span>[collect.size()]))</span><br><span class="line">                .thenRun(()-&gt; System.out.println(<span class="string">&quot;done&quot;</span>));</span><br></pre></td></tr></table></figure><h4 id="anyof"><a href="#anyof" class="headerlink" title="anyof"></a>anyof</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;CompletableFuture&lt;Double&gt;&gt; collect = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">                .stream()</span><br><span class="line">                .map(i -&gt; CompletableFuture.supplyAsync(CompletableFutureInAction1::get))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        CompletableFuture.anyOf(collect.toArray(<span class="keyword">new</span> <span class="title class_">CompletableFuture</span>[collect.size()]))</span><br><span class="line">                .thenRun(()-&gt; System.out.println(<span class="string">&quot;done&quot;</span>));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JUC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Future </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合RabbitMQ</title>
      <link href="/post/8d5a68fd.html"/>
      <url>/post/8d5a68fd.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>SpringBoot整合RabbitMQ的简单使用</p></blockquote><span id="more"></span><h2 id="引入POM依赖"><a href="#引入POM依赖" class="headerlink" title="引入POM依赖"></a>引入POM依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置YAML"><a href="#配置YAML" class="headerlink" title="配置YAML"></a>配置YAML</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">110.42</span><span class="number">.236</span><span class="number">.30</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">ytt19990813</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="comment">#消费者最小数量</span></span><br><span class="line">        <span class="attr">concurrency:</span> <span class="number">10</span></span><br><span class="line">        <span class="comment">#消费者最大数量</span></span><br><span class="line">        <span class="attr">max-concurrency:</span> <span class="number">10</span></span><br><span class="line">        <span class="comment">#限制消费者每次只处理一条消息</span></span><br><span class="line">        <span class="attr">prefetch:</span> <span class="number">1</span></span><br><span class="line">        <span class="comment">#启动的时候是否默认启动容器，默认是true</span></span><br><span class="line">        <span class="attr">auto-startup:</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment">#当消息被拒绝时，是否重新进入队列</span></span><br><span class="line">        <span class="attr">default-requeue-rejected:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="Hello-World模式"><a href="#Hello-World模式" class="headerlink" title="Hello World模式"></a>Hello World模式</h2><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205150016257.png" alt="image-20220515001654207"></p><h4 id="声明队列"><a href="#声明队列" class="headerlink" title="声明队列"></a>声明队列</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQConfig</span>&#123;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> Queue <span class="title function_">queue</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//队列名称，是否持久化</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;queue&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MQSender</span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(Object msg)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;发送消息:&quot;</span>+msg);</span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;queue&quot;</span>,msg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接收消息"><a href="#接收消息" class="headerlink" title="接收消息"></a>接收消息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MQReceiver</span>&#123;</span><br><span class="line">  <span class="meta">@RabbitListener(queues=&quot;queue&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(Object msg)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;接收消息：&quot;</span>+msg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MQSender mqSender;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/mq&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mq</span><span class="params">()</span>&#123;</span><br><span class="line">      mqSender.send(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//发送消息：Hello</span></span><br><span class="line"><span class="comment">//接收消息：(Body:&#x27;Hello&#x27; MessageProperties [headers=&#123;&#125;, contentType=text/plain, contentEncoding=UTF-8, contentLength=0, receivedDeliveryMode=PERSISTENT, priority=0, redelivered=false, receivedExchange=, receivedRoutingKey=queue, deliveryTag=1, consumerTag=amq.ctag-TSZQkrRqSEuVkZNG2IAk5Q, consumerQueue=queue])</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Fanout模式-发布订阅模式"><a href="#Fanout模式-发布订阅模式" class="headerlink" title="Fanout模式(发布订阅模式)"></a>Fanout模式(发布订阅模式)</h2><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205151406290.png" alt="image-20220515140602162"></p><h4 id="声明队列和交换机"><a href="#声明队列和交换机" class="headerlink" title="声明队列和交换机"></a>声明队列和交换机</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQConfigFanout</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE1=<span class="string">&quot;queue_fanout01&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE2=<span class="string">&quot;queue_fanout02&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE=<span class="string">&quot;fanoutExchange&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queue01</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(QUEUE1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queue02</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(QUEUE2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FanoutExchange <span class="title function_">fanoutExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(EXCHANGE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: 队列和交换机绑定</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Param</span>:</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>:</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span>: 挚爱小v脸</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span>: 5/14/2022</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">binding01</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue01()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">binding02</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue02()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="发布消息"><a href="#发布消息" class="headerlink" title="发布消息"></a>发布消息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MQSender</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(Object msg)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;发送消息：&quot;</span>+msg);</span><br><span class="line">        <span class="comment">//交换机，路由key，消息</span></span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;fanoutExchange&quot;</span>,<span class="string">&quot;&quot;</span>,msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接收消息-1"><a href="#接收消息-1" class="headerlink" title="接收消息"></a>接收消息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MQReceiver</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;queue_fanout01&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive01</span><span class="params">(Object msg)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;QUEUE01接收消息：&quot;</span>+msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;queue_fanout02&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive02</span><span class="params">(Object msg)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;QUEUQ02接收消息：&quot;</span>+msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MQSender mqSender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/mq/fanout&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mq01</span><span class="params">()</span>&#123;</span><br><span class="line">        mqSender.send(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//发送消息：Hello</span></span><br><span class="line"><span class="comment">//QUEUQ02接收消息：(Body:&#x27;Hello&#x27; MessageProperties [headers=&#123;&#125;, contentType=text/plain, contentEncoding=UTF-8, contentLength=0, receivedDeliveryMode=PERSISTENT, priority=0, redelivered=false, receivedExchange=fanoutExchange, receivedRoutingKey=, deliveryTag=1, consumerTag=amq.ctag-ayuGTKHATcdiyBpxKcNPvw, consumerQueue=queue_fanout02])</span></span><br><span class="line"><span class="comment">// QUEUE01接收消息：(Body:&#x27;Hello&#x27; MessageProperties [headers=&#123;&#125;, contentType=text/plain, contentEncoding=UTF-8, contentLength=0, receivedDeliveryMode=PERSISTENT, priority=0, redelivered=false, receivedExchange=fanoutExchange, receivedRoutingKey=, deliveryTag=1, consumerTag=amq.ctag-etGEEiFqMQC4w28zUN-ktw, consumerQueue=queue_fanout01])</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Direct模式"><a href="#Direct模式" class="headerlink" title="Direct模式"></a>Direct模式</h2><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205151415415.png" alt="image-20220515141543343"></p><h4 id="声明交换机和队列并绑定路由key"><a href="#声明交换机和队列并绑定路由key" class="headerlink" title="声明交换机和队列并绑定路由key"></a>声明交换机和队列并绑定路由key</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQDirectConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE01=<span class="string">&quot;queue_direct01&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE02=<span class="string">&quot;queue_direct02&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE=<span class="string">&quot;directExchange&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ROUTINGKEY01=<span class="string">&quot;queue.red&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ROUTINGKEY02=<span class="string">&quot;queue.green&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queue01</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(QUEUE01);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queue02</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(QUEUE02);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">directExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(EXCHANGE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">binding01</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue01()).to(directExchange()).with(ROUTINGKEY01);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">binding02</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue02()).to(directExchange()).with(ROUTINGKEY02);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="发布消息-1"><a href="#发布消息-1" class="headerlink" title="发布消息"></a>发布消息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MQSender</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send01</span><span class="params">(Object msg)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;发送红色的消息:&quot;</span>+msg);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;directExchange&quot;</span>,<span class="string">&quot;queue.red&quot;</span>,msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send02</span><span class="params">(Object msg)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;发送绿色的消息:&quot;</span>+msg);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;directExchange&quot;</span>,<span class="string">&quot;queue.green&quot;</span>,msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接收消息-2"><a href="#接收消息-2" class="headerlink" title="接收消息"></a>接收消息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MQReceiver</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;queue_direct01&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive03</span><span class="params">(Object msg)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;QUEUE01接收消息：&quot;</span>+msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;queue_direct02&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive04</span><span class="params">(Object msg)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;QUEUE02接收消息：&quot;</span>+msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MQSender mqSender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/mq/direct01&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mq02</span><span class="params">()</span>&#123;</span><br><span class="line">        mqSender.send01(<span class="string">&quot;Hello,Red&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/mq/direct02&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mq03</span><span class="params">()</span>&#123;</span><br><span class="line">        mqSender.send02(<span class="string">&quot;Hello,Green&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//发送红色的消息:Hello,Red</span></span><br><span class="line"><span class="comment">//QUEUE01接收消息：(Body:&#x27;Hello,Red&#x27; MessageProperties [headers=&#123;&#125;, contentType=text/plain, contentEncoding=UTF-8, contentLength=0, receivedDeliveryMode=PERSISTENT, priority=0, redelivered=false, receivedExchange=directExchange, receivedRoutingKey=queue.red, deliveryTag=1, consumerTag=amq.ctag-3sinvisXxZ--pl8Q-DeX0g, consumerQueue=queue_direct01])</span></span><br><span class="line"><span class="comment">//发送绿色的消息:Hello,Green</span></span><br><span class="line"><span class="comment">//QUEUE02接收消息：(Body:&#x27;Hello,Green&#x27; MessageProperties [headers=&#123;&#125;, contentType=text/plain, contentEncoding=UTF-8, contentLength=0, receivedDeliveryMode=PERSISTENT, priority=0, redelivered=false, receivedExchange=directExchange, receivedRoutingKey=queue.green, deliveryTag=1, consumerTag=amq.ctag-DitWPK6gLlFH0q-kJIgxMg, consumerQueue=queue_direct02])</span></span><br></pre></td></tr></table></figure><h2 id="Topic模式"><a href="#Topic模式" class="headerlink" title="Topic模式"></a>Topic模式</h2><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/202205151422155.png" alt="image-20220515142233098"></p><ul><li><font color="orange">* </font>(star) can substitute for exactly one word.</li><li><font color="orange">#</font> (hash) can substitute for zero or more words</li></ul><h4 id="声明队列和交换机并绑定路由key"><a href="#声明队列和交换机并绑定路由key" class="headerlink" title="声明队列和交换机并绑定路由key"></a>声明队列和交换机并绑定路由key</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQTopicConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE01=<span class="string">&quot;queue_topic01&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE02=<span class="string">&quot;queue_topic02&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE=<span class="string">&quot;topicExchange&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ROUNTINGKEY01=<span class="string">&quot;#.queue.#&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ROUNTINGKEY02=<span class="string">&quot;*.queue.#&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queue01</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(QUEUE01);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queue02</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(QUEUE02);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TopicExchange <span class="title function_">topicExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TopicExchange</span>(EXCHANGE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">binding01</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue01()).to(topicExchange()).with(ROUNTINGKEY01);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">binding02</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue02()).to(topicExchange()).with(ROUNTINGKEY02);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="发布消息-2"><a href="#发布消息-2" class="headerlink" title="发布消息"></a>发布消息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MQSender</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send03</span><span class="params">(Object msg)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;发送消息(QUEUE01接收):&quot;</span>+msg);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;topicExchange&quot;</span>,<span class="string">&quot;queue.red.message&quot;</span>,msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send04</span><span class="params">(Object msg)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;发送消息(QUEUE01和QUEUE02接收):&quot;</span>+msg);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;topicExchange&quot;</span>,<span class="string">&quot;message.queue.green.abc&quot;</span>,msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接收消息-3"><a href="#接收消息-3" class="headerlink" title="接收消息"></a>接收消息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MQReceiver</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;queue_topic01&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">receive05</span><span class="params">(Object msg)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;QUEUE01接收消息:&quot;</span>+msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;queue_topic02&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">receive06</span><span class="params">(Object msg)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;QUEUE02接收消息:&quot;</span>+msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试-3"><a href="#测试-3" class="headerlink" title="测试"></a>测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MQSender mqSender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/mq/topic01&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mq04</span><span class="params">()</span>&#123;</span><br><span class="line">        mqSender.send03(<span class="string">&quot;Hello,Red&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/mq/topic02&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mq05</span><span class="params">()</span>&#123;</span><br><span class="line">        mqSender.send04(<span class="string">&quot;Hello,Green&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 发送消息(QUEUE01接收):Hello,Red</span></span><br><span class="line"><span class="comment">//QUEUE01接收消息:(Body:&#x27;Hello,Red&#x27; MessageProperties [headers=&#123;&#125;, contentType=text/plain, contentEncoding=UTF-8, contentLength=0, receivedDeliveryMode=PERSISTENT, priority=0, redelivered=false, receivedExchange=topicExchange, receivedRoutingKey=queue.red.message, deliveryTag=1, consumerTag=amq.ctag-3Y3OdEDb6Pfw_WncACP4ow, consumerQueue=queue_topic01])</span></span><br><span class="line"><span class="comment">//发送消息(QUEUE01和QUEUE02接收):Hello,Green</span></span><br><span class="line"><span class="comment">//QUEUE01接收消息:(Body:&#x27;Hello,Green&#x27; MessageProperties [headers=&#123;&#125;, contentType=text/plain, contentEncoding=UTF-8, contentLength=0, receivedDeliveryMode=PERSISTENT, priority=0, redelivered=false, receivedExchange=topicExchange, receivedRoutingKey=message.queue.green.abc, deliveryTag=1, consumerTag=amq.ctag-inUEbmlvVGrwxKwJtjPUpA, consumerQueue=queue_topic01])</span></span><br><span class="line"><span class="comment">//QUEUE02接收消息:(Body:&#x27;Hello,Green&#x27; MessageProperties [headers=&#123;&#125;, contentType=text/plain, contentEncoding=UTF-8, contentLength=0, receivedDeliveryMode=PERSISTENT, priority=0, redelivered=false, receivedExchange=topicExchange, receivedRoutingKey=message.queue.green.abc, deliveryTag=1, consumerTag=amq.ctag-UyFJuPBxEVFlLdAJUCJR8g, consumerQueue=queue_topic02])</span></span><br></pre></td></tr></table></figure><h2 id="Headers模式-官网没有，用的很少，了解即可"><a href="#Headers模式-官网没有，用的很少，了解即可" class="headerlink" title="Headers模式(官网没有，用的很少，了解即可)"></a>Headers模式(官网没有，用的很少，了解即可)</h2><h4 id="声明队列和交换机-1"><a href="#声明队列和交换机-1" class="headerlink" title="声明队列和交换机"></a>声明队列和交换机</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQHeadersConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE01=<span class="string">&quot;queue_header01&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE02=<span class="string">&quot;queue_header02&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE=<span class="string">&quot;headersExchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queue01</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(QUEUE01);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queue02</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(QUEUE02);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> HeadersExchange <span class="title function_">headersExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HeadersExchange</span>(EXCHANGE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: 头部信息至少有map中的任何一个键值对</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Param</span>: []</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>: org.springframework.amqp.core.Binding</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span>: 挚爱小v脸</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span>: 5/14/2022</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">binding01</span><span class="params">()</span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;speed&quot;</span>,<span class="string">&quot;low&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue01()).to(headersExchange()).whereAny(map).match();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: 要都满足map</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Param</span>: []</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>: org.springframework.amqp.core.Binding</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span>: 挚爱小v脸</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span>: 5/14/2022</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">binding02</span><span class="params">()</span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;speed&quot;</span>,<span class="string">&quot;fast&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue02()).to(headersExchange()).whereAll(map).match();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="发布消息-3"><a href="#发布消息-3" class="headerlink" title="发布消息"></a>发布消息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MQSender</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send05</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;发送消息(被两个queue接收):&quot;</span>+msg);</span><br><span class="line">        MessageProperties properties=<span class="keyword">new</span> <span class="title class_">MessageProperties</span>();</span><br><span class="line">        properties.setHeader(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>);</span><br><span class="line">        properties.setHeader(<span class="string">&quot;speed&quot;</span>,<span class="string">&quot;fast&quot;</span>);</span><br><span class="line">        Message message=<span class="keyword">new</span> <span class="title class_">Message</span>(msg.getBytes(),properties);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;headersExchange&quot;</span>,<span class="string">&quot;&quot;</span>,message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send06</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;发送消息(被QUEUE01接收):&quot;</span>+msg);</span><br><span class="line">        MessageProperties properties=<span class="keyword">new</span> <span class="title class_">MessageProperties</span>();</span><br><span class="line">        properties.setHeader(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>);</span><br><span class="line">        properties.setHeader(<span class="string">&quot;speed&quot;</span>,<span class="string">&quot;normal&quot;</span>);</span><br><span class="line">        Message message=<span class="keyword">new</span> <span class="title class_">Message</span>(msg.getBytes(),properties);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;headersExchange&quot;</span>,<span class="string">&quot;&quot;</span>,message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接收消息-4"><a href="#接收消息-4" class="headerlink" title="接收消息"></a>接收消息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MQReceiver</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;queue_header01&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive07</span><span class="params">(Message message)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;QUEUE01接收的Message对象:&quot;</span>+message);</span><br><span class="line">        log.info(<span class="string">&quot;QUEUE01接收消息:&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(message.getBody()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;queue_header02&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive08</span><span class="params">(Message message)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;QUEUE02接收的Message对象:&quot;</span>+message);</span><br><span class="line">        log.info(<span class="string">&quot;QUEUE02接收消息:&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(message.getBody()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试-4"><a href="#测试-4" class="headerlink" title="测试"></a>测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MQSender mqSender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/mq/headers01&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mq06</span><span class="params">()</span>&#123;</span><br><span class="line">        mqSender.send05(<span class="string">&quot;Hello,Headers01&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/mq/headers02&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mq07</span><span class="params">()</span>&#123;</span><br><span class="line">        mqSender.send06(<span class="string">&quot;Hello,Headers02&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 发送消息(被两个queue接收):Hello,Headers01</span></span><br><span class="line"><span class="comment">//QUEUE01接收的Message对象:(Body:&#x27;[B@4d677e2(byte[15])&#x27; MessageProperties [headers=&#123;color=red, speed=fast&#125;, contentType=application/octet-stream, contentLength=0, receivedDeliveryMode=PERSISTENT, priority=0, redelivered=false, receivedExchange=headersExchange, receivedRoutingKey=, deliveryTag=1, consumerTag=amq.ctag-ZUEfKWvanjU-ELhSPkLNwQ, consumerQueue=queue_header01])</span></span><br><span class="line"><span class="comment">//QUEUE02接收的Message对象:(Body:&#x27;[B@b9a3f71(byte[15])&#x27; MessageProperties [headers=&#123;color=red, speed=fast&#125;, contentType=application/octet-stream, contentLength=0, receivedDeliveryMode=PERSISTENT, priority=0, redelivered=false, receivedExchange=headersExchange, receivedRoutingKey=, deliveryTag=1, consumerTag=amq.ctag-btXO1DzofcFJBuEF7vzkuA, consumerQueue=queue_header02])</span></span><br><span class="line"><span class="comment">//QUEUE01接收消息:Hello,Headers01</span></span><br><span class="line"><span class="comment">//QUEUE02接收消息:Hello,Headers01</span></span><br><span class="line"><span class="comment">//发送消息(被QUEUE01接收):Hello,Headers02</span></span><br><span class="line"><span class="comment">//QUEUE01接收的Message对象:(Body:&#x27;[B@a49e37e(byte[15])&#x27; MessageProperties [headers=&#123;color=red, speed=normal&#125;, contentType=application/octet-stream, contentLength=0, receivedDeliveryMode=PERSISTENT, priority=0, redelivered=false, receivedExchange=headersExchange, receivedRoutingKey=, deliveryTag=1, consumerTag=amq.ctag-pRD1pNruH-DCVea4PDoJfQ, consumerQueue=queue_header01])</span></span><br><span class="line"><span class="comment">//QUEUE01接收消息:Hello,Headers02</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 消息中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并行流真的很快吗？</title>
      <link href="/post/1a910804.html"/>
      <url>/post/1a910804.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>java8中推出了并行流，但是，他的执行效率真的很快吗？</p></blockquote><span id="more"></span><p>现在我们有一个这样的需求：<font color="orange">对一千万个数字进行累加求和</font></p><h4 id="当我们采用传统的for循环实现时：3ms"><a href="#当我们采用传统的for循环实现时：3ms" class="headerlink" title="当我们采用传统的for循环实现时：3ms"></a>当我们采用传统的for循环实现时：<font color="orange">3ms</font></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">forAdd</span><span class="params">(<span class="type">long</span> limit)</span>&#123;</span><br><span class="line">       <span class="type">long</span> result=<span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">long</span> i=<span class="number">1L</span>;i&lt;limit;i++)&#123;</span><br><span class="line">           result+=i;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="当我们采用串行流的方式实现时-108ms"><a href="#当我们采用串行流的方式实现时-108ms" class="headerlink" title="当我们采用串行流的方式实现时:108ms"></a>当我们采用串行流的方式实现时:<font color="orange">108ms</font></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">iterateStream</span><span class="params">(<span class="type">long</span> limit)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> Stream.iterate(<span class="number">1L</span>,i-&gt;i+<span class="number">1</span>)</span><br><span class="line">               .limit(limit)</span><br><span class="line">               .reduce(<span class="number">0L</span>,Long::sum);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="当我们采用并行流的方式实现时-182ms"><a href="#当我们采用并行流的方式实现时-182ms" class="headerlink" title="当我们采用并行流的方式实现时:182ms"></a>当我们采用并行流的方式实现时:<font color="orange">182ms</font></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">parallelStream</span><span class="params">(<span class="type">long</span> limit)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Stream.iterate(<span class="number">1L</span>,i-&gt;i+<span class="number">1</span>)</span><br><span class="line">                .parallel()</span><br><span class="line">                .limit(limit)</span><br><span class="line">                .reduce(<span class="number">0L</span>,Long::sum);</span><br></pre></td></tr></table></figure><p>可能你会感到惊讶，为什么使用了并行流后效率这么低，你也许会认为是上面的并行流反复拆箱导致的，那么我们就有了如下的操作,但是你发小效率并没有提高多少!<font color="orange">152ms</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">parallelStream2</span><span class="params">(<span class="type">long</span> limit)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> Stream.iterate(<span class="number">1L</span>,i-&gt;i+<span class="number">1</span>)</span><br><span class="line">               .mapToLong(Long::longValue)</span><br><span class="line">               .parallel()</span><br><span class="line">               .limit(limit)</span><br><span class="line">               .reduce(<span class="number">0L</span>,Long::sum);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>当你为并行流效率低下感到沮丧时，不妨试试Stream为我们提供好的API</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">parallelStream3</span><span class="params">(<span class="type">long</span> limit)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> LongStream.rangeClosed(<span class="number">1</span>,limit).parallel().reduce(<span class="number">0L</span>,Long::sum);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>当我们测试这段程序后，发现他的执行时间只有<font color="orange">0ms</font>(数据量不是很大早造成的),以上的测试代码无疑是在提醒我们，<font color="red">不要无脑随意使用并行流！</font></p><p>我们可以在java8实战这本书中找到这样一个表格</p><p>​                                                                                <strong>Stream sources and decomposability</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">Source</th><th style="text-align:center">Decomposability</th></tr></thead><tbody><tr><td style="text-align:center">ArrayList</td><td style="text-align:center">Excellent</td></tr><tr><td style="text-align:center">LinkedList</td><td style="text-align:center">Poor</td></tr><tr><td style="text-align:center">IntStream.range</td><td style="text-align:center">Excellent</td></tr><tr><td style="text-align:center">Stream.iterate</td><td style="text-align:center">Poor</td></tr><tr><td style="text-align:center">HashSet</td><td style="text-align:center">Good</td></tr><tr><td style="text-align:center">TreeSet</td><td style="text-align:center">Good</td></tr></tbody></table></div><blockquote><p>总结：我们不要有刻板印象，认为并行流一定比串行流更快，这是不对的，还要根据数据规模或者单次操作花费的时间来进行综合考量，若是单次操作时间小，那么串行流就直接计算了，而并行流还需要对数据分片后进行多线程处理，显然得不偿失。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Stream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Collector详解</title>
      <link href="/post/c22581c0.html"/>
      <url>/post/c22581c0.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Collector提供的功能非常强大，可以满足我们日常开发需求</p></blockquote><span id="more"></span><h4 id="为了更好的理解Collector，我们首先需要准备一个Apple类"><a href="#为了更好的理解Collector，我们首先需要准备一个Apple类" class="headerlink" title="为了更好的理解Collector，我们首先需要准备一个Apple类"></a>为了更好的理解Collector，我们首先需要准备一个Apple类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Apple</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> weight;</span><br><span class="line"><span class="comment">//有参构造</span></span><br><span class="line">  <span class="comment">//无参构造</span></span><br><span class="line">  <span class="comment">//Getter and Setter</span></span><br><span class="line">  <span class="comment">//toString</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h2><p>如果我们想从一堆苹果中选出绿色的苹果，我们可以这样做: <font color="orange">将stream过滤后的结果聚合成一个新的集合</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectorIntroduce</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Apple&gt; list= Arrays.asList(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Apple</span>(<span class="string">&quot;green&quot;</span>,<span class="number">150</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Apple</span>(<span class="string">&quot;yellow&quot;</span>,<span class="number">120</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Apple</span>(<span class="string">&quot;green&quot;</span>,<span class="number">170</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Apple</span>(<span class="string">&quot;green&quot;</span>,<span class="number">150</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Apple</span>(<span class="string">&quot;yellow&quot;</span>,<span class="number">120</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Apple</span>(<span class="string">&quot;green&quot;</span>,<span class="number">170</span>)</span><br><span class="line">        );</span><br><span class="line">        List&lt;Apple&gt; greenList = list.stream()</span><br><span class="line">                .filter(a -&gt; a.getColor().equals(<span class="string">&quot;green&quot;</span>))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        Optional.ofNullable(greenList).ifPresent(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><p>如果我们想要将不同颜色的苹果进行分组呢？，一个常规想法是我们可以将苹果的颜色作为Map的key，集合作为Value的值，你可能写出以下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,List&lt;Apple&gt;&gt; <span class="title function_">groupByNormal</span><span class="params">(List&lt;Apple&gt; apples)</span>&#123;</span><br><span class="line">     Map&lt;String,List&lt;Apple&gt;&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">     <span class="keyword">for</span> (Apple apple : apples) &#123;</span><br><span class="line">         List&lt;Apple&gt; list=map.get(apple.getColor());</span><br><span class="line">         <span class="keyword">if</span>(<span class="literal">null</span>==list)&#123;</span><br><span class="line">             list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">             map.put(apple.getColor(),list);</span><br><span class="line">         &#125;</span><br><span class="line">        list.add(apple);</span><br><span class="line">      &#125;</span><br><span class="line">     <span class="keyword">return</span> map;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>当我们使用传统的Stream方式写这段需求时，可能会写出这种：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,List&lt;Apple&gt;&gt; <span class="title function_">groupByFunction</span><span class="params">(List&lt;Apple&gt; apples)</span>&#123;</span><br><span class="line">     Map&lt;String,List&lt;Apple&gt;&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">     apples.stream().forEach(a-&gt;&#123;</span><br><span class="line">         List&lt;Apple&gt; colorList = Optional.ofNullable(map.get(a.getColor())).orElseGet(() -&gt; &#123;</span><br><span class="line">             List&lt;Apple&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">             map.put(a.getColor(), list);</span><br><span class="line">             <span class="keyword">return</span> list;</span><br><span class="line">         &#125;);</span><br><span class="line">         colorList.add(a);</span><br><span class="line">     &#125;);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但我们发现好像没变的很简单 :cry:</p><p>那如果我们使用的是Collector的 <font color="orange">groupingBy</font>方法呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,List&lt;Apple&gt;&gt; <span class="title function_">groupByCollector</span><span class="params">(List&lt;Apple&gt; apples)</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> apples.stream().collect(Collectors.groupingBy(Apple::getColor));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font color="orange">是不是感觉很清爽？</font><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><h4 id="求平均值"><a href="#求平均值" class="headerlink" title="求平均值"></a>求平均值</h4><ul><li>averagingDouble</li><li>averagingInt</li><li>averagingLong</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testAveragingDouble</span><span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;testAveragingDouble&quot;</span>);</span><br><span class="line">       Optional.ofNullable(menu.stream().collect(Collectors.averagingDouble(Dish::getCalories)))</span><br><span class="line">               .ifPresent(System.out::println);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testAveragingInt</span><span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;testAveragingInt&quot;</span>);</span><br><span class="line">       Optional.ofNullable(menu.stream().collect(Collectors.averagingInt(Dish::getCalories)))</span><br><span class="line">               .ifPresent(System.out::println);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testAveragingLong</span><span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;testAveragingLong&quot;</span>);</span><br><span class="line">       Optional.ofNullable(menu.stream().collect(Collectors.averagingLong(Dish::getCalories)))</span><br><span class="line">               .ifPresent(System.out::println);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="收集并完成下一步动作（collectingAndThen）"><a href="#收集并完成下一步动作（collectingAndThen）" class="headerlink" title="收集并完成下一步动作（collectingAndThen）"></a>收集并完成下一步动作（collectingAndThen）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testCollectingAndThen</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;testCollectingAndThen&quot;</span>);</span><br><span class="line">    Optional.ofNullable(menu.stream()</span><br><span class="line">                    .collect(Collectors</span><br><span class="line">                            .collectingAndThen(Collectors.</span><br><span class="line">                                    averagingDouble(Dish::getCalories),</span><br><span class="line">                                    a-&gt;<span class="string">&quot;The Avage Calories is-&gt;&quot;</span>+a)))</span><br><span class="line">            .ifPresent(System.out::println);</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//注意，如果我们的需求是返回肉类集合，但是当我们只使用toList方法，返回的集合是可以被修改的，如果我们想返回一个不可以被修改的集合，就可以使用collectingAndThen方法</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    List&lt;Dish&gt; list = menu.stream()</span></span><br><span class="line"><span class="comment">            .filter(d -&gt; d.getType().equals(Dish.Type.MEAT))</span></span><br><span class="line"><span class="comment">            .collect(Collectors.toList());</span></span><br><span class="line"><span class="comment">    list.add(new Dish(&quot;&quot;,false,100,Dish.Type.OTHER));</span></span><br><span class="line"><span class="comment">    System.out.println(list);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    List&lt;Dish&gt; list = menu.stream()</span><br><span class="line">            .filter(d -&gt; d.getType().equals(Dish.Type.MEAT))</span><br><span class="line">            .collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList));</span><br><span class="line">    <span class="comment">//list.add(new Dish(&quot;&quot;,false,100,Dish.Type.OTHER));</span></span><br><span class="line">    System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="计数-counting"><a href="#计数-counting" class="headerlink" title="计数(counting)"></a>计数(counting)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testCounting</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;testCounting&quot;</span>);</span><br><span class="line">    Optional.of(menu.stream()</span><br><span class="line">                    .collect(Collectors.counting()))</span><br><span class="line">            .ifPresent(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分组-1"><a href="#分组-1" class="headerlink" title="分组"></a>分组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testGroupByFunction</span><span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;testGroupByFunction&quot;</span>);</span><br><span class="line">       Optional.ofNullable(menu.stream()</span><br><span class="line">               .collect(Collectors.groupingBy(Dish::getType)))</span><br><span class="line">               .ifPresent(System.out::println);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testGroupByFunctionAndCollector</span><span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;testGroupByFunctionAndCollector&quot;</span>);</span><br><span class="line">       Optional.ofNullable(menu.stream()</span><br><span class="line">                       .collect(Collectors.groupingBy(Dish::getType,Collectors.counting())))</span><br><span class="line">               .ifPresent(System.out::println);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testGroupByFunctionAndSuppierAndCollector</span><span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;testGroupByFunctionAndSuppierAndCollector&quot;</span>);</span><br><span class="line">       Map&lt;Dish.Type, Double&gt; map = menu.stream().collect(Collectors.groupingBy(Dish::getType, TreeMap::<span class="keyword">new</span>,Collectors.averagingInt(Dish::getCalories)));</span><br><span class="line">       Optional.of(map).ifPresent(System.out::println);</span><br><span class="line">       Optional.of(map.getClass()).ifPresent(System.out::println);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testGroupingByConcurrentWithFunction</span><span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;testGroupingByConcurrent&quot;</span>);</span><br><span class="line">       ConcurrentMap&lt;Dish.Type, List&lt;Dish&gt;&gt; collect = menu.stream()</span><br><span class="line">               .collect(Collectors.groupingByConcurrent(Dish::getType));</span><br><span class="line">       Optional.ofNullable(collect.getClass())</span><br><span class="line">               .ifPresent(System.out::println);</span><br><span class="line">       Optional.ofNullable(collect)</span><br><span class="line">               .ifPresent(System.out::println);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testGroupingByCurrentWithFunctionAndCollector</span><span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;testGroupingByCurrentWithCurrentAndCollector&quot;</span>);</span><br><span class="line">       ConcurrentMap&lt;Dish.Type, Double&gt; collect = menu.stream()</span><br><span class="line">               .collect(Collectors.groupingByConcurrent(Dish::getType,Collectors.averagingInt(Dish::getCalories)));</span><br><span class="line">       Optional.ofNullable(collect)</span><br><span class="line">               .ifPresent(System.out::println);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testGroupingByCurrentWithFunctionAndSupplierAndCollector</span><span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;testGroupingByCurrentWithFunctionAndSupplierAndCollector&quot;</span>);</span><br><span class="line">       ConcurrentMap&lt;Dish.Type, Double&gt; collect = menu.stream()</span><br><span class="line">               .collect(Collectors.groupingByConcurrent(Dish::getType, ConcurrentSkipListMap::<span class="keyword">new</span>,Collectors.averagingInt(Dish::getCalories)));</span><br><span class="line">       Optional.ofNullable(collect)</span><br><span class="line">               .ifPresent(System.out::println);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testJoining</span><span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;testJoining&quot;</span>);</span><br><span class="line">       Optional.ofNullable(menu.stream()</span><br><span class="line">               .map(Dish::getName)</span><br><span class="line">               .collect(Collectors.joining()))</span><br><span class="line">               .ifPresent(System.out::println);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testJoiningWithDelimiter</span><span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;testJoiningWithDelimiter&quot;</span>);</span><br><span class="line">       Optional.ofNullable(menu.stream()</span><br><span class="line">                       .map(Dish::getName)</span><br><span class="line">                       .collect(Collectors.joining(<span class="string">&quot;,&quot;</span>)))</span><br><span class="line">               .ifPresent(System.out::println);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testJoiningWithDelimiterAndPrefixAndSuffix</span><span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;testJoiningWithDelimiterAndPrefixAndSuffix&quot;</span>);</span><br><span class="line">       Optional.ofNullable(menu.stream()</span><br><span class="line">                       .map(Dish::getName)</span><br><span class="line">                       .collect(Collectors.joining(<span class="string">&quot;,&quot;</span>,<span class="string">&quot;Names[&quot;</span>,<span class="string">&quot;]&quot;</span>)))</span><br><span class="line">               .ifPresent(System.out::println);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testMapping</span><span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;testMapping&quot;</span>);</span><br><span class="line">       Optional.ofNullable(menu.stream()</span><br><span class="line">               .collect(Collectors.mapping(Dish::getName,Collectors.joining(<span class="string">&quot;,&quot;</span>))))</span><br><span class="line">               .ifPresent(System.out::println);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testMaxBy</span><span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;testMaxBy&quot;</span>);</span><br><span class="line">       menu.stream()</span><br><span class="line">               .collect(Collectors.maxBy(Comparator.comparing(Dish::getCalories)))</span><br><span class="line">               .ifPresent(System.out::println);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testMinBy</span><span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;testMinBy&quot;</span>);</span><br><span class="line">       menu.stream()</span><br><span class="line">               .collect(Collectors.minBy(Comparator.comparing(Dish::getCalories)))</span><br><span class="line">               .ifPresent(System.out::println);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testPartitioningByWithPredicate</span><span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;testPartitioningByWithPredicate&quot;</span>);</span><br><span class="line">       Map&lt;Boolean, List&lt;Dish&gt;&gt; collect = menu.stream()</span><br><span class="line">               .collect(Collectors.partitioningBy(Dish::isVegetarion));</span><br><span class="line">       Optional.ofNullable(collect).ifPresent(System.out::println);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testPartitioningByWithPredicateAndCollector</span><span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;testPartitioningByWithPredicateAndCollector&quot;</span>);</span><br><span class="line">       Map&lt;Boolean, Double&gt; collect = menu.stream()</span><br><span class="line">               .collect(Collectors</span><br><span class="line">                       .partitioningBy(Dish::isVegetarion,Collectors.averagingInt(Dish::getCalories)));</span><br><span class="line">       Optional.ofNullable(collect).ifPresent(System.out::println);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testReducingBinaryOperator</span><span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;testReducingBinaryOperator&quot;</span>);</span><br><span class="line">       menu.stream()</span><br><span class="line">               .collect(Collectors.reducing(BinaryOperator</span><br><span class="line">                       .maxBy(Comparator</span><br><span class="line">                               .comparingInt(Dish::getCalories))))</span><br><span class="line">               .ifPresent(System.out::println);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testReducingBinaryOperatorAndIdentiy</span><span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;testReducingBinaryOperatorAndIdentiy&quot;</span>);</span><br><span class="line">       <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> menu.stream()</span><br><span class="line">               .map(Dish::getCalories)</span><br><span class="line">               .collect(Collectors.reducing(<span class="number">0</span>, (d1, d2) -&gt; d1 + d2));</span><br><span class="line">       System.out.println(result);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testReducingBinaryOperatorAndIdentiyAndFunction</span><span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;testReducingBinaryOperatorAndIdentiyAndFunction&quot;</span>);</span><br><span class="line">       <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> menu.stream()</span><br><span class="line">               .collect(Collectors.reducing(<span class="number">0</span>, Dish::getCalories,(d1, d2) -&gt; d1 + d2));</span><br><span class="line">       System.out.println(result);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testSummarizingDouble</span><span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;testSummarizingDouble&quot;</span>);</span><br><span class="line">       Optional.ofNullable(menu.stream()</span><br><span class="line">               .collect(Collectors.summarizingDouble(Dish::getCalories)))</span><br><span class="line">               .ifPresent(System.out::println);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testSummarizingLong</span><span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;testSummarizingLong&quot;</span>);</span><br><span class="line">       Optional.ofNullable(menu.stream()</span><br><span class="line">                       .collect(Collectors.summarizingLong(Dish::getCalories)))</span><br><span class="line">               .ifPresent(System.out::println);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testSummarizingInt</span><span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;testSummarizingInt&quot;</span>);</span><br><span class="line">       Optional.ofNullable(menu.stream()</span><br><span class="line">                       .collect(Collectors.summarizingInt(Dish::getCalories)))</span><br><span class="line">               .ifPresent(System.out::println);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="求和"><a href="#求和" class="headerlink" title="求和"></a>求和</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testSummingDouble</span><span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;testSummingDouble&quot;</span>);</span><br><span class="line">       Optional.ofNullable(menu.stream()</span><br><span class="line">               .collect(Collectors.summingDouble(Dish::getCalories)))</span><br><span class="line">               .ifPresent(System.out::println);</span><br><span class="line">       Optional.ofNullable(menu.stream()</span><br><span class="line">               .map(Dish::getCalories)</span><br><span class="line">               .mapToInt(Integer::intValue)</span><br><span class="line">               .sum())</span><br><span class="line">               .ifPresent(System.out::println);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testSummingLong</span><span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;testSummingLong&quot;</span>);</span><br><span class="line">       Optional.ofNullable(menu.stream()</span><br><span class="line">                       .collect(Collectors.summingLong(Dish::getCalories)))</span><br><span class="line">               .ifPresent(System.out::println);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testSummingInt</span><span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;testSummingInt&quot;</span>);</span><br><span class="line">       Optional.ofNullable(menu.stream()</span><br><span class="line">                       .collect(Collectors.summingInt(Dish::getCalories)))</span><br><span class="line">               .ifPresent(System.out::println);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="转换为集合"><a href="#转换为集合" class="headerlink" title="转换为集合"></a>转换为集合</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testTocollection</span><span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;testTocollection&quot;</span>);</span><br><span class="line">       Optional.ofNullable(menu.stream()</span><br><span class="line">                       .filter(d-&gt;d.getCalories()&gt;<span class="number">600</span>)</span><br><span class="line">               .collect(Collectors.toCollection(LinkedHashSet::<span class="keyword">new</span>)))</span><br><span class="line">               .ifPresent(System.out::println);</span><br><span class="line">       Optional.of(menu.stream().filter(d-&gt;d.getCalories()&gt;<span class="number">600</span>).collect(Collectors.toList())).ifPresent(System.out::println);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testToConcurrentMap</span><span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;testToConcurrentMap&quot;</span>);</span><br><span class="line">       Optional.of(menu.stream()</span><br><span class="line">               .collect(Collectors.toConcurrentMap(Dish::getName,Dish::getCalories)))</span><br><span class="line">               .ifPresent(v-&gt; &#123;</span><br><span class="line">                   System.out.println(v);</span><br><span class="line">                   System.out.println(v.getClass());</span><br><span class="line">               &#125;);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testToConcurrentMapWithBinaryOperator</span><span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;testToConcurrentMapWithBinaryOperator&quot;</span>);</span><br><span class="line">       Optional.of(menu.stream()</span><br><span class="line">                       .collect(Collectors.toConcurrentMap(Dish::getType,v-&gt;<span class="number">1L</span>,(a,b)-&gt;a+b)))</span><br><span class="line">               .ifPresent(v-&gt; &#123;</span><br><span class="line">                   System.out.println(v);</span><br><span class="line">                   System.out.println(v.getClass());</span><br><span class="line">               &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testToConcurrentMapWithBinaryOperatorAndSupplier</span><span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;testToConcurrentMapWithBinaryOperatorAndSupplier&quot;</span>);</span><br><span class="line">       Optional.of(menu.stream()</span><br><span class="line">                       .collect(Collectors.toConcurrentMap(Dish::getType,v-&gt;<span class="number">1L</span>,(a,b)-&gt;a+b, ConcurrentSkipListMap::<span class="keyword">new</span>)))</span><br><span class="line">               .ifPresent(v-&gt; &#123;</span><br><span class="line">                   System.out.println(v);</span><br><span class="line">                   System.out.println(v.getClass());</span><br><span class="line">               &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testToList</span><span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;testToList&quot;</span>);</span><br><span class="line">       Optional.of(menu.stream()</span><br><span class="line">               .filter(Dish::isVegetarion)</span><br><span class="line">               .collect(Collectors.toList()))</span><br><span class="line">               .ifPresent(v-&gt;&#123;</span><br><span class="line">                   System.out.println(v.getClass());</span><br><span class="line">                   System.out.println(v);</span><br><span class="line">               &#125;);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testToSet</span><span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;testToList&quot;</span>);</span><br><span class="line">       Optional.of(menu.stream()</span><br><span class="line">                       .filter(Dish::isVegetarion)</span><br><span class="line">                       .collect(Collectors.toSet()))</span><br><span class="line">               .ifPresent(v-&gt;&#123;</span><br><span class="line">                   System.out.println(v.getClass());</span><br><span class="line">                   System.out.println(v);</span><br><span class="line">               &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testToMap</span><span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;testToMap&quot;</span>);</span><br><span class="line">       menu.stream().collect(Collectors.collectingAndThen(Collectors.toMap(Dish::getName,Dish::getCalories), Collections::synchronizedMap));</span><br><span class="line">       Optional.of(menu.stream()</span><br><span class="line">                       .collect(Collectors.toMap(Dish::getName,Dish::getCalories)))</span><br><span class="line">               .ifPresent(v-&gt; &#123;</span><br><span class="line">                   System.out.println(v);</span><br><span class="line">                   System.out.println(v.getClass());</span><br><span class="line">               &#125;);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testToMapWithBinaryOperator</span><span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;testToMapWithBinaryOperator&quot;</span>);</span><br><span class="line">       Optional.of(menu.stream()</span><br><span class="line">                       .collect(Collectors.toMap(Dish::getType,v-&gt;<span class="number">1L</span>,(a,b)-&gt;a+b)))</span><br><span class="line">               .ifPresent(v-&gt; &#123;</span><br><span class="line">                   System.out.println(v);</span><br><span class="line">                   System.out.println(v.getClass());</span><br><span class="line">               &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testToMapWithBinaryOperatorAndSupplier</span><span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;testToMapWithBinaryOperatorAndSupplier&quot;</span>);</span><br><span class="line">       Optional.of(menu.stream()</span><br><span class="line">                       .collect(Collectors.toMap(Dish::getType,v-&gt;<span class="number">1L</span>,(a,b)-&gt;a+b, ConcurrentSkipListMap::<span class="keyword">new</span>)))</span><br><span class="line">               .ifPresent(v-&gt; &#123;</span><br><span class="line">                   System.out.println(v);</span><br><span class="line">                   System.out.println(v.getClass());</span><br><span class="line">               &#125;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Collector </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql面试题</title>
      <link href="/post/9364813.html"/>
      <url>/post/9364813.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>系统（客户端）访问 MySQL 服务器前，做的第一件事就是建立<code>TCP</code> 连接。</p></blockquote><span id="more"></span><h2 id="Mysql的逻辑架构"><a href="#Mysql的逻辑架构" class="headerlink" title="Mysql的逻辑架构"></a>Mysql的逻辑架构</h2><h4 id="第一层：连接层"><a href="#第一层：连接层" class="headerlink" title="第一层：连接层"></a>第一层：连接层</h4><p>系统（客户端）访问 MySQL 服务器前，做的第一件事就是建立<code>TCP</code> 连接。</p><p>经过三次握手建立连接成功后， MySQL 服务器对 TCP 传输过来的账号密码做身份认证、权限获取。</p><ul><li><p>用户名或密码错误，会收到一个**<code>Access denied for user</code>错误，客户端程序结束执行</p></li><li><p>用户名密码认证通过，会从权限表查出账号拥有的权限与连接关联，之后的权限判断逻辑，都将依赖于此时读到的权限</p></li></ul><p>TCP 连接收到请求后，必须要分配给一个线程专门与这个客户端的交互。所以还会有个线程池，去走后面的流程。每一个连接从线程池中获取线程，省去了创建和销毁线程的开销。</p><h4 id="第二层：服务层"><a href="#第二层：服务层" class="headerlink" title="第二层：服务层"></a>第二层：服务层</h4><p>第二层实现了 MySQL 核心服务功能，包括查询解析、分析、优化、缓存以及日期和时间等所有内置函数，所有跨存储引擎的功能都在这一层实现，例如存储过程、触发器、视图等。</p><h4 id="第三层：存储引擎层"><a href="#第三层：存储引擎层" class="headerlink" title="第三层：存储引擎层"></a>第三层：存储引擎层</h4><p>存储引擎负责 MySQL 中数据的存储和提取。服务器通过 API 与存储引擎通信，这些接口屏蔽了不同存储引擎的差异，使得差异对上层查询过程透明。除了会解析外键定义的 InnoDB 外，存储引擎不会解析 SQL，不同存储引擎之间也不会相互通信，只是简单响应上层服务器请求。</p><h2 id="谈一谈MySQL的读写锁"><a href="#谈一谈MySQL的读写锁" class="headerlink" title="谈一谈MySQL的读写锁"></a>谈一谈MySQL的读写锁</h2><p>在处理并发读或写时，可以通过实现一个由两种类型组成的锁系统来解决问题。这两种类型的锁通常被称为共享锁和排它锁，也叫读锁和写锁。读锁是共享的，相互不阻塞，多个客户在同一时刻可以同时读取同一个资源而不相互干扰。写锁则是排他的，也就是说一个写锁会阻塞其他的写锁和读锁，确保在给定时间内只有一个用户能执行写入并防止其他用户读取正在写入的同一资源。</p><p>在实际的数据库系统中，每时每刻都在发生锁定，当某个用户在修改某一部分数据时，MySQL 会通过锁定防止其他用户读取同一数据。写锁比读锁有更高的优先级，一个写锁请求可能会被插入到读锁队列的前面，但是读锁不能插入到写锁前面。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql8.0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql表在文件系统中的表示</title>
      <link href="/post/85a1b0b7.html"/>
      <url>/post/85a1b0b7.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>表在文件系统中的表示</p></blockquote><span id="more"></span><h2 id="InnoDB存储引擎模式"><a href="#InnoDB存储引擎模式" class="headerlink" title="InnoDB存储引擎模式"></a>InnoDB存储引擎模式</h2><h4 id="Mysql5-7版本"><a href="#Mysql5-7版本" class="headerlink" title="Mysql5.7版本"></a>Mysql5.7版本</h4><p>查看数据库中的表</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/image-20220215210855825.png" alt="image-20220215210855825"></p><p>进入文件的存储位置：</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/image-20220215211046428.png" alt="image-20220215211046428"></p><p>可以看到有三个文件，其中<code>db.opt</code>记录了一些数据库的字符集之类的信息，<code>user.frm</code>存储了表结构，<code>user.ibd</code>存储表数据</p><h4 id="Mysql8-0版本"><a href="#Mysql8-0版本" class="headerlink" title="Mysql8.0版本"></a>Mysql8.0版本</h4><p>查看数据库中的表</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/image-20220215211422643.png" alt="image-20220215211422643"></p><p>进入文件的存储位置：</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/image-20220215211517986.png" alt="image-20220215211517986"></p><p><code>Mysql8版本去掉了.frm 文件，把表数据和表结构都存储在了ibd文件里</code></p><h2 id="MyISAM存储引擎模式"><a href="#MyISAM存储引擎模式" class="headerlink" title="MyISAM存储引擎模式"></a>MyISAM存储引擎模式</h2><h4 id="Mysql8-0版本-1"><a href="#Mysql8-0版本-1" class="headerlink" title="Mysql8.0版本"></a>Mysql8.0版本</h4><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/image-20220215214051199.png" alt="image-20220215214051199"></p><h4 id="Mysql5-7版本-1"><a href="#Mysql5-7版本-1" class="headerlink" title="Mysql5.7版本"></a>Mysql5.7版本</h4><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/image-20220215214121242.png" alt="image-20220215214121242"></p><h2 id="表中的结构和数据"><a href="#表中的结构和数据" class="headerlink" title="表中的结构和数据"></a>表中的结构和数据</h2><h3 id="系统表空间"><a href="#系统表空间" class="headerlink" title="系统表空间"></a>系统表空间</h3><p>默认情况下，InnoDB会在数据目录下创建一个名为 ibdata1 、大小为 12M 的文件，这个文件就是对应的 系统表空间 在文件系统上的表示。怎么才12M？注意这个文件是 自扩展文件 ，当不够用的时候它会自己增加文件大小。</p><h3 id="独立表空间"><a href="#独立表空间" class="headerlink" title="独立表空间"></a>独立表空间</h3><p>在MySQL5.6.6以及之后的版本中，InnoDB并不会默认的把各个表的数据存储到系统表空间中，而是为 每 一个表建立一个<code>独立表空间</code>，也就是说我们创建了多少个表，就有多少个独立表空间。</p><p>使用独立表空间来存储表数据的话，会在该表所属数据库对应的子目录下创建一个表示该独立表空间的文件，文件名和表名相同，只不过添加了一个<code>.ibd</code> 的扩展名而已.</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><code>数据库a，表b</code></p><p>如果表b采用 <code>InnoDB</code>，data\a中会产生1个或者2个文件：</p><ul><li><code>b.frm</code>：描述表结构文件，字段长度等</li><li>如果采用 <code>系统表空间</code>模式的，数据信息和索引信息都存储在<code>ibdata1</code> 中</li><li>如果采用 <code>独立表空间</code> 存储模式，data\a中还会产生 <code>b.ibd</code>文件（存储数据信息和索引信息）</li></ul><p>此外：</p><p>① MySQL5.7 中会在data/a的目录下生成 db.opt 文件用于保存数据库的相关配置。比如：字符集、比较规则。而MySQL8.0不再提供db.opt文件。</p><p>② MySQL8.0中不再单独提供b.frm，而是合并在b.ibd文件中。</p><p>如果表b采用 <code>MyISAM</code>，data\a中会产生3个文件：</p><ul><li><p>MySQL5.7 中：<code>b.frm</code>：描述表结构文件，字段长度等。</p><p>MySQL8.0 中 <code>b.xxx.sdi</code> ：描述表结构文件，字段长度等</p></li><li><p><code>b.MYD</code> (MYData)：数据信息文件，存储数据信息(如果采用独立表存储模式)</p></li><li><p><code>b.MYI</code> (MYIndex)：存放索引信息文件</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql8.0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义线程池</title>
      <link href="/post/c535e51e.html"/>
      <url>/post/c535e51e.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>既然Java有封装好的线程池，那么我们为什么要自定义线程池呢？—更好的理解线程池的原理</p></blockquote><span id="more"></span><h2 id="准备一个阻塞队列"><a href="#准备一个阻塞队列" class="headerlink" title="准备一个阻塞队列"></a>准备一个阻塞队列</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BlockingQueue</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="comment">//任务队列</span></span><br><span class="line">    <span class="keyword">private</span> Deque&lt;T&gt; queue=<span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//锁</span></span><br><span class="line">    <span class="keyword">private</span> ReentrantLock lock=<span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生产者条件变量</span></span><br><span class="line">    <span class="keyword">private</span> Condition fullWaitSet=lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//消费者条件变量</span></span><br><span class="line">    <span class="keyword">private</span> Condition emptyWaitSet=lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> capcity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BlockingQueue</span><span class="params">(<span class="type">int</span> capcity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.capcity = capcity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//带超时的阻塞获取</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">poll</span><span class="params">(<span class="type">long</span> timeout, TimeUnit unit)</span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">nanos</span> <span class="operator">=</span> unit.toNanos(timeout);</span><br><span class="line">            <span class="keyword">while</span> (queue.isEmpty())&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//返回的是剩余时间</span></span><br><span class="line">                    <span class="keyword">if</span> (nanos&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    nanos=emptyWaitSet.awaitNanos(nanos);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> queue.removeFirst();</span><br><span class="line">            fullWaitSet.signal();</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//阻塞获取</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">take</span><span class="params">()</span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (queue.isEmpty())&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    emptyWaitSet.await();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> queue.removeFirst();</span><br><span class="line">            fullWaitSet.signal();</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//阻塞添加</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(T element)</span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (queue.size()==capcity)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;等待加入任务队列&#123;&#125;&quot;</span>,element);</span><br><span class="line">                    fullWaitSet.await();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            log.debug(<span class="string">&quot;加入任务队列 &#123;&#125;&quot;</span>,element);</span><br><span class="line">            queue.addLast(element);</span><br><span class="line">            emptyWaitSet.signal();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//带超时时间的阻塞添加</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">offer</span><span class="params">(T task,<span class="type">long</span> timeout,TimeUnit timeUnit)</span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">nanos</span> <span class="operator">=</span> timeUnit.toNanos(timeout);</span><br><span class="line">            <span class="keyword">while</span> (queue.size()==capcity)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (nanos&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    log.debug(<span class="string">&quot;等待加入任务队列&#123;&#125;&quot;</span>,task);</span><br><span class="line">                    nanos = fullWaitSet.awaitNanos(nanos);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            log.debug(<span class="string">&quot;加入任务队列 &#123;&#125;&quot;</span>,task);</span><br><span class="line">            queue.addLast(task);</span><br><span class="line">            emptyWaitSet.signal();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取大小</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> queue.size();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tryPut</span><span class="params">(RejectPolicy&lt;T&gt; rejectPolicy, T task)</span> &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//判断队列是否已满</span></span><br><span class="line">            <span class="keyword">if</span> (queue.size()==capcity)&#123;</span><br><span class="line">                rejectPolicy.reject(<span class="built_in">this</span>,task);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;加入任务队列&#123;&#125;&quot;</span>,task);</span><br><span class="line">                queue.addLast(task);</span><br><span class="line">                emptyWaitSet.signal();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拒绝策略"><a href="#拒绝策略" class="headerlink" title="拒绝策略"></a>拒绝策略</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">RejectPolicy</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">reject</span><span class="params">(BlockingQueue&lt;T&gt; queue,T task)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadPool</span>&#123;</span><br><span class="line">    <span class="comment">//任务队列</span></span><br><span class="line">    <span class="keyword">private</span> BlockingQueue&lt;Runnable&gt; taskQueue;</span><br><span class="line">    <span class="comment">//线程集合</span></span><br><span class="line">    <span class="keyword">private</span> HashSet&lt;Worker&gt; workers=<span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">    <span class="comment">//核心的线程数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> coreSize;</span><br><span class="line">    <span class="comment">//获取任务的超时时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> timeout;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TimeUnit timeUnit;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RejectPolicy&lt;Runnable&gt; rejectPolicy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Runnable task)</span>&#123;</span><br><span class="line">        <span class="comment">//当任务数没有超过coreSize时候，直接交给worker对象执行</span></span><br><span class="line">        <span class="comment">//如果任务数量超过coreSize时，就加入任务队列暂存</span></span><br><span class="line">        <span class="keyword">synchronized</span> (workers)&#123;</span><br><span class="line">            <span class="keyword">if</span> (workers.size()&lt;coreSize)&#123;</span><br><span class="line">                log.debug(<span class="string">&quot;新增worker&#123;&#125;,&#123;&#125;&quot;</span>,workers,task);</span><br><span class="line">                <span class="type">Worker</span> <span class="variable">worker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Worker</span>(task);</span><br><span class="line">                workers.add(worker);</span><br><span class="line">                worker.start();</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//taskQueue.put(task);</span></span><br><span class="line">                <span class="comment">//死等</span></span><br><span class="line">                <span class="comment">//带超时等待</span></span><br><span class="line">                <span class="comment">//调用者放弃任务执行</span></span><br><span class="line">                <span class="comment">//调用者抛出异常</span></span><br><span class="line">                <span class="comment">//调用者自己执行任务</span></span><br><span class="line">                taskQueue.tryPut(rejectPolicy,task);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ThreadPool</span><span class="params">(<span class="type">int</span> coreSize, <span class="type">long</span> timeout, TimeUnit timeUnit,<span class="type">int</span> queueCapcity,RejectPolicy&lt;Runnable&gt; rejectPolicy)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.coreSize = coreSize;</span><br><span class="line">        <span class="built_in">this</span>.timeout = timeout;</span><br><span class="line">        <span class="built_in">this</span>.timeUnit = timeUnit;</span><br><span class="line">        <span class="built_in">this</span>.taskQueue=<span class="keyword">new</span> <span class="title class_">BlockingQueue</span>&lt;&gt;(queueCapcity);</span><br><span class="line">        <span class="built_in">this</span>.rejectPolicy=rejectPolicy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Worker</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Runnable task;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Worker</span> <span class="params">(Runnable task)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.task=task;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">//执行任务</span></span><br><span class="line">            <span class="comment">//当task不为空，执行任务</span></span><br><span class="line">            <span class="comment">//当task执行完毕，再接着从任务队列获取任务并执行</span></span><br><span class="line">            <span class="keyword">while</span> (task!=<span class="literal">null</span>||(task=taskQueue.poll(timeout,timeUnit))!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;正在执行...&#123;&#125;&quot;</span>,task);</span><br><span class="line">                    task.run();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                    task=<span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (workers)&#123;</span><br><span class="line">                log.debug(<span class="string">&quot;worker被移除&#123;&#125;&quot;</span>,<span class="built_in">this</span>);</span><br><span class="line">                workers.remove(<span class="built_in">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPool</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ThreadPool</span> <span class="variable">threadPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPool</span>(<span class="number">1</span>, <span class="number">1000</span>, TimeUnit.MILLISECONDS, <span class="number">1</span>,((queue, task) -&gt;&#123;</span><br><span class="line">            <span class="comment">//死等 queue.put(task);</span></span><br><span class="line">            <span class="comment">//超时等待queue.offer(task,500,TimeUnit.MILLISECONDS);</span></span><br><span class="line">            <span class="comment">//放弃log.debug(&quot;放弃&#123;&#125;&quot;,task);</span></span><br><span class="line">            <span class="comment">//抛异常throw new RuntimeException(&quot;任务执行失败&quot;+task);</span></span><br><span class="line">            task.run();</span><br><span class="line">        &#125; ));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> j=i;</span><br><span class="line">            threadPool.execute(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                log.debug(<span class="string">&quot;&#123;&#125;&quot;</span>,j);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JUC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式之懒汉式细节</title>
      <link href="/post/30852d40.html"/>
      <url>/post/30852d40.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>单例模式</p></blockquote><span id="more"></span><p>先让我们看一段著名的双检查单例模式</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/image-20220213185840484.png" alt="image-20220213185840484"></p><p>这种双检查模式的优点：</p><ul><li>懒惰实例化</li><li>当第一次调用getInstance()方法时候才加锁，后续使用无需加锁</li></ul><p><code>但是，当我们考虑多线程环境下，上面的代码是有问题的，我们可以查看getInstance方法对应的字节码</code></p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/image-20220213190855317.png" alt="image-20220213190855317"></p><p>细节：</p><p>编号17：创建一个对象</p><p>编号20：复制一份对象引用</p><p>编号21：使用一个对象的引用，调用构造方法</p><p>编号24：使用一个对象引用，赋值给static INSTANCE</p><blockquote><p>以上四行，JVM可能会优化为：先执行24，后执行21</p></blockquote><p>如果两个线程T1、T2按照以下时间顺序交错执行：</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/image-20220213192818916.png" alt="image-20220213192818916"></p><p>我们会发现，T2线程得到了实例，但是实例并<code>没有调用构造方法</code>,如果在构造方法中要执行很多初始化操作，那么 T2 拿到的是将是一个未初始化完成的单例</p><p>始化完毕的单例</p><p>synchronized包裹的代码块会发生重排序，但是只要共享变量完全被synchronized保护，那么这个共享变量是不会出现有序性问题的，但是上述例子中，<code>INSTANCE并没有完全被synchronized保护</code></p><h5 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h5><p><code>将INSTANCE使用volatile修饰</code></p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/image-20220213195312208.png" alt="image-20220213195312208"></p><p>原理：</p><p>读写 volatile 变量时会加入内存屏障（Memory Barrier（Memory Fence）），保证下面两点</p><ul><li><p>可见性</p><ul><li><p>写屏障（sfence）保证在该屏障之前的 t1 对共享变量的改动，都同步到主存当中</p></li><li><p>而读屏障（lfence）保证在该屏障之后 t2 对共享变量的读取，加载的是主存中最新数据</p></li></ul></li><li><p>有序性</p><ul><li><p>写屏障会确保指令重排序时，不会将写屏障之前的代码排在写屏障之后</p></li><li><p>读屏障会确保指令重排序时，不会将读屏障之后的代码排在读屏障之前</p></li></ul></li><li><p>更底层是读写变量时使用 lock 指令来多核 CPU 之间的可见性与有序性</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单例模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java的快速失败和安全失败</title>
      <link href="/post/871bbf0.html"/>
      <url>/post/871bbf0.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>在使用迭代器遍历一个集合时，如果遍历过程中对集合对象的内容进行了修改（增加、修、删除），就会抛出<code>Concurrent Modification Exception</code></p></blockquote><span id="more"></span><h2 id="Java的快速失败和安全失败"><a href="#Java的快速失败和安全失败" class="headerlink" title="Java的快速失败和安全失败"></a>Java的快速失败和安全失败</h2><h3 id="快速失败"><a href="#快速失败" class="headerlink" title="快速失败"></a>快速失败</h3><p>在使用迭代器遍历一个集合时，如果遍历过程中对集合对象的内容进行了修改（增加、修、删除），就会抛出<code>Concurrent Modification Exception</code></p><p><strong>原理:</strong>迭代器在遍历时直接访问集合中的内容，并且在遍历过程中使用一个modCount变量。集合在被遍历期间如果内容发生变化，就会改变modCount的值。每当迭代器使用 hashNext()/next() 遍历下一个元素之前，都会检测 modCount 变量是否为 expectedmodCount 值，是的话就返回遍历；否则抛出异常，终止遍历。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The number of times this HashMap has been structurally modified</span></span><br><span class="line"><span class="comment">     * Structural modifications are those that change the number of mappings in</span></span><br><span class="line"><span class="comment">     * the HashMap or otherwise modify its internal structure (e.g.,</span></span><br><span class="line"><span class="comment">     * rehash).  This field is used to make iterators on Collection-views of</span></span><br><span class="line"><span class="comment">     * the HashMap fail-fast.  (See ConcurrentModificationException).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//出自HashMap元源码</span></span><br></pre></td></tr></table></figure><p><strong>场景：</strong>java.util 包下的集合类都是快速失败的，不能在多线程下发生并发修改（迭代过程中被修改）。</p><p><strong>示例：</strong></p><p>List集合：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">            List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; <span class="number">5</span> ; i++ ) &#123;</span><br><span class="line">                list.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">            Iterator&lt;Integer&gt; iterator = list.iterator();</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ;</span><br><span class="line">            <span class="keyword">while</span>(iterator.hasNext()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">                    list.remove(<span class="number">3</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(iterator.next());</span><br><span class="line">                i ++;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/image-20220212221100955.png" alt="image-20220212221100955"></p><p>Map：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; <span class="number">5</span> ; i ++ ) &#123;</span><br><span class="line">           map.put(i+<span class="string">&quot;&quot;</span>, i+<span class="string">&quot;&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       Iterator&lt;Map.Entry&lt;String, String&gt;&gt; it = map.entrySet().iterator();</span><br><span class="line">       <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">           <span class="keyword">if</span> (i == <span class="number">2</span>) &#123;</span><br><span class="line">               map.remove(<span class="number">2</span>+<span class="string">&quot;&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           Map.Entry&lt;String, String&gt; entry = it.next();</span><br><span class="line">           System.out.println(entry.toString());</span><br><span class="line">           i++;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/image-20220212221628247.png" alt="image-20220212221628247"></p><p><code>注意：在迭代器遍历过程中结构的改变才会引起抛出ConcurrentModificationException</code></p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;1&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        map.put(<span class="string">&quot;2&quot;</span>,<span class="number">2</span>);</span><br><span class="line">        map.put(<span class="string">&quot;3&quot;</span>,<span class="number">3</span>);</span><br><span class="line">        map.put(<span class="string">&quot;4&quot;</span>,<span class="number">4</span>);</span><br><span class="line">        Iterator&lt;Map.Entry&lt;String, Integer&gt;&gt; iterator = map.entrySet().iterator();</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        System.out.println(map.toString());</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            <span class="keyword">if</span> (++i==<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;修改&quot;</span>);</span><br><span class="line">                map.put(<span class="string">&quot;1&quot;</span>,<span class="number">5</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(map.toString());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/image-20220212221800996.png" alt="image-20220212221800996"></p><h3 id="安全失败"><a href="#安全失败" class="headerlink" title="安全失败"></a>安全失败</h3><p>采用安全失败机制的集合容器，在遍历时不是直接在集合内容上访问的，而是先复制原有集合内容，在拷贝的集合上进行遍历。</p><p><strong>原理：</strong>由于迭代时是对原集合的拷贝进行遍历，所以在遍历过程中对原集合所作的修改并不能被迭代器检测到，所以不会触发 Concurrent Modification Exception。</p><p>>缺点：基于拷贝内容的优点是避免了 Concurrent Modification Exception，但同样地，迭代器并不能访问到修改后的内容，即：迭代器遍历的是开始遍历那一刻拿到的集合拷贝，在遍历期间原集合发生的修改迭代器是不知道的。</p><p><strong>场景：</strong>java.util.concurrent 包下的容器都是安全失败，可以在多线程下并发使用，并发修改</p>]]></content>
      
      
      <categories>
          
          <category> 拓展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拓展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>synchronized优化原理</title>
      <link href="/post/cee826e6.html"/>
      <url>/post/cee826e6.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Synchorized锁升级过程</p></blockquote><span id="more"></span><p><code>注：本文参考</code><a href="https://www.bilibili.com/video/BV16J411h7Rd?p=87&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV16J411h7Rd?p=87&amp;spm_id_from=pageDriver</a> 如有侵权，请及时联系我</p><h2 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h2><p>使用场景：如果一个对象虽然有多线程要加锁，但是加锁的时间是错开的（没有竞争），那么就可以使                      </p><p>​                   用轻量级锁来优化  </p><p>轻量级锁对使用者是透明的，语法仍然是<code>synchronized</code></p><p>假设有两个方法同步块，利用同一个对象加锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">synchronized</span>( obj ) &#123;</span><br><span class="line">    <span class="comment">// 同步代码块 A</span></span><br><span class="line">    method2();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="keyword">synchronized</span>( obj ) &#123;</span><br><span class="line">    <span class="comment">// 同步代码块 B</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>创建锁记录（Lock Record）对象，每个线程都的栈帧都会包含一个锁记录的结构，内部可以存储锁定对象的</p><p>Mark Word</p></li></ul><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/image-20220211212202991.png" alt="image-20220211212202991"></p><ul><li>让锁记录中 Object reference 指向锁对象，并尝试用 CAS 替换 Object 的 Mark Word，将 Mark Word 的值存入锁记录</li></ul><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/image-20220211212457752.png" alt="image-20220211212457752"></p><ul><li>如果 CAS替换成功，对象头中存储了 锁记录地址和状态 00 ，表示由该线程给对象加锁</li></ul><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/image-20220211212724869.png" alt="image-20220211212724869"></p><ul><li>若CAS失败，则有以下两种情况<ul><li>如果是其它线程已经持有了该 Object 的轻量级锁，这时表明有竞争，进入锁膨胀过程</li><li>如果是自己执行了 synchronized 锁重入，那么再添加一条 Lock Record 作为重入的计数</li></ul></li></ul><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/image-20220211213111275.png" alt="image-20220211213111275"></p><ul><li><p>当退出 synchronized 代码块（解锁时）如果有取值为 null 的锁记录，表示有重入，这时重置锁记录，表示重</p><p>入计数减一</p></li></ul><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/image-20220211213244230.png" alt="image-20220211213244230"></p><ul><li><p>当退出 synchronized 代码块（解锁时）锁记录的值不为 null，这时使用 CAS 将 Mark Word 的值恢复给对象</p><p>头</p><ul><li>成功，则解锁成功</li><li>失败，说明轻量级锁进行了锁膨胀或已经升级为重量级锁，进入重量级锁解锁流程</li></ul></li></ul><h2 id="锁膨胀"><a href="#锁膨胀" class="headerlink" title="锁膨胀"></a>锁膨胀</h2><p>如果在尝试加轻量级锁的过程中，CAS 操作无法成功，这时一种情况就是有其它线程为此对象加上了轻量级锁（有竞争），这时需要进行锁膨胀，将轻量级锁变为重量级锁。</p><ul><li>当 Thread-1 进行轻量级加锁时，Thread-0 已经对该对象加了轻量级锁</li></ul><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/image-20220211213643792.png" alt="image-20220211213643792"></p><ul><li><p>这时 Thread-1 加轻量级锁失败，进入锁膨胀流程</p><ul><li>即为 Object 对象申请 Monitor 锁，让 Object 指向重量级锁地址</li><li>然后自己进入 Monitor 的 EntryList 阻塞</li></ul><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/image-20220211214249269.png" alt="image-20220211214249269"></p></li><li><p>当 Thread-0 退出同步块解锁时，使用 cas 将 Mark Word 的值恢复给对象头，失败。这时会进入重量级解锁</p><p>流程，即按照 Monitor 地址找到 Monitor 对象，设置 Owner 为 null，唤醒 EntryList 中 阻塞的线程</p></li></ul><h2 id="自旋优化"><a href="#自旋优化" class="headerlink" title="自旋优化"></a>自旋优化</h2><p>重量级锁竞争的时候，还可以使用自旋来进行优化，如果当前线程自旋成功（即这时候持锁线程已经退出了同步</p><p>块，释放了锁），这时当前线程就可以避免阻塞。</p><p>自旋重试成功的情况</p><div class="table-container"><table><thead><tr><th style="text-align:center">线程1（core 1 上）</th><th style="text-align:center">对象 Mark</th><th style="text-align:center">线程2 （core 2 上）</th></tr></thead><tbody><tr><td style="text-align:center">-</td><td style="text-align:center">10（重量锁）</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">访问同步块，获取 monitor</td><td style="text-align:center">10（重量锁）重量锁指针</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">成功（加锁）</td><td style="text-align:center">10（重量锁）重量锁指针</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">执行同步块</td><td style="text-align:center">10（重量锁）重量锁指针</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">执行同步块</td><td style="text-align:center">10（重量锁）重量锁指针</td><td style="text-align:center">访问同步块，获取 monitor</td></tr><tr><td style="text-align:center">执行同步块</td><td style="text-align:center">10（重量锁）重量锁指针</td><td style="text-align:center">自旋重试</td></tr><tr><td style="text-align:center">执行完毕</td><td style="text-align:center">10（重量锁）重量锁指针</td><td style="text-align:center">自旋重试</td></tr><tr><td style="text-align:center">成功（解锁）</td><td style="text-align:center">01（无锁）</td><td style="text-align:center">自旋重试</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">10（重量锁）重量锁指针</td><td style="text-align:center">成功（加锁）</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">10（重量锁）重量锁指针</td><td style="text-align:center">执行同步块</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">……</td><td style="text-align:center">……</td></tr></tbody></table></div><p>自旋重试失败的情况</p><div class="table-container"><table><thead><tr><th style="text-align:center">线程1（core 1 上）</th><th style="text-align:center">对象 Mark</th><th style="text-align:center">线程2 （core 2 上）</th></tr></thead><tbody><tr><td style="text-align:center">-</td><td style="text-align:center">10（重量锁）</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">访问同步块，获取 monitor</td><td style="text-align:center">10（重量锁）重量锁指针</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">成功（加锁）</td><td style="text-align:center">10（重量锁）重量锁指针</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">执行同步块</td><td style="text-align:center">10（重量锁）重量锁指针</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">执行同步块</td><td style="text-align:center">10（重量锁）重量锁指针</td><td style="text-align:center">访问同步块，获取 monitor</td></tr><tr><td style="text-align:center">执行同步块</td><td style="text-align:center">10（重量锁）重量锁指针</td><td style="text-align:center">自旋重试</td></tr><tr><td style="text-align:center">执行同步块</td><td style="text-align:center">10（重量锁）重量锁指针</td><td style="text-align:center">自旋重试</td></tr><tr><td style="text-align:center">执行同步块</td><td style="text-align:center">10（重量锁）重量锁指针</td><td style="text-align:center">自旋重试</td></tr><tr><td style="text-align:center">执行同步块</td><td style="text-align:center">10（重量锁）重量锁指针</td><td style="text-align:center">阻塞</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">……</td><td style="text-align:center">……</td></tr></tbody></table></div><ul><li><p>自旋会占用 CPU 时间，单核 CPU 自旋就是浪费，多核 CPU 自旋才能发挥优势</p></li><li><p>在 Java 6 之后自旋锁是自适应的，比如对象刚刚的一次自旋操作成功过，那么认为这次自旋成功的可能性会</p><p>高，就多自旋几次；反之，就少自旋甚至不自旋，总之，比较智能。</p></li><li><p>Java 7 之后不能控制是否开启自旋功能</p></li></ul><h2 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h2><p>轻量级锁在没有竞争时（就自己这个线程），每次重入仍然需要执行 CAS 操作。</p><p>Java 6 中引入了偏向锁来做进一步优化：只有第一次使用 CAS 将线程 ID 设置到对象的 Mark Word 头，之后发现</p><p>这个线程 ID 是自己的就表示没有竞争，不用重新 CAS。以后只要不发生竞争，这个对象就归该线程所有</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="keyword">synchronized</span>( obj ) &#123;</span><br><span class="line"> <span class="comment">// 同步块 A</span></span><br><span class="line"> m2();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="keyword">synchronized</span>( obj ) &#123;</span><br><span class="line"> <span class="comment">// 同步块 B</span></span><br><span class="line"> m3();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m3</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="keyword">synchronized</span>( obj ) &#123;</span><br><span class="line">    <span class="comment">// 同步块 C</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/image-20220211220313983.png" alt="image-20220211220313983"></p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/image-20220211220420221.png" alt="image-20220211220420221"></p><p><strong>偏向状态</strong></p><p>对象头格式</p><div class="table-container"><table><thead><tr><th style="text-align:center">Mark Word (64 bits)</th><th style="text-align:center">State</th></tr></thead><tbody><tr><td style="text-align:center">unused:25  \</td><td style="text-align:center">hashcode:31  \</td><td>unused:1  \</td><td>age:4  \</td><td>biased_lock:0  \</td><td>01</td><td>Normal</td></tr><tr><td style="text-align:center">thread:54 \</td><td style="text-align:center">epoch:2       \</td><td>unused:1    \</td><td>age:4 \</td><td>biased_lock:1 \</td><td>01</td><td>Biased</td></tr><tr><td style="text-align:center">ptr_to_lock_record:62                                                                           \</td><td style="text-align:center">00</td><td>Lightweight Locked</td></tr><tr><td style="text-align:center">ptr_to_heavyweight_monitor:62                                                         \</td><td style="text-align:center">10</td><td>Heavyweight Locked</td></tr><tr><td style="text-align:center">\</td><td style="text-align:center">11</td><td>Marked for GC</td></tr></tbody></table></div><p>一个对象创建时：</p><ul><li><p>如果开启了偏向锁（默认开启），那么对象创建后，markword 值为 0x05 即最后 3 位为 101，这时它的</p><p>thread、epoch、age 都为 0</p></li><li><p>偏向锁是默认是延迟的，不会在程序启动时立即生效，如果想避免延迟，可以加 VM 参数 </p><p><code>-XX:BiasedLockingStartupDelay=0</code>来禁用延迟</p></li><li><p>如果没有开启偏向锁，那么对象创建后，markword 值为 0x01 即最后 3 位为 001，这时它的 hashcode、</p><p>age 都为 0，第一次用到 hashcode 时才会赋值</p></li></ul><p>1） 测试延迟特性</p><p>2） 测试偏向锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>利用 jol 第三方工具来查看对象头信息（注意这里我扩展了 jol 让它输出更为简洁）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加虚拟机参数 -XX:BiasedLockingStartupDelay=0 </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"> <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line"> <span class="type">ClassLayout</span> <span class="variable">classLayout</span> <span class="operator">=</span> ClassLayout.parseInstance(d);</span><br><span class="line"> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line"> log.debug(<span class="string">&quot;synchronized 前&quot;</span>);</span><br><span class="line"> System.out.println(classLayout.toPrintableSimple(<span class="literal">true</span>));</span><br><span class="line"> <span class="keyword">synchronized</span> (d) &#123;</span><br><span class="line"> log.debug(<span class="string">&quot;synchronized 中&quot;</span>);</span><br><span class="line"> System.out.println(classLayout.toPrintableSimple(<span class="literal">true</span>));</span><br><span class="line"> &#125;</span><br><span class="line"> log.debug(<span class="string">&quot;synchronized 后&quot;</span>);</span><br><span class="line"> System.out.println(classLayout.toPrintableSimple(<span class="literal">true</span>));</span><br><span class="line"> &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11</span>:08:<span class="number">58.117</span> c.TestBiased [t1] - <span class="keyword">synchronized</span> 前</span><br><span class="line"><span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000101</span> </span><br><span class="line"><span class="number">11</span>:08:<span class="number">58.121</span> c.TestBiased [t1] - <span class="keyword">synchronized</span> 中</span><br><span class="line"><span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11101011</span> <span class="number">11010000</span> <span class="number">00000101</span> </span><br><span class="line"><span class="number">11</span>:08:<span class="number">58.121</span> c.TestBiased [t1] - <span class="keyword">synchronized</span> 后</span><br><span class="line"><span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11101011</span> <span class="number">11010000</span> <span class="number">00000101</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：处于偏向锁的对象解锁后，线程 id 仍存储于对象头中</p></blockquote><p>3）测试禁用</p><p>在上面测试代码运行时在添加 VM 参数 -XX:-UseBiasedLocking 禁用偏向锁</p><p>输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11</span>:<span class="number">13</span>:<span class="number">10.018</span> c.TestBiased [t1] - <span class="keyword">synchronized</span> 前</span><br><span class="line"><span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000001</span> </span><br><span class="line"><span class="number">11</span>:<span class="number">13</span>:<span class="number">10.021</span> c.TestBiased [t1] - <span class="keyword">synchronized</span> 中</span><br><span class="line"><span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00100000</span> <span class="number">00010100</span> <span class="number">11110011</span> <span class="number">10001000</span> </span><br><span class="line"><span class="number">11</span>:<span class="number">13</span>:<span class="number">10.021</span> c.TestBiased [t1] - <span class="keyword">synchronized</span> 后</span><br><span class="line"><span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000001</span></span><br></pre></td></tr></table></figure><p>4) 测试 hashCode</p><ul><li>正常状态对象一开始是没有 hashCode 的，第一次调用才生成</li></ul><p><strong>撤销</strong> <strong>-</strong> <strong>调用对象</strong> <strong>hashCode</strong></p><p>调用了对象的 hashCode，但偏向锁的对象 MarkWord 中存储的是线程 id，如果调用 hashCode 会导致偏向锁被</p><p>撤销</p><ul><li>轻量级锁会在锁记录中记录 hashCode</li><li>重量级锁会在 Monitor 中记录 hashCode</li></ul><p>在调用 hashCode 后使用偏向锁，记得去掉 -XX:-UseBiasedLocking</p><p>输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11</span>:<span class="number">22</span>:<span class="number">10.386</span> c.TestBiased [main] - 调用 hashCode:<span class="number">1778535015</span> </span><br><span class="line"><span class="number">11</span>:<span class="number">22</span>:<span class="number">10.391</span> c.TestBiased [t1] - <span class="keyword">synchronized</span> 前</span><br><span class="line"><span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">01101010</span> <span class="number">00000010</span> <span class="number">01001010</span> <span class="number">01100111</span> <span class="number">00000001</span> </span><br><span class="line"><span class="number">11</span>:<span class="number">22</span>:<span class="number">10.393</span> c.TestBiased [t1] - <span class="keyword">synchronized</span> 中</span><br><span class="line"><span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00100000</span> <span class="number">11000011</span> <span class="number">11110011</span> <span class="number">01101000</span> </span><br><span class="line"><span class="number">11</span>:<span class="number">22</span>:<span class="number">10.393</span> c.TestBiased [t1] - <span class="keyword">synchronized</span> 后</span><br><span class="line"><span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">01101010</span> <span class="number">00000010</span> <span class="number">01001010</span> <span class="number">01100111</span> <span class="number">00000001</span></span><br></pre></td></tr></table></figure><p><strong>撤销</strong> <strong>-</strong> <strong>其它线程使用对象</strong></p><p>当有其它线程使用偏向锁对象时，会将偏向锁升级为轻量级锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"> <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line"> <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line"> <span class="keyword">synchronized</span> (d) &#123;</span><br><span class="line"> log.debug(ClassLayout.parseInstance(d).toPrintableSimple(<span class="literal">true</span>));</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">synchronized</span> (TestBiased.class) &#123;</span><br><span class="line"> TestBiased.class.notify();</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 如果不用 wait/notify 使用 join 必须打开下面的注释</span></span><br><span class="line"> <span class="comment">// 因为：t1 线程不能结束，否则底层线程可能被 jvm 重用作为 t2 线程，底层线程 id 是一样的</span></span><br><span class="line"> <span class="comment">/*try &#123;</span></span><br><span class="line"><span class="comment"> System.in.read();</span></span><br><span class="line"><span class="comment"> &#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="comment"> e.printStackTrace();</span></span><br><span class="line"><span class="comment"> &#125;*/</span></span><br><span class="line"> &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line"> t1.start();</span><br><span class="line"> <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line"> <span class="keyword">synchronized</span> (TestBiased.class) &#123;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> TestBiased.class.wait();</span><br><span class="line"> &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"> e.printStackTrace();</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> log.debug(ClassLayout.parseInstance(d).toPrintableSimple(<span class="literal">true</span>));</span><br><span class="line"> <span class="keyword">synchronized</span> (d) &#123;</span><br><span class="line"> log.debug(ClassLayout.parseInstance(d).toPrintableSimple(<span class="literal">true</span>));</span><br><span class="line"> &#125;</span><br><span class="line"> log.debug(ClassLayout.parseInstance(d).toPrintableSimple(<span class="literal">true</span>));</span><br><span class="line"> &#125;, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line"> t2.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[t1] - <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">01000001</span> <span class="number">00010000</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">01000001</span> <span class="number">00010000</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">10110101</span> <span class="number">11110000</span> <span class="number">01000000</span> </span><br><span class="line">[t2] - <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000001</span></span><br></pre></td></tr></table></figure><p><strong>撤销</strong> <strong>-</strong> <strong>调用</strong> <strong>wait/notify</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"> <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line"> <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line"> log.debug(ClassLayout.parseInstance(d).toPrintableSimple(<span class="literal">true</span>));</span><br><span class="line"> <span class="keyword">synchronized</span> (d) &#123;</span><br><span class="line"> log.debug(ClassLayout.parseInstance(d).toPrintableSimple(<span class="literal">true</span>));</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> d.wait();</span><br><span class="line"> &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"> e.printStackTrace();</span><br><span class="line"> &#125;</span><br><span class="line"> log.debug(ClassLayout.parseInstance(d).toPrintableSimple(<span class="literal">true</span>));</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line"> t1.start();</span><br><span class="line"> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> Thread.sleep(<span class="number">6000</span>);</span><br><span class="line"> &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"> e.printStackTrace();</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">synchronized</span> (d) &#123;</span><br><span class="line"> log.debug(<span class="string">&quot;notify&quot;</span>);</span><br><span class="line"> d.notify();</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[t1] - <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000101</span> </span><br><span class="line">[t1] - <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">10110011</span> <span class="number">11111000</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - notify </span><br><span class="line">[t1] - <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011100</span> <span class="number">11010100</span> <span class="number">00001101</span> <span class="number">11001010</span></span><br></pre></td></tr></table></figure><p><strong>批量重偏向</strong></p><p>如果对象虽然被多个线程访问，但没有竞争，这时偏向了线程 T1 的对象仍有机会重新偏向 T2，重偏向会重置对象的 Thread ID</p><p>当撤销偏向锁阈值超过 20 次后，jvm 会这样觉得，我是不是偏向错了呢，于是会在给这些对象加锁时重新偏向至</p><p>加锁线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"> Vector&lt;Dog&gt; list = <span class="keyword">new</span> <span class="title class_">Vector</span>&lt;&gt;();</span><br><span class="line"> <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line"> <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line"> <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line"> list.add(d);</span><br><span class="line"> <span class="keyword">synchronized</span> (d) &#123;</span><br><span class="line"> log.debug(i + <span class="string">&quot;\t&quot;</span> + ClassLayout.parseInstance(d).toPrintableSimple(<span class="literal">true</span>));</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">synchronized</span> (list) &#123;</span><br><span class="line"> list.notify();</span><br><span class="line"> &#125; </span><br><span class="line"> &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line"> t1.start();</span><br><span class="line"> </span><br><span class="line"> <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line"> <span class="keyword">synchronized</span> (list) &#123;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> list.wait();</span><br><span class="line"> &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"> e.printStackTrace();</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> log.debug(<span class="string">&quot;===============&gt; &quot;</span>);</span><br><span class="line"> <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line"> <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> list.get(i);</span><br><span class="line"> log.debug(i + <span class="string">&quot;\t&quot;</span> + ClassLayout.parseInstance(d).toPrintableSimple(<span class="literal">true</span>));</span><br><span class="line"> <span class="keyword">synchronized</span> (d) &#123;</span><br><span class="line"> log.debug(i + <span class="string">&quot;\t&quot;</span> + ClassLayout.parseInstance(d).toPrintableSimple(<span class="literal">true</span>));</span><br><span class="line"> &#125;</span><br><span class="line"> log.debug(i + <span class="string">&quot;\t&quot;</span> + ClassLayout.parseInstance(d).toPrintableSimple(<span class="literal">true</span>));</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line"> t2.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">[t1] - <span class="number">0</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t1] - <span class="number">1</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t1] - <span class="number">2</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t1] - <span class="number">3</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t1] - <span class="number">4</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t1] - <span class="number">5</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t1] - <span class="number">6</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t1] - <span class="number">7</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t1] - <span class="number">8</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t1] - <span class="number">9</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t1] - <span class="number">10</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t1] - <span class="number">11</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t1] - <span class="number">12</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t1] - <span class="number">13</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t1] - <span class="number">14</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t1] - <span class="number">15</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t1] - <span class="number">16</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t1] - <span class="number">17</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t1] - <span class="number">18</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t1] - <span class="number">19</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t1] - <span class="number">20</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t1] - <span class="number">21</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t1] - <span class="number">22</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t1] - <span class="number">23</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t1] - <span class="number">24</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t1] - <span class="number">25</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t1] - <span class="number">26</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t1] - <span class="number">27</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t1] - <span class="number">28</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t1] - <span class="number">29</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - ===============&gt; </span><br><span class="line">[t2] - <span class="number">0</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - <span class="number">0</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00100000</span> <span class="number">01011000</span> <span class="number">11110111</span> <span class="number">00000000</span> </span><br><span class="line">[t2] - <span class="number">0</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000001</span> </span><br><span class="line">[t2] - <span class="number">1</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - <span class="number">1</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00100000</span> <span class="number">01011000</span> <span class="number">11110111</span> <span class="number">00000000</span> </span><br><span class="line">[t2] - <span class="number">1</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000001</span> </span><br><span class="line">[t2] - <span class="number">2</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - <span class="number">2</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00100000</span> <span class="number">01011000</span> <span class="number">11110111</span> <span class="number">00000000</span> </span><br><span class="line">[t2] - <span class="number">2</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000001</span> </span><br><span class="line">[t2] - <span class="number">3</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - <span class="number">3</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00100000</span> <span class="number">01011000</span> <span class="number">11110111</span> <span class="number">00000000</span> </span><br><span class="line">[t2] - <span class="number">3</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000001</span> </span><br><span class="line">[t2] - <span class="number">4</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - <span class="number">4</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00100000</span> <span class="number">01011000</span> <span class="number">11110111</span> <span class="number">00000000</span> </span><br><span class="line">[t2] - <span class="number">4</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000001</span> </span><br><span class="line">[t2] - <span class="number">5</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - <span class="number">5</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00100000</span> <span class="number">01011000</span> <span class="number">11110111</span> <span class="number">00000000</span> </span><br><span class="line">[t2] - <span class="number">5</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000001</span> </span><br><span class="line">[t2] - <span class="number">6</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - <span class="number">6</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00100000</span> <span class="number">01011000</span> <span class="number">11110111</span> <span class="number">00000000</span> </span><br><span class="line">[t2] - <span class="number">6</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000001</span> </span><br><span class="line">[t2] - <span class="number">7</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span></span><br><span class="line">[t2] - <span class="number">7</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00100000</span> <span class="number">01011000</span> <span class="number">11110111</span> <span class="number">00000000</span> </span><br><span class="line">[t2] - <span class="number">7</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000001</span> </span><br><span class="line">[t2] - <span class="number">8</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - <span class="number">8</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00100000</span> <span class="number">01011000</span> <span class="number">11110111</span> <span class="number">00000000</span> </span><br><span class="line">[t2] - <span class="number">8</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000001</span> </span><br><span class="line">[t2] - <span class="number">9</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - <span class="number">9</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00100000</span> <span class="number">01011000</span> <span class="number">11110111</span> <span class="number">00000000</span> </span><br><span class="line">[t2] - <span class="number">9</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000001</span> </span><br><span class="line">[t2] - <span class="number">10</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - <span class="number">10</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00100000</span> <span class="number">01011000</span> <span class="number">11110111</span> <span class="number">00000000</span> </span><br><span class="line">[t2] - <span class="number">10</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000001</span> </span><br><span class="line">[t2] - <span class="number">11</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - <span class="number">11</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00100000</span> <span class="number">01011000</span> <span class="number">11110111</span> <span class="number">00000000</span> </span><br><span class="line">[t2] - <span class="number">11</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000001</span> </span><br><span class="line">[t2] - <span class="number">12</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - <span class="number">12</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00100000</span> <span class="number">01011000</span> <span class="number">11110111</span> <span class="number">00000000</span> </span><br><span class="line">[t2] - <span class="number">12</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000001</span> </span><br><span class="line">[t2] - <span class="number">13</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - <span class="number">13</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00100000</span> <span class="number">01011000</span> <span class="number">11110111</span> <span class="number">00000000</span> </span><br><span class="line">[t2] - <span class="number">13</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000001</span> </span><br><span class="line">[t2] - <span class="number">14</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - <span class="number">14</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00100000</span> <span class="number">01011000</span> <span class="number">11110111</span> <span class="number">00000000</span> </span><br><span class="line">[t2] - <span class="number">14</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000001</span> </span><br><span class="line">[t2] - <span class="number">15</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - <span class="number">15</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00100000</span> <span class="number">01011000</span> <span class="number">11110111</span> <span class="number">00000000</span> </span><br><span class="line">[t2] - <span class="number">15</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000001</span> </span><br><span class="line">[t2] - <span class="number">16</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - <span class="number">16</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00100000</span> <span class="number">01011000</span> <span class="number">11110111</span> <span class="number">00000000</span> </span><br><span class="line">[t2] - <span class="number">16</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000001</span> </span><br><span class="line">[t2] - <span class="number">17</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - <span class="number">17</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00100000</span> <span class="number">01011000</span> <span class="number">11110111</span> <span class="number">00000000</span> </span><br><span class="line">[t2] - <span class="number">17</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000001</span> </span><br><span class="line">[t2] - <span class="number">18</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - <span class="number">18</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00100000</span> <span class="number">01011000</span> <span class="number">11110111</span> <span class="number">00000000</span> </span><br><span class="line">[t2] - <span class="number">18</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000001</span> </span><br><span class="line">[t2] - <span class="number">19</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - <span class="number">19</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11110001</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - <span class="number">19</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11110001</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - <span class="number">20</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - <span class="number">20</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11110001</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - <span class="number">20</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11110001</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - <span class="number">21</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - <span class="number">21</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11110001</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - <span class="number">21</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11110001</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - <span class="number">22</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - <span class="number">22</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11110001</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - <span class="number">22</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11110001</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - <span class="number">23</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - <span class="number">23</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11110001</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - <span class="number">23</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11110001</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - <span class="number">24</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - <span class="number">24</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11110001</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - <span class="number">24</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11110001</span> <span class="number">00000101</span></span><br><span class="line">[t2] - <span class="number">25</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - <span class="number">25</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11110001</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - <span class="number">25</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11110001</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - <span class="number">26</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - <span class="number">26</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11110001</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - <span class="number">26</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11110001</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - <span class="number">27</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - <span class="number">27</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11110001</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - <span class="number">27</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11110001</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - <span class="number">28</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - <span class="number">28</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11110001</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - <span class="number">28</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11110001</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - <span class="number">29</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11100000</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - <span class="number">29</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11110001</span> <span class="number">00000101</span> </span><br><span class="line">[t2] - <span class="number">29</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span> <span class="number">11110011</span> <span class="number">11110001</span> <span class="number">00000101</span></span><br></pre></td></tr></table></figure><p><strong>批量撤销</strong></p><p>当撤销偏向锁阈值超过 40 次后，jvm 会这样觉得，自己确实偏向错了，根本就不该偏向。于是整个类的所有对象</p><p>都会变为不可偏向的，新建的对象也是不可偏向的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> Thread t1,t2,t3;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        Vector&lt;Dog&gt; list = <span class="keyword">new</span> <span class="title class_">Vector</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">loopNumber</span> <span class="operator">=</span> <span class="number">39</span>;</span><br><span class="line">        t1 = <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; loopNumber; i++) &#123;</span><br><span class="line">                <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">                list.add(d);</span><br><span class="line">                <span class="keyword">synchronized</span> (d) &#123;</span><br><span class="line">                    log.debug(i + <span class="string">&quot;\t&quot;</span> + ClassLayout.parseInstance(d).toPrintableSimple(<span class="literal">true</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            LockSupport.unpark(t2);</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2 = <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            LockSupport.park();</span><br><span class="line">            log.debug(<span class="string">&quot;===============&gt; &quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; loopNumber; i++) &#123;</span><br><span class="line">                <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> list.get(i);</span><br><span class="line">                log.debug(i + <span class="string">&quot;\t&quot;</span> + ClassLayout.parseInstance(d).toPrintableSimple(<span class="literal">true</span>));</span><br><span class="line">                <span class="keyword">synchronized</span> (d) &#123;</span><br><span class="line">                    log.debug(i + <span class="string">&quot;\t&quot;</span> + ClassLayout.parseInstance(d).toPrintableSimple(<span class="literal">true</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                log.debug(i + <span class="string">&quot;\t&quot;</span> + ClassLayout.parseInstance(d).toPrintableSimple(<span class="literal">true</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            LockSupport.unpark(t3);</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line">        t2.start();</span><br><span class="line">        t3 = <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            LockSupport.park();</span><br><span class="line">            log.debug(<span class="string">&quot;===============&gt; &quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; loopNumber; i++) &#123;</span><br><span class="line">                <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> list.get(i);</span><br><span class="line">                log.debug(i + <span class="string">&quot;\t&quot;</span> + ClassLayout.parseInstance(d).toPrintableSimple(<span class="literal">true</span>));</span><br><span class="line">                <span class="keyword">synchronized</span> (d) &#123;</span><br><span class="line">                    log.debug(i + <span class="string">&quot;\t&quot;</span> + ClassLayout.parseInstance(d).toPrintableSimple(<span class="literal">true</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                log.debug(i + <span class="string">&quot;\t&quot;</span> + ClassLayout.parseInstance(d).toPrintableSimple(<span class="literal">true</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t3&quot;</span>);</span><br><span class="line">        t3.start();</span><br><span class="line">        t3.join();</span><br><span class="line">        log.debug(ClassLayout.parseInstance(<span class="keyword">new</span> <span class="title class_">Dog</span>()).toPrintableSimple(<span class="literal">true</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a>锁消除</h2>]]></content>
      
      
      <categories>
          
          <category> JUC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> synchronized </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql8.0的安装与使用</title>
      <link href="/post/22806c72.html"/>
      <url>/post/22806c72.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Mysql8.0的安装与使用</p></blockquote><span id="more"></span><h2 id="Linux下MySQL的安装与使用"><a href="#Linux下MySQL的安装与使用" class="headerlink" title="Linux下MySQL的安装与使用"></a>Linux下MySQL的安装与使用</h2><h3 id="1-1查看是否安装过MySQL"><a href="#1-1查看是否安装过MySQL" class="headerlink" title="1.1查看是否安装过MySQL"></a>1.1查看是否安装过MySQL</h3><p><code>rpm -qa | grep -i mysql</code></p><p>查看MySQL服务状态</p><p><code>systemctl status mysqld.service</code></p><h3 id="1-2MySQL的卸载"><a href="#1-2MySQL的卸载" class="headerlink" title="1.2MySQL的卸载"></a>1.2MySQL的卸载</h3><ul><li><p>关闭MySQL服务</p> <figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop mysqld.service</span><br></pre></td></tr></table></figure></li><li><p>查看当前MySQL的安装状况</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep -i mysql # 或 yum list installed | grep mysql</span><br></pre></td></tr></table></figure></li><li><p>卸载上述命令查询出的已安装程序</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove mysql-xxx mysql-xxx mysql-xxx mysqk-xxxx</span><br></pre></td></tr></table></figure></li><li><p>删除MySQL相关文件</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find / -name mysql     #查找相关文件</span><br><span class="line">rm -rf  xxx            #删除相关文件</span><br><span class="line">rm -rf /etc/my.cnf     #删除my.cnf</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-3MySQL的安装"><a href="#1-3MySQL的安装" class="headerlink" title="1.3MySQL的安装"></a>1.3MySQL的安装</h3><h4 id="1-3-1下载地址"><a href="#1-3-1下载地址" class="headerlink" title="1.3.1下载地址"></a>1.3.1下载地址</h4><p><a href="https://www.mysql.com/">官网</a></p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/image-20220210204432279.png" alt="image-20220210204432279"></p><h4 id="1-3-2-选择下载的类型"><a href="#1-3-2-选择下载的类型" class="headerlink" title="1.3.2 选择下载的类型"></a>1.3.2 选择下载的类型</h4><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/image-20220210204536262.png" alt="image-20220210204536262"></p><h4 id="1-3-3-找到合适的版本"><a href="#1-3-3-找到合适的版本" class="headerlink" title="1.3.3 找到合适的版本"></a>1.3.3 找到合适的版本</h4><p>​       <code>建议下载RPM Bundle全量包</code></p><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/image-20220210204903093.png" alt="image-20220210204903093"></p><h4 id="1-3-4-Linux系统安装MySQL常用三种方式"><a href="#1-3-4-Linux系统安装MySQL常用三种方式" class="headerlink" title="1.3.4 Linux系统安装MySQL常用三种方式"></a>1.3.4 Linux系统安装MySQL常用三种方式</h4><ol><li>rpm命令安装</li><li>yum命令</li><li>编译安装源码包</li></ol><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/image-20220210205135393.png" alt="image-20220210205135393"></p><h4 id="1-3-5-解压下载好的tar包-抽取所需安装包"><a href="#1-3-5-解压下载好的tar包-抽取所需安装包" class="headerlink" title="1.3.5 解压下载好的tar包,抽取所需安装包"></a>1.3.5 解压下载好的tar包,抽取所需安装包</h4><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/image-20220210205855731.png" alt="image-20220210205855731"></p><h4 id="1-3-7-CentOS下检查MySQL依赖"><a href="#1-3-7-CentOS下检查MySQL依赖" class="headerlink" title="1.3.7 CentOS下检查MySQL依赖"></a>1.3.7 CentOS下检查MySQL依赖</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 777 /tmp   #赋予较大权限</span><br><span class="line">rpm -qa|grep libaio</span><br><span class="line">rpm -qa|grep net-tools</span><br><span class="line">rpm -qa|grep net-tools</span><br><span class="line">#如果这三个包不存在，需要使用rpm安装</span><br></pre></td></tr></table></figure><h4 id="1-3-8-将安装程序拷贝到-opt目录下"><a href="#1-3-8-将安装程序拷贝到-opt目录下" class="headerlink" title="1.3.8 将安装程序拷贝到/opt目录下"></a>1.3.8 将安装程序拷贝到/opt目录下</h4><p>在mysql的安装文件目录下执行：（必须按照顺序执行）</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh mysql-community-common-8.0.28-1.el8.x86_64.rpm </span><br><span class="line">rpm -ivh mysql-community-client-plugins-8.0.28-1.el8.x86_64.rpm </span><br><span class="line">rpm -ivh mysql-community-libs-8.0.28-1.el8.86_64.rpm </span><br><span class="line">rpm -ivh mysql-community-client-8.0.281.el8.x86_64.rpm </span><br><span class="line">rpm -ivh mysql-community-server-8.0.281.el8.x86_64.rpm</span><br></pre></td></tr></table></figure><blockquote><p>若安装过程中报错mariadb-libs被mysql-community-libs-xxxxxxxx取代，可以使用<code>yum remove mysql-libs</code>命令解决</p></blockquote><h4 id="1-3-9-查看MySQL版本"><a href="#1-3-9-查看MySQL版本" class="headerlink" title="1.3.9 查看MySQL版本"></a>1.3.9 查看MySQL版本</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql --version</span><br></pre></td></tr></table></figure><h4 id="1-3-10-服务初始化"><a href="#1-3-10-服务初始化" class="headerlink" title="1.3.10 服务初始化"></a>1.3.10 服务初始化</h4><p>为了保证数据库目录与文件的所有者为 mysql 登录用户，如果你是以 root 身份运行 mysql 服务，需要执</p><p>行下面的命令初始化：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --initialize --user=mysql</span><br></pre></td></tr></table></figure><p>说明： —initialize 选项默认以“安全”模式来初始化，则会为 root 用户生成一个密码并将该密码标记为过 </p><p>期登录后你需要设置一个新的密码。生成的 <code>临时密码</code> 会往日志中记录一份。</p><p>查看密码：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /var/log/mysqld.log</span><br></pre></td></tr></table></figure><p>root@localhost: 后面就是初始化的密码</p><h4 id="1-3-11-启动MySQL"><a href="#1-3-11-启动MySQL" class="headerlink" title="1.3.11 启动MySQL"></a>1.3.11 启动MySQL</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">启动：systemctl start mysqld.service </span><br><span class="line">关闭：systemctl stop mysqld.service </span><br><span class="line">重启：systemctl restart mysqld.service </span><br><span class="line">查看状态：systemctl status mysqld.service</span><br></pre></td></tr></table></figure><h3 id="1-4-MySQL登录与修改密码"><a href="#1-4-MySQL登录与修改密码" class="headerlink" title="1.4 MySQL登录与修改密码"></a>1.4 MySQL登录与修改密码</h3><p>通过 <code>mysql -hlocalhost -P3306 -uroot -p</code>进行登录，在Enter password：录入初始化密码</p><p>修改密码</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;new_password&#x27;;</span><br></pre></td></tr></table></figure><p>注意：<code>5.7版本之后（不含5.7），mysql加入了全新的密码安全机制。设置新密码太简单会报错。</code></p><h3 id="1-5-远程登录设置"><a href="#1-5-远程登录设置" class="headerlink" title="1.5 远程登录设置"></a>1.5 远程登录设置</h3><h4 id="1-5-1-关闭防火墙或开放端口"><a href="#1-5-1-关闭防火墙或开放端口" class="headerlink" title="1.5.1 关闭防火墙或开放端口"></a>1.5.1 关闭防火墙或开放端口</h4><p>方式一、关闭防火墙</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">systemctl start firewalld.service </span><br><span class="line">systemctl status firewalld.service </span><br><span class="line">systemctl stop firewalld.service </span><br><span class="line">#设置开机启用防火墙 </span><br><span class="line">systemctl enable firewalld.service </span><br><span class="line">#设置开机禁用防火墙 </span><br><span class="line">systemctl disable firewalld.service</span><br></pre></td></tr></table></figure><p>方式二、开放端口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --list-all #查看开放的端口号</span><br><span class="line">#设置开放的端口号</span><br><span class="line">firewall-cmd --add-service=http --permanent  </span><br><span class="line">firewall-cmd --add-port=<span class="number">3306</span>/tcp --permanent</span><br><span class="line">#重启防火墙</span><br><span class="line">firewall-cmd --reload  </span><br></pre></td></tr></table></figure><h4 id="1-5-2Linux下修改配置"><a href="#1-5-2Linux下修改配置" class="headerlink" title="1.5.2Linux下修改配置"></a>1.5.2Linux下修改配置</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update user set host = &#x27;%&#x27; where user =&#x27;root&#x27;;</span><br></pre></td></tr></table></figure><p><code>注意：在生产环境下不能为了省事将host设置为%，这样做会存在安全问题，具体的设置可以根据生产环境的IP进行设置。</code></p><p>Host修改完成后记得执行flush privileges使配置立即生效：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>MySQL8版本还需要加一项配置(MySQL8加密方式问题):</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;abc123&#x27;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql8.0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java创建和运行线程</title>
      <link href="/post/8c80bcff.html"/>
      <url>/post/8c80bcff.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Java创建线程的几种方式</p></blockquote><span id="more"></span><h1 id="Java创建线程的几种方式"><a href="#Java创建线程的几种方式" class="headerlink" title="Java创建线程的几种方式"></a>Java创建线程的几种方式</h1><h2 id="方式一、使用Thread"><a href="#方式一、使用Thread" class="headerlink" title="方式一、使用Thread"></a>方式一、使用Thread</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建线程对象</span></span><br><span class="line">Thread t=<span class="keyword">new</span> <span class="title class_">Thread</span>()&#123;<span class="comment">//构造方法内可指定线程名</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//业务逻辑</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//启动线程</span></span><br><span class="line">t.start();</span><br></pre></td></tr></table></figure><h2 id="方式二、使用Runnable-Thread"><a href="#方式二、使用Runnable-Thread" class="headerlink" title="方式二、使用Runnable+Thread"></a>方式二、使用Runnable+Thread</h2><blockquote><p>Thread代表线程</p><p>Runnable代表可运行的任务（业务逻辑）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Runnable</span> <span class="variable">runnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="comment">// 业务逻辑</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 创建线程对象，传递参数(构造器内也可指定线程名)</span></span><br><span class="line"><span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>( runnable );</span><br><span class="line"><span class="comment">// 启动线程</span></span><br><span class="line">t.start();</span><br></pre></td></tr></table></figure><blockquote><p>相比于方式一，为什么衍生出来的方式二？</p></blockquote><ul><li>方法一 是把线程和任务合并在了一起，方法2二是把线程和任务分开了</li><li>用 Runnable 更容易与线程池等高级 API 配合</li><li>用 Runnable 让任务类脱离了 Thread 继承体系，更灵活</li></ul><h2 id="方式三、FutureTask-Thread"><a href="#方式三、FutureTask-Thread" class="headerlink" title="方式三、FutureTask+Thread"></a>方式三、FutureTask+Thread</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//FutureTask 能够接收 Callable 类型的参数，用来处理有返回结果的情况</span></span><br><span class="line"><span class="comment">// 创建任务对象</span></span><br><span class="line">FutureTask&lt;String&gt; task = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(() -&gt; &#123;</span><br><span class="line"> <span class="comment">//业务逻辑</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Hello&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 参数1 是任务对象; 参数2 是线程名字，推荐</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(task, <span class="string">&quot;t&quot;</span>).start();</span><br><span class="line"><span class="comment">// 主线程阻塞，同步等待 task 执行完毕的结果</span></span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> task.get();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JUC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程前置知识</title>
      <link href="/post/5d3a03fa.html"/>
      <url>/post/5d3a03fa.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>并发编程的前置小知识</p></blockquote><span id="more"></span><h1 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h1><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><ul><li><p>程序由指令和数据组成，但这些指令要运行，数据要读写，就必须将指令加载至 CPU，数据加载至内存。在</p><p>指令运行过程中还需要用到磁盘、网络等设备。进程就是用来加载指令、管理内存、管理 IO 的</p></li><li><p>当一个程序被运行，从磁盘加载这个程序的代码至内存，这时就开启了一个进程。</p></li><li><p>进程就可以视为程序的一个实例。大部分程序可以同时运行多个实例进程（例如记事本、画图、浏览器</p><p>等），也有的程序只能启动一个实例进程（例如网易云音乐、360 安全卫士等）</p></li></ul><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><ul><li><p>一个进程之内可以分为一到多个线程。</p></li><li><p>一个线程就是一个指令流，将指令流中的一条条指令以一定的顺序交给 CPU 执行</p></li><li><p>Java 中，线程作为最小调度单位，进程作为资源分配的最小单位。 在 windows 中进程是不活动的，只是作</p><p>为线程的容器</p></li></ul><h2 id="进程与线程对比"><a href="#进程与线程对比" class="headerlink" title="进程与线程对比"></a>进程与线程对比</h2><ul><li>进程基本上相互独立的，而线程存在于进程内，是进程的一个子集</li><li>进程拥有共享的资源，如内存空间等，供其内部的线程共享</li><li>进程间通信较为复杂<ul><li>同一台计算机的进程通信称为 IPC（Inter-process communication）</li><li>不同计算机之间的进程通信，需要通过网络，并遵守共同的协议，例如 HTTP     </li></ul></li><li>线程通信相对简单，因为它们共享进程内的内存，一个例子是多个线程可以访问同一个共享变量</li><li>线程更轻量，线程上下文切换成本一般上要比进程上下文切换低</li></ul><h2 id="并行与并发"><a href="#并行与并发" class="headerlink" title="并行与并发"></a>并行与并发</h2><p>  单核 CPU 下，线程实际还是 <code>串行执行</code> 的。操作系统中有一个组件叫做任务调度器，将 CPU的时间片（windows</p><p>下时间片最小约为 15 毫秒）分给不同的程序使用，只是由于 CPU在线程间（时间片很短）的切换非常快，人类感</p><p>觉是 <code>同时运行</code>的 。总结为一句话就是：<code>微观串行，宏观并行</code></p><p><code>一般会将这种 线程轮流使用 CPU 的做法称为并发</code></p><p><code>多核CPU下，每个核(core)都可以调度运行线程，这时候线程可以是并行的</code></p><h2 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h2><p>从调度角度来说：</p><ul><li><p>需要等待结果返回才能继续运行—&gt;<code>同步</code></p></li><li><p>不需要等待结果返回就能继续运行—&gt;<code>异步</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> JUC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 进程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>码云初始化项目</title>
      <link href="/post/83823b4d.html"/>
      <url>/post/83823b4d.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>码云初始化项目</p></blockquote><span id="more"></span><h2 id="如何从码云初始化项目到IDEA"><a href="#如何从码云初始化项目到IDEA" class="headerlink" title="如何从码云初始化项目到IDEA"></a>如何从码云初始化项目到IDEA</h2><h3 id="1-gitee新建仓库，复制仓库的Https链接"><a href="#1-gitee新建仓库，复制仓库的Https链接" class="headerlink" title="1.gitee新建仓库，复制仓库的Https链接"></a>1.gitee新建仓库，复制仓库的Https链接</h3><p><img src="https://edu-ws.oss-cn-beijing.aliyuncs.com/blog/2018021-20210104002928024-105246109.png" alt="img"></p><h3 id="2-打开IDEA，File-gt-New-gt-Project-from-Version-Control-gt-git，输入第一步复制的仓库地址，点击Clone"><a href="#2-打开IDEA，File-gt-New-gt-Project-from-Version-Control-gt-git，输入第一步复制的仓库地址，点击Clone" class="headerlink" title="2.打开IDEA，File-&gt;New-&gt;Project from Version Control-&gt;git，输入第一步复制的仓库地址，点击Clone"></a>2.打开IDEA，File-&gt;New-&gt;Project from Version Control-&gt;git，输入第一步复制的仓库地址，点击Clone</h3><h3 id="3-创建微服务模块，可以首先导入web和openfeign依赖"><a href="#3-创建微服务模块，可以首先导入web和openfeign依赖" class="headerlink" title="3.创建微服务模块，可以首先导入web和openfeign依赖"></a>3.创建微服务模块，可以首先导入web和openfeign依赖</h3><h3 id="4-将任意模块的pom复制到父文件，删除不必要的配置，聚合每个小模块"><a href="#4-将任意模块的pom复制到父文件，删除不必要的配置，聚合每个小模块" class="headerlink" title="4.将任意模块的pom复制到父文件，删除不必要的配置，聚合每个小模块"></a>4.将任意模块的pom复制到父文件，删除不必要的配置，聚合每个小模块</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xxxxx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxxxx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>xxxxx<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>xxxx<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-将新添加的pom文件导入到项目中"><a href="#5-将新添加的pom文件导入到项目中" class="headerlink" title="5.将新添加的pom文件导入到项目中"></a>5.将新添加的pom文件导入到项目中</h3><h3 id="6-提交代码忽略不需要的文件，打开父项目的-gitignore文件-配置要忽略的内容"><a href="#6-提交代码忽略不需要的文件，打开父项目的-gitignore文件-配置要忽略的内容" class="headerlink" title="6.提交代码忽略不需要的文件，打开父项目的.gitignore文件,配置要忽略的内容"></a>6.提交代码忽略不需要的文件，打开父项目的.gitignore文件,配置要忽略的内容</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">target/</span><br><span class="line">pom.xml.tag</span><br><span class="line">pom.xml.releaseBackup</span><br><span class="line">pom.xml.versionsBackup</span><br><span class="line">pom.xml.next</span><br><span class="line">release.properties</span><br><span class="line">dependency-reduced-pom.xml</span><br><span class="line">buildNumber.properties</span><br><span class="line">.mvn/timing.properties</span><br><span class="line">.mvn/wrapper/maven-wrapper.jar</span><br><span class="line"></span><br><span class="line">**/mvnw</span><br><span class="line">**/mvnw.cmd</span><br><span class="line">**/.mvn</span><br><span class="line">**/target/</span><br><span class="line">.idea</span><br><span class="line">**/.gitignore</span><br></pre></td></tr></table></figure><h3 id="7-选择要提交的文件，全部纳入版本控制-Add-to-VCS"><a href="#7-选择要提交的文件，全部纳入版本控制-Add-to-VCS" class="headerlink" title="7.选择要提交的文件，全部纳入版本控制 Add to VCS"></a>7.选择要提交的文件，全部纳入版本控制 Add to VCS</h3><h3 id="8-IDEA中安装gitee插件"><a href="#8-IDEA中安装gitee插件" class="headerlink" title="8.IDEA中安装gitee插件"></a>8.IDEA中安装gitee插件</h3><h3 id="9-选择要提交的文件-commit-提交时可以不勾选Perform-code-analysis和Check-TODO-show-all-—-gt-commit-and-push"><a href="#9-选择要提交的文件-commit-提交时可以不勾选Perform-code-analysis和Check-TODO-show-all-—-gt-commit-and-push" class="headerlink" title="9.选择要提交的文件,commit 提交时可以不勾选Perform code analysis和Check TODO(show all),—&gt;commit and push"></a>9.选择要提交的文件,commit 提交时可以不勾选Perform code analysis和Check TODO(show all),—&gt;commit and push</h3>]]></content>
      
      
      <categories>
          
          <category> Gitee </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gitee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git-ssh配置</title>
      <link href="/post/f5298d9c.html"/>
      <url>/post/f5298d9c.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Git简单配置，开发效率翻倍</p></blockquote><span id="more"></span><h2 id="Git-SSH基础配置"><a href="#Git-SSH基础配置" class="headerlink" title="Git-SSH基础配置"></a>Git-SSH基础配置</h2><ol><li>注册gitee账号</li><li>安装Git<ol><li>配置用户信息 git config —global user.name “your username”</li><li>配置用户邮箱信息 git config —global user.email “email.com”</li></ol></li><li>进入git bash，输入ssh-keygen -t rsa -C “email.com”生成公钥，三次回车</li><li>查看密钥内容 cat ~/.ssh/id_rsa.pub,将密钥内容复制到码云</li><li>使用ssh -T git@gitee.com 测试是否连接成功</li></ol>]]></content>
      
      
      <categories>
          
          <category> Git基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/light.js"/>
      <url>/js/light.js</url>
      
        <content type="html"><![CDATA[// 霓虹灯效果// 颜色数组var arr = [  "#39c5bb",  "#f14747",  "#f1a247",  "#f1ee47",  "#b347f1",  "#1edbff",  "#ed709b",  "#5636ed",];// 颜色索引var idx = 0;// 切换颜色function changeColor() {  // 仅夜间模式才启用  if (    document.getElementsByTagName("html")[0].getAttribute("data-theme") ==    "dark"  ) {    if (document.getElementById("site-name"))      document.getElementById("site-name").style.textShadow =        arr[idx] + " 0 0 15px";    if (document.getElementById("site-title"))      document.getElementById("site-title").style.textShadow =        arr[idx] + " 0 0 15px";    if (document.getElementById("site-subtitle"))      document.getElementById("site-subtitle").style.textShadow =        arr[idx] + " 0 0 10px";    if (document.getElementById("post-info"))      document.getElementById("post-info").style.textShadow =        arr[idx] + " 0 0 5px";    try {      document.getElementsByClassName("author-info__name")[0].style.textShadow =        arr[idx] + " 0 0 12px";      document.getElementsByClassName(        "author-info__description"      )[0].style.textShadow = arr[idx] + " 0 0 12px";    } catch {}    idx++;    if (idx == 8) {      idx = 0;    }  } else {    // 白天模式恢复默认    if (document.getElementById("site-name"))      document.getElementById("site-name").style.textShadow =        "#1e1e1ee0 1px 1px 1px";    if (document.getElementById("site-title"))      document.getElementById("site-title").style.textShadow =        "#1e1e1ee0 1px 1px 1px";    if (document.getElementById("site-subtitle"))      document.getElementById("site-subtitle").style.textShadow =        "#1e1e1ee0 1px 1px 1px";    if (document.getElementById("post-info"))      document.getElementById("post-info").style.textShadow =        "#1e1e1ee0 1px 1px 1px";    try {      document.getElementsByClassName("author-info__name")[0].style.textShadow =        "";      document.getElementsByClassName(        "author-info__description"      )[0].style.textShadow = "";    } catch {}  }}// 开启计时器window.onload = setInterval(changeColor, 1200);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/cursor.js"/>
      <url>/js/cursor.js</url>
      
        <content type="html"><![CDATA[var CURSOR;Math.lerp = (a, b, n) => (1 - n) * a + n * b;const getStyle = (el, attr) => {  try {    return window.getComputedStyle      ? window.getComputedStyle(el)[attr]      : el.currentStyle[attr];  } catch (e) {}  return "";};class Cursor {  constructor() {    this.pos = { curr: null, prev: null };    this.pt = [];    this.create();    this.init();    this.render();  }  move(left, top) {    this.cursor.style["left"] = `${left}px`;    this.cursor.style["top"] = `${top}px`;  }  create() {    if (!this.cursor) {      this.cursor = document.createElement("div");      this.cursor.id = "cursor";      this.cursor.classList.add("hidden");      document.body.append(this.cursor);    }    var el = document.getElementsByTagName("*");    for (let i = 0; i < el.length; i++)      if (getStyle(el[i], "cursor") == "pointer") this.pt.push(el[i].outerHTML);    document.body.appendChild((this.scr = document.createElement("style")));    // 这里改变鼠标指针的颜色 由svg生成    this.scr.innerHTML = `* {cursor: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8' width='8px' height='8px'><circle cx='4' cy='4' r='4' opacity='1.0' fill='rgb(57,197,187)'/></svg>") 4 4, auto}`;  }  refresh() {    this.scr.remove();    this.cursor.classList.remove("hover");    this.cursor.classList.remove("active");    this.pos = { curr: null, prev: null };    this.pt = [];    this.create();    this.init();    this.render();  }  init() {    document.onmouseover = (e) =>      this.pt.includes(e.target.outerHTML) &&      this.cursor.classList.add("hover");    document.onmouseout = (e) =>      this.pt.includes(e.target.outerHTML) &&      this.cursor.classList.remove("hover");    document.onmousemove = (e) => {      this.pos.curr == null && this.move(e.clientX - 8, e.clientY - 8);      this.pos.curr = { x: e.clientX - 8, y: e.clientY - 8 };      this.cursor.classList.remove("hidden");    };    document.onmouseenter = (e) => this.cursor.classList.remove("hidden");    document.onmouseleave = (e) => this.cursor.classList.add("hidden");    document.onmousedown = (e) => this.cursor.classList.add("active");    document.onmouseup = (e) => this.cursor.classList.remove("active");  }  render() {    if (this.pos.prev) {      this.pos.prev.x = Math.lerp(this.pos.prev.x, this.pos.curr.x, 0.15);      this.pos.prev.y = Math.lerp(this.pos.prev.y, this.pos.curr.y, 0.15);      this.move(this.pos.prev.x, this.pos.prev.y);    } else {      this.pos.prev = this.pos.curr;    }    requestAnimationFrame(() => this.render());  }}(() => {  CURSOR = new Cursor();  // 需要重新获取列表时，使用 CURSOR.refresh()})();]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<div id="gitZone"></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/universe.js"/>
      <url>/js/universe.js</url>
      
        <content type="html"><![CDATA[function dark() {  window.requestAnimationFrame =    window.requestAnimationFrame ||    window.mozRequestAnimationFrame ||    window.webkitRequestAnimationFrame ||    window.msRequestAnimationFrame;  var n,    e,    i,    h,    t = 0.05,    s = document.getElementById("universe"),    o = !0,    a = "180,184,240",    r = "226,225,142",    d = "226,225,224",    c = [];  function f() {    (n = window.innerWidth),      (e = window.innerHeight),      (i = 0.216 * n),      s.setAttribute("width", n),      s.setAttribute("height", e);  }  function u() {    h.clearRect(0, 0, n, e);    for (var t = c.length, i = 0; i < t; i++) {      var s = c[i];      s.move(), s.fadeIn(), s.fadeOut(), s.draw();    }  }  function y() {    (this.reset = function () {      (this.giant = m(3)),        (this.comet = !this.giant && !o && m(10)),        (this.x = l(0, n - 10)),        (this.y = l(0, e)),        (this.r = l(1.1, 2.6)),        (this.dx = l(t, 6 * t) + (this.comet + 1 - 1) * t * l(50, 120) + 2 * t),        (this.dy = -l(t, 6 * t) - (this.comet + 1 - 1) * t * l(50, 120)),        (this.fadingOut = null),        (this.fadingIn = !0),        (this.opacity = 0),        (this.opacityTresh = l(0.2, 1 - 0.4 * (this.comet + 1 - 1))),        (this.do = l(5e-4, 0.002) + 0.001 * (this.comet + 1 - 1));    }),      (this.fadeIn = function () {        this.fadingIn &&          ((this.fadingIn = !(this.opacity > this.opacityTresh)),          (this.opacity += this.do));      }),      (this.fadeOut = function () {        this.fadingOut &&          ((this.fadingOut = !(this.opacity < 0)),          (this.opacity -= this.do / 2),          (this.x > n || this.y < 0) && ((this.fadingOut = !1), this.reset()));      }),      (this.draw = function () {        if ((h.beginPath(), this.giant))          (h.fillStyle = "rgba(" + a + "," + this.opacity + ")"),            h.arc(this.x, this.y, 2, 0, 2 * Math.PI, !1);        else if (this.comet) {          (h.fillStyle = "rgba(" + d + "," + this.opacity + ")"),            h.arc(this.x, this.y, 1.5, 0, 2 * Math.PI, !1);          for (var t = 0; t < 30; t++)            (h.fillStyle =              "rgba(" +              d +              "," +              (this.opacity - (this.opacity / 20) * t) +              ")"),              h.rect(                this.x - (this.dx / 4) * t,                this.y - (this.dy / 4) * t - 2,                2,                2              ),              h.fill();        } else          (h.fillStyle = "rgba(" + r + "," + this.opacity + ")"),            h.rect(this.x, this.y, this.r, this.r);        h.closePath(), h.fill();      }),      (this.move = function () {        (this.x += this.dx),          (this.y += this.dy),          !1 === this.fadingOut && this.reset(),          (this.x > n - n / 4 || this.y < 0) && (this.fadingOut = !0);      }),      setTimeout(function () {        o = !1;      }, 50);  }  function m(t) {    return Math.floor(1e3 * Math.random()) + 1 < 10 * t;  }  function l(t, i) {    return Math.random() * (i - t) + t;  }  f(),    window.addEventListener("resize", f, !1),    (function () {      h = s.getContext("2d");      for (var t = 0; t < i; t++) (c[t] = new y()), c[t].reset();      u();    })(),    (function t() {      document.getElementsByTagName("html")[0].getAttribute("data-theme") ==        "dark" && u(),        window.requestAnimationFrame(t);    })();}dark();]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[:root {    --trans-light: rgba(255, 255, 255, 0.75);    --trans-dark: rgba(25, 25, 25, 0.6);    --border-style: 1px solid rgb(169, 169, 169);    --backdrop-filter: blur(5px) saturate(150%);  }/* 页脚与头图透明 */#footer {    background: transparent !important;  }  #page-header {    background: transparent !important;  }    /* 白天模式遮罩透明 */  #footer::before {    background: transparent !important;  }  #page-header::before {    background: transparent !important;  }    /* 夜间模式遮罩透明 */  [data-theme="dark"] #footer::before {    background: transparent !important;  }  [data-theme="dark"] #page-header::before {    background: transparent !important;  }/* 小冰分类分类磁铁黑夜模式适配 *//* 一般状态 */[data-theme="dark"] .magnet_link_context {    background: #1e1e1e;    color: antiquewhite;  }  /* 鼠标悬浮状态 */  [data-theme="dark"] .magnet_link_context:hover {    background: #3ecdf1;    color: #f2f2f2;  }  /* 翻页按钮居中 */#pagination {    width: 100%;    margin: auto;  }  /* 一级菜单居中 */#nav .menus_items {    position: absolute !important;    width: fit-content !important;    left: 50% !important;    transform: translateX(-50%) !important;  }  /* 子菜单横向展示 */  #nav .menus_items .menus_item:hover .menus_item_child {    display: flex !important;  }  /* 这里的2是代表导航栏的第2个元素，即有子菜单的元素，可以按自己需求修改 */  .menus_items .menus_item:nth-child(5) .menus_item_child {    left: -38px;  }  /* 夜间模式菜单栏发光字 */[data-theme="dark"] #nav .site-page,[data-theme="dark"] #nav .menus_items .menus_item .menus_item_child li a {  text-shadow: 0 0 2px rgb(179,71,241) !important;}/* 手机端适配 */[data-theme="dark"] #sidebar #sidebar-menus .menus_items .site-page {  text-shadow: 0 0 2px rgb(179,71,241) !important;}/* 背景宇宙星光  */#universe{    display: block;    position: fixed;    margin: 0;    padding: 0;    border: 0;    outline: 0;    left: 0;    top: 0;    width: 100%;    height: 100%;    pointer-events: none;    /* 这个是调置顶的优先级的，-1在文章页下面，背景上面，个人推荐这种 */    z-index: -1;  }  /* 侧边栏个人信息卡片动态渐变色 */#aside-content > .card-widget.card-info {    background: linear-gradient(      -45deg,      #e8d8b9,      #eccec5,      #a3e9eb,      #bdbdf0,      #eec1ea    );    box-shadow: 0 0 5px rgb(66, 68, 68);    position: relative;    background-size: 400% 400%;    -webkit-animation: Gradient 10s ease infinite;    -moz-animation: Gradient 10s ease infinite;    animation: Gradient 10s ease infinite !important;  }  @-webkit-keyframes Gradient {    0% {      background-position: 0% 50%;    }    50% {      background-position: 100% 50%;    }    100% {      background-position: 0% 50%;    }  }  @-moz-keyframes Gradient {    0% {      background-position: 0% 50%;    }    50% {      background-position: 100% 50%;    }    100% {      background-position: 0% 50%;    }  }  @keyframes Gradient {    0% {      background-position: 0% 50%;    }    50% {      background-position: 100% 50%;    }    100% {      background-position: 0% 50%;    }  }    /* 黑夜模式适配 */  [data-theme="dark"] #aside-content > .card-widget.card-info {    background: #191919ee;  }    /* 个人信息Follow me按钮 */  #aside-content > .card-widget.card-info > #card-info-btn {    background-color: #3eb8be;    border-radius: 8px;  }  /* 鼠标样式 */#cursor {    position: fixed;    width: 16px;    height: 16px;    /* 这里改变跟随的底色 */    background: rgb(57,197, 187);    border-radius: 8px;    opacity: 0.25;    z-index: 10086;    pointer-events: none;    transition: 0.2s ease-in-out;    transition-property: background, opacity, transform;  }    #cursor.hidden {    opacity: 0;  }    #cursor.hover {    opacity: 0.1;    transform: scale(2.5);    -webkit-transform: scale(2.5);    -moz-transform: scale(2.5);    -ms-transform: scale(2.5);    -o-transform: scale(2.5);  }    #cursor.active {    opacity: 0.5;    transform: scale(0.5);    -webkit-transform: scale(0.5);    -moz-transform: scale(0.5);    -ms-transform: scale(0.5);    -o-transform: scale(0.5);  }    /* 首页文章卡片 */  #recent-posts > .recent-post-item {    background: var(--trans-light);    backdrop-filter: var(--backdrop-filter);    border-radius: 25px;    border: var(--border-style);  }    /* 首页侧栏卡片 */  #aside-content .card-widget {    background: var(--trans-light);    backdrop-filter: var(--backdrop-filter);    border-radius: 18px;    border: var(--border-style);  }    /* 文章页、归档页、普通页面 */  div#post,  div#page,  div#archive {    background: var(--trans-light);    backdrop-filter: var(--backdrop-filter);    border: var(--border-style);    border-radius: 20px;  }    /* 导航栏 */  #page-header.nav-fixed #nav {    background: rgba(255, 255, 255, 0.75);    backdrop-filter: var(--backdrop-filter);  }    [data-theme="dark"] #page-header.nav-fixed #nav {    background: rgba(0, 0, 0, 0.7) !important;  }    /* 夜间模式遮罩 */  [data-theme="dark"] #recent-posts > .recent-post-item,  [data-theme="dark"] #aside-content .card-widget,  [data-theme="dark"] div#post,  [data-theme="dark"] div#archive,  [data-theme="dark"] div#page {    background: var(--trans-dark);  }      /* 夜间模式页脚页头遮罩透明 */  [data-theme="dark"] #footer::before {    background: transparent !important;  }  [data-theme="dark"] #page-header::before {    background: transparent !important;  }    /* 阅读模式 */  .read-mode #aside-content .card-widget {    background: rgba(158, 204, 171, 0.5) !important;  }  .read-mode div#post {    background: rgba(158, 204, 171, 0.5) !important;  }    /* 夜间模式下的阅读模式 */  [data-theme="dark"] .read-mode #aside-content .card-widget {    background: rgba(25, 25, 25, 0.9) !important;    color: #ffffff;  }  [data-theme="dark"] .read-mode div#post {    background: rgba(25, 25, 25, 0.9) !important;    color: #ffffff;  }  .pace {    -webkit-pointer-events: none;    pointer-events: none;    -webkit-user-select: none;    -moz-user-select: none;    user-select: none;    z-index: 2000;    position: fixed;    margin: auto;    top: 4px;    left: 0;    right: 0;    height: 8px;    border-radius: 8px;    width: 7rem;    background: #eaecf2;    border: 1px #e3e8f7;    overflow: hidden}.pace-inactive .pace-progress {    opacity: 0;    transition: .3s ease-in}.pace .pace-progress {    -webkit-box-sizing: border-box;    -moz-box-sizing: border-box;    -ms-box-sizing: border-box;    -o-box-sizing: border-box;    box-sizing: border-box;    -webkit-transform: translate3d(0, 0, 0);    -moz-transform: translate3d(0, 0, 0);    -ms-transform: translate3d(0, 0, 0);    -o-transform: translate3d(0, 0, 0);    transform: translate3d(0, 0, 0);    max-width: 200px;    position: absolute;    z-index: 2000;    display: block;    top: 0;    right: 100%;    height: 100%;    width: 100%;    /* linear-gradient(to right, #3494e6, #ec6ead) */    background: linear-gradient(to right, #43cea2, #3866ca);    animation: gradient 2s ease infinite;    background-size: 200%}.pace.pace-inactive {    opacity: 0;    transition: .3s;    top: -8px}/*哔哩哔哩视频适配*/.aspect-ratio {  position: relative;  width: 90%;  height: auto;  padding-bottom: 75%;  margin: 3% auto;  text-align: center;}.aspect-ratio iframe {  position: absolute;  width: 100%;  height: 86%;  left: 0;  top: 0;}/*哔哩哔哩视频适配*/.aspect-ratio {  position: relative;  width: 90%;  height: auto;  padding-bottom: 75%;  margin: 3% auto;  text-align: center;}.aspect-ratio iframe {  position: absolute;  width: 100%;  height: 86%;  left: 0;  top: 0;}svg.icon {  width: 1em; height: 1em;  /* width和height定义图标的默认宽度和高度*/  vertical-align: -0.15em;  fill: currentColor;  overflow: hidden;}.iconfont {  font-family: "iconfont" !important;  font-size: 3em;  font-style: normal;  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;}body::-webkit-scrollbar {  width: 0;}.neko {  width: 64px;  height: 64px;  background-image: url("https://bu.dusays.com/2022/07/20/62d812db74be9.png");  position: absolute;  right: 32px;  background-repeat: no-repeat;  background-size: contain;  transform: translateX(50%);  cursor: pointer;  font-family: tzy;  font-weight: 600;  font-size: 16px;  color: #6f42c1;  display: none;}.neko::after {  display: none;  width: 100px;  height: 100px;  background-image: url("https://bu.dusays.com/2022/07/20/62d812d95e6f5.png");  background-size: contain;  z-index: 9999;  position: absolute;  right: 50%;  text-align: center;  line-height: 100px;  top: -115%;}.neko.showMsg::after {  content: attr(data-msg);  display: block;  overflow: hidden;  text-overflow: ellipsis;}.neko:hover::after {  content: attr(data-msg);  display: block;  overflow: hidden;  text-overflow: ellipsis;}.neko.fontColor::after {  color: #333;}/*** @description: 滚动条样式  跟猫二选一*/@media screen and (max-width:992px) {  ::-webkit-scrollbar {      width: 8px !important;      height: 8px !important  }  ::-webkit-scrollbar-track {      border-radius: 2em;  }  ::-webkit-scrollbar-thumb {      background-color: rgb(255 255 255 / .3);      background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.1) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.1) 50%, rgba(255, 255, 255, 0.1) 75%, transparent 75%, transparent);      border-radius: 2em  }  ::-webkit-scrollbar-corner {      background-color: transparent  }}@font-face {  font-family: 'tzy';  /* 字体名自定义即可 */  /* src: url('https://cdn.jsdelivr.net/gh/tzy13755126023/BLOG_SOURCE/font/ZhuZiAWan.woff2'); */  src: url('https://npm.elemecdn.com/ethan4116-blog/lib/font/ZhuZiAWan.ttf');  /* 字体文件路径 */  font-display: swap;}body,.gitcalendar {  font-family: tzy !important;}.categoryBar-list {  max-height: 400px;}.clock-row {  overflow: hidden;  text-overflow: ellipsis;}/*3s为加载动画的时间，1为加载动画的次数，ease-in-out为动画效果*/#page-header,#web_bg {  -webkit-animation: imgblur 2s 1 ease-in-out;  animation: imgblur 2s 1 ease-in-out;}@keyframes imgblur {  0% {      filter: blur(5px);  }  100% {      filter: blur(0px);  }}/*适配使用-webkit内核的浏览器 */@-webkit-keyframes imgblur {  0% {      -webkit-filter: blur(5px);  }  100% {      -webkit-filter: blur(0px);  }}.table-wrap img {  margin: .6rem auto .1rem !important;}/* 标签外挂 网站卡片 start */.site-card-group img {  margin: 0 auto .1rem !important;}.site-card-group .info a img {  margin-right: 10px !important;}[data-theme='dark'] .site-card-group .site-card .info .title {  color: #f0f0f0 !important;}[data-theme='dark'] .site-card-group .site-card .info .desc {  color: rgba(255, 255, 255, .7) !important;}.site-card-group .info .desc {  margin-top: 4px !important;}/* 代码块颜色 */figure.highlight pre .addition {  color: #00bf03 !important;}]]></content>
      
    </entry>
    
    
  
</search>
